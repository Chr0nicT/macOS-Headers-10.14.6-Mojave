//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <objc/NSObject.h>

@class AXDispatchTimer, AXIPCClient, AXIPCServer, NSMutableArray, NSString;
@protocol OS_dispatch_queue;

@interface AXServer : NSObject
{
    BOOL _shouldRegisterClientCallbackSourceOnMainRunloop;
    AXIPCServer *_server;
    AXIPCClient *_client;
    NSString *_serverIdentifier;
    NSMutableArray *_assertionWorkBacklog;
    AXDispatchTimer *_assertionRetryTimer;
    NSObject<OS_dispatch_queue> *_assertionWorkQueue;
}

@property(retain, nonatomic) NSObject<OS_dispatch_queue> *assertionWorkQueue; // @synthesize assertionWorkQueue=_assertionWorkQueue;
@property(retain, nonatomic) AXDispatchTimer *assertionRetryTimer; // @synthesize assertionRetryTimer=_assertionRetryTimer;
@property(retain, nonatomic) NSMutableArray *assertionWorkBacklog; // @synthesize assertionWorkBacklog=_assertionWorkBacklog;
@property(nonatomic) BOOL shouldRegisterClientCallbackSourceOnMainRunloop; // @synthesize shouldRegisterClientCallbackSourceOnMainRunloop=_shouldRegisterClientCallbackSourceOnMainRunloop;
@property(copy, nonatomic) NSString *serverIdentifier; // @synthesize serverIdentifier=_serverIdentifier;
@property(retain, nonatomic) AXIPCClient *client; // @synthesize client=_client;
@property(retain, nonatomic) AXIPCServer *server; // @synthesize server=_server;
- (void).cxx_destruct;
- (id)_serviceName;
- (void)_connectServerIfNecessary;
- (BOOL)_connectIfNecessary;
- (void)_willClearServer;
- (void)_didConnectToServer;
- (void)_wasDisconnectedFromClient;
- (void)_didConnectToClient;
- (void)relinquishAssertionWithType:(id)arg1 identifier:(id)arg2;
- (void)acquireAssertionWithType:(id)arg1 identifier:(id)arg2;
- (void)_initializeAssertionBookkeeping;
- (void)_processAssertionBacklog;
- (void)sendAsynchronousMessage:(id)arg1 replyOnQueue:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (void)sendAsynchronousMessage:(id)arg1 replyOnQueue:(id)arg2 objectResultHandler:(CDUnknownBlockType)arg3;
- (void)sendAsynchronousMessage:(id)arg1 replyOnQueue:(id)arg2 boolResultHandler:(CDUnknownBlockType)arg3;
- (id)sendMessage:(id)arg1;
- (id)sendSimpleMessageWithObjectResult:(id)arg1;
- (BOOL)sendSimpleMessageWithResult:(id)arg1;
- (BOOL)sendSimpleMessage:(id)arg1 enqueueError:(id *)arg2;
- (void)sendSimpleMessage:(id)arg1;
- (void)dealloc;
- (id)init;

@end

