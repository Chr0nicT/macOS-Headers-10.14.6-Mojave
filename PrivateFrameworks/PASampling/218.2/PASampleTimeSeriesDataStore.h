//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <PASampling/NSSecureCoding-Protocol.h>

@class NSArray, NSDictionary, NSMutableArray, NSMutableDictionary, NSMutableSet, NSSet, NSString, PABinaryLocator, PAGenealogyTracker, PAImageInfo, PAMountStatusTracker, PASampleTimeInsensitiveTaskData, PASymbolDataStore, PAWSUpdateDataStore;

@interface PASampleTimeSeriesDataStore : NSObject <NSSecureCoding>
{
    NSMutableDictionary *_timeInsensitiveTaskDataDict;
    NSMutableArray *_timeSensitiveSampleDataArray;
    double _startMachTimestamp;
    double _endMachTimestamp;
    double _startWallTimestamp;
    double _endWallTimestamp;
    double _lastWakeTime;
    BOOL _sanitizePaths;
    BOOL _omitThirdPartyProcessStacks;
    BOOL _omitSensitiveStrings;
    NSMutableArray *_fanSpeedArray;
    PAGenealogyTracker *_genealogyTracker;
    PAMountStatusTracker *_mountStatusTracker;
    PAWSUpdateDataStore *_wsDataStore;
    NSMutableSet *_rootKernelFrames;
    PABinaryLocator *_binaryLocator;
    PASymbolDataStore *_symbolDataStore;
    BOOL _usingDsymForUUIDForEverything;
    NSMutableArray *_namesForDsymForUUID;
    NSMutableArray *_numsForDsymForUUID;
    NSMutableDictionary *_symbolHandleCache;
    NSMutableDictionary *_oldSymbolHandleCache;
    NSMutableSet *_pidsToTrack;
    NSMutableArray *_hidEvents;
    unsigned long long _dataSource;
    NSString *_reason;
    BOOL _expectsLiveProcesses;
    BOOL _gatheredNonTimeCriticalDataFromLiveSystem;
    BOOL _shouldPreemptivelyCacheSymbolicators;
    BOOL _shouldSymbolicate;
    BOOL _sampleOnlyMainThreads;
    BOOL _shouldGatherKextStat;
    double _timeWhenTransitionedToSamplingAllProcesses;
    int _targetProcessId;
    PASampleTimeInsensitiveTaskData *_targetTask;
    unsigned long long _targetThreadId;
    unsigned long long _targetHIDEventMachAbs;
    unsigned int _cpuPercent;
    unsigned int _cpuDuration;
    unsigned int _wakeupsPerSec;
    unsigned int _wakeupsDuration;
    NSString *_event;
    NSString *_eventNote;
    NSString *_signature;
    double _extraDuration;
    NSString *_durationNote;
    NSString *_stepsNote;
    double _attemptedSamplingInterval;
    NSString *_kextStat;
    NSString *_kernelVersion;
    NSString *_osProductName;
    NSString *_osProductVersion;
    NSString *_osBuildVersion;
    NSString *_machineArchitecture;
    unsigned int _workQueueSoftThreadLimit;
    unsigned int _workQueueHardThreadLimit;
    NSString *_hardwareModel;
    unsigned int _numActiveCPUs;
    NSString *_bootArgs;
    NSString *_targetProcessBundleVersion;
    NSString *_targetProcessBundleShortVersion;
    NSString *_targetProcessBundleBuildVersion;
    NSString *_targetProcessBundleProjectName;
    NSString *_targetProcessBundleSourceVersion;
    NSString *_targetProcessBundleProductBuildVersion;
    NSString *_targetProcessBundleId;
    NSString *_targetProcessCommerceAppID;
    NSString *_targetProcessCommerceExternalID;
    unsigned long long _previousSampleTimestamp;
    unsigned int _previousStackshotBufferSize;
    struct mach_timebase_info _machTimebase;
    struct _CSArchitecture _arch;
    unsigned int _threadPolicyVersion;
}

+ (id)sampleStoreForKTraceFile:(const char *)arg1 warningsOut:(id)arg2 errorOut:(id *)arg3;
+ (id)newSampleStoreFromFilePath:(const char *)arg1 warningsOut:(id)arg2 errorOut:(id *)arg3;
+ (void)_sortStateChangeArraysOfSampleStore:(id)arg1;
+ (BOOL)canOpenFileAsKTraceFile:(const char *)arg1 errorOut:(id *)arg2;
+ (BOOL)supportsSecureCoding;
@property(readonly) double lastWakeTime; // @synthesize lastWakeTime=_lastWakeTime;
@property double timeWhenTransitionedToSamplingAllProcesses; // @synthesize timeWhenTransitionedToSamplingAllProcesses=_timeWhenTransitionedToSamplingAllProcesses;
@property BOOL shouldGatherKextStat; // @synthesize shouldGatherKextStat=_shouldGatherKextStat;
@property BOOL sampleOnlyMainThreads; // @synthesize sampleOnlyMainThreads=_sampleOnlyMainThreads;
@property BOOL expectsLiveProcesses; // @synthesize expectsLiveProcesses=_expectsLiveProcesses;
@property BOOL shouldPreemptivelyCacheSymbolicators; // @synthesize shouldPreemptivelyCacheSymbolicators=_shouldPreemptivelyCacheSymbolicators;
@property(copy) NSString *bootArgs; // @synthesize bootArgs=_bootArgs;
@property unsigned int numActiveCPUs; // @synthesize numActiveCPUs=_numActiveCPUs;
@property(copy) NSString *hardwareModel; // @synthesize hardwareModel=_hardwareModel;
@property(readonly) unsigned int workQueueHardThreadLimit; // @synthesize workQueueHardThreadLimit=_workQueueHardThreadLimit;
@property(readonly) unsigned int workQueueSoftThreadLimit; // @synthesize workQueueSoftThreadLimit=_workQueueSoftThreadLimit;
@property(copy) NSString *osBuildVersion; // @synthesize osBuildVersion=_osBuildVersion;
@property(copy) NSString *osProductVersion; // @synthesize osProductVersion=_osProductVersion;
@property(copy) NSString *osProductName; // @synthesize osProductName=_osProductName;
@property(readonly) NSString *kernelVersion; // @synthesize kernelVersion=_kernelVersion;
@property(readonly, copy) NSString *kextStat; // @synthesize kextStat=_kextStat;
@property(copy) NSString *stepsNote; // @synthesize stepsNote=_stepsNote;
@property(copy) NSString *durationNote; // @synthesize durationNote=_durationNote;
@property double extraDuration; // @synthesize extraDuration=_extraDuration;
@property(copy) NSString *signature; // @synthesize signature=_signature;
@property(copy) NSString *eventNote; // @synthesize eventNote=_eventNote;
@property(copy) NSString *event; // @synthesize event=_event;
@property unsigned int wakeupsDuration; // @synthesize wakeupsDuration=_wakeupsDuration;
@property unsigned int wakeupsPerSec; // @synthesize wakeupsPerSec=_wakeupsPerSec;
@property unsigned int cpuDuration; // @synthesize cpuDuration=_cpuDuration;
@property unsigned int cpuPercent; // @synthesize cpuPercent=_cpuPercent;
@property unsigned long long targetThreadId; // @synthesize targetThreadId=_targetThreadId;
@property unsigned long long targetHIDEventMachAbs; // @synthesize targetHIDEventMachAbs=_targetHIDEventMachAbs;
@property(readonly) NSString *targetProcessCommerceExternalID; // @synthesize targetProcessCommerceExternalID=_targetProcessCommerceExternalID;
@property(readonly) NSString *targetProcessCommerceAppID; // @synthesize targetProcessCommerceAppID=_targetProcessCommerceAppID;
@property(readonly) NSString *targetProcessBundleId; // @synthesize targetProcessBundleId=_targetProcessBundleId;
@property(readonly) NSString *targetProcessBundleProductBuildVersion; // @synthesize targetProcessBundleProductBuildVersion=_targetProcessBundleProductBuildVersion;
@property(readonly) NSString *targetProcessBundleSourceVersion; // @synthesize targetProcessBundleSourceVersion=_targetProcessBundleSourceVersion;
@property(readonly) NSString *targetProcessBundleProjectName; // @synthesize targetProcessBundleProjectName=_targetProcessBundleProjectName;
@property(readonly) NSString *targetProcessBundleBuildVersion; // @synthesize targetProcessBundleBuildVersion=_targetProcessBundleBuildVersion;
@property(readonly) NSString *targetProcessBundleShortVersion; // @synthesize targetProcessBundleShortVersion=_targetProcessBundleShortVersion;
@property(readonly) NSString *targetProcessBundleVersion; // @synthesize targetProcessBundleVersion=_targetProcessBundleVersion;
@property BOOL omitSensitiveStrings; // @synthesize omitSensitiveStrings=_omitSensitiveStrings;
@property BOOL omitThirdPartyProcessStacks; // @synthesize omitThirdPartyProcessStacks=_omitThirdPartyProcessStacks;
@property BOOL sanitizePaths; // @synthesize sanitizePaths=_sanitizePaths;
@property(readonly) NSArray *hidEvents; // @synthesize hidEvents=_hidEvents;
@property(readonly) PAGenealogyTracker *genealogyTracker; // @synthesize genealogyTracker=_genealogyTracker;
@property(readonly) PAMountStatusTracker *mountStatusTracker; // @synthesize mountStatusTracker=_mountStatusTracker;
@property(readonly) NSArray *samples; // @synthesize samples=_timeSensitiveSampleDataArray;
@property double attemptedSamplingInterval; // @synthesize attemptedSamplingInterval=_attemptedSamplingInterval;
@property(readonly) double endWallTimestamp; // @synthesize endWallTimestamp=_endWallTimestamp;
@property(readonly) double startWallTimestamp; // @synthesize startWallTimestamp=_startWallTimestamp;
@property(readonly) double endMachTimestamp; // @synthesize endMachTimestamp=_endMachTimestamp;
@property(readonly) double startMachTimestamp; // @synthesize startMachTimestamp=_startMachTimestamp;
@property(copy) NSString *reason; // @synthesize reason=_reason;
@property(readonly) unsigned long long dataSource; // @synthesize dataSource=_dataSource;
- (void).cxx_destruct;
- (void)gatherBootArgs;
- (void)gatherNumActiveCPUs;
- (void)gatherHardwareModel;
- (void)gatherWorkQueueHardThreadLimit;
- (void)gatherWorkQueueSoftThreadLimit;
- (double)timeForMachAbsTime:(unsigned long long)arg1;
- (void)setMachTimebase:(struct mach_timebase_info)arg1;
- (struct mach_timebase_info)machTimebase;
- (void)gatherMachineArchitecture;
@property(copy) NSString *machineArchitecture; // @synthesize machineArchitecture=_machineArchitecture;
- (void)setArch:(struct _CSArchitecture)arg1;
- (struct _CSArchitecture)arch;
- (void)gatherOsVersions;
- (void)gatherKernelVersion;
- (void)gatherKextStat;
- (void)sampleTrackedPidsNow;
- (void)addPidsWithNameToSampledPids:(id)arg1;
- (void)addPidToSampledPids:(int)arg1;
- (void)cacheSymbolInformationForAllSymbols;
- (BOOL)_addStackshot:(id)arg1;
- (void)addStackshot:(id)arg1;
- (unsigned long long)addStackshots:(id)arg1;
- (unsigned long long)_addKCDataStackshotFromBuffer:(const void *)arg1 withLength:(unsigned long long)arg2 toSample:(id)arg3 shouldSkipSampleOut:(char *)arg4;
- (unsigned long long)addKCDataStackshotFromBuffer:(const void *)arg1 withLength:(unsigned long long)arg2;
- (unsigned long long)addKCDataStackshots:(id)arg1 createSeparateSamplePerStackshot:(BOOL)arg2;
- (void)_addSampleToSampleArray:(id)arg1;
- (void)addProcessInfoFromTailspin:(id)arg1;
- (void)addSymbolsFromTailspin:(id)arg1;
- (void)addDsymPaths:(id)arg1;
- (void)setDSCSymDir:(id)arg1;
- (void)addDSCSymFromBuffer:(const void *)arg1 withLength:(unsigned long long)arg2;
- (BOOL)addKCDataThreadV4:(const struct thread_snapshot_v4 *)arg1 orKCDataThreadV2:(const struct thread_snapshot_v2 *)arg2 orDeltaThreadV3:(const struct thread_delta_snapshot_v3 *)arg3 orDeltaThreadV2:(const struct thread_delta_snapshot_v2 *)arg4 withStack:(id)arg5 andName:(const char *)arg6 andWaitInfo:(const struct stackshot_thread_waitinfo *)arg7 andInstructionCycles:(const struct instrs_cycles_snapshot *)arg8 toTask:(id)arg9 withCurrentThreads:(id)arg10 withPreviousThreads:(id)arg11;
- (void)_asynchronouslyCacheSymbolicatorForPid:(int)arg1;
- (id)newArrayOfSamplesForSampleIndexRangeStart:(unsigned long long)arg1 end:(unsigned long long)arg2;
- (id)newArrayOfSamplesForTimeRangeWithWallClockStartTime:(double)arg1 andEndTime:(double)arg2;
- (BOOL)hasSampleOnOrAfterWallTime:(double)arg1 returningFirstIndex:(unsigned long long *)arg2;
- (BOOL)hasSampleOnOrAfterTime:(double)arg1 returningFirstIndex:(unsigned long long *)arg2;
- (id)newArrayOfSamplesForTimeRangeWithMachStartTime:(double)arg1 andEndTime:(double)arg2;
- (void)dealloc;
@property(readonly) unsigned long long numSamples;
- (id)init;
- (id)timeInsensitiveTaskDataForUniqueId:(unsigned long long)arg1;
- (id)addKernelStack:(id)arg1;
- (id)sharedCacheImageInfosForSharedCacheInfo:(id)arg1;
- (id)sharedCacheInfoForSampleTask:(id)arg1;
- (id)timeInsensitiveTaskDataForKCDataStackshotDeltaTask:(const struct task_delta_snapshot_v2 *)arg1 withLoadInfos:(const struct dyld_uuid_info_64 *)arg2 numLoadInfos:(unsigned int)arg3 andMachineArchitecture:(struct _CSArchitecture)arg4;
- (id)timeInsensitiveTaskDataForKCDataStackshotTask:(const struct task_snapshot_v2 *)arg1 withLoadInfos:(const struct dyld_uuid_info_64 *)arg2 numLoadInfos:(unsigned int)arg3 andMachineArchitecture:(struct _CSArchitecture)arg4;
- (id)timeInsensitiveTaskDataForStackshotTask:(id)arg1 andMachineArchitecture:(struct _CSArchitecture)arg2;
- (void)flushAllCachedSymbolInformation;
- (void)flushCachedSymbolicatorForTask:(id)arg1;
- (void)flushAllSymbolicators;
- (id)cachedSymbolHandleForAddress:(unsigned long long)arg1 inPid:(int)arg2;
- (id)symbolHandleForAddress:(unsigned long long)arg1 inLivingPid:(int)arg2;
- (id)symbolHandleForOffset:(unsigned long long)arg1 inBinaryWithUUID:(id)arg2 inSampleTask:(id)arg3;
- (id)copyImageInfosForPid:(int)arg1;
- (id)symbolHandleForAddress:(unsigned long long)arg1 inSampleTask:(id)arg2;
- (void)gatherNonTimeCriticalDataFromLiveSystem;
- (void)gatherExtraInfoForTargetProcess:(id)arg1;
- (void)doneSamplingLiveSystem;
- (void)startingSamplingLiveSystem;
- (void)printFrameRateReportWithStartSampleIndex:(unsigned long long)arg1 andEndIndex:(unsigned long long)arg2 andStartDisplayIndex:(unsigned long long)arg3 toStream:(id)arg4;
- (void)gatherOccasionalLiveDataForMachTime:(double)arg1;
- (BOOL)cacheLoadInfoForProcess:(int)arg1;
@property(readonly) NSString *targetProcessBundleName;
@property(readonly) NSString *targetProcessAbsolutePath;
@property(readonly) NSString *targetProcessName;
- (id)targetTask;
@property int targetProcessId;
- (BOOL)setTargetProcessWithHint:(id)arg1;
- (id)fanSpeedClosestToMachTime:(double)arg1;
- (void)useDsymForUUIDFor:(id)arg1;
@property BOOL shouldUseDsymForUUIDToFindBinaries;
@property BOOL shouldSymbolicate;
@property(readonly) PAImageInfo *kernelCache;
- (unsigned long long)_backfillPETSamplesUsingKCDataStackshotFromBuffer:(const void *)arg1 withLength:(unsigned long long)arg2;
- (id)_firstPetSampleAfterTime:(double)arg1;
- (void)backfillKPerfThreadWithDataFromKCDataThread:(const struct thread_snapshot_v2 *)arg1 inPid:(int)arg2 withLeafUserFrame:(id)arg3 andLeafKernelFrame:(id)arg4 andName:(const char *)arg5 taskIsSuspended:(BOOL)arg6 threadInstructionCycles:(const struct instrs_cycles_snapshot *)arg7;
- (void)backfillKPerfTaskWithDataFromKCDataTask:(const struct task_snapshot_v2 *)arg1;
- (int)_addKPerfDataFromKTraceSession:(struct ktrace_session *)arg1 beforeTime:(unsigned long long)arg2;
- (id)getMissingSampleThreadInCurrentSampleInTask:(id)arg1 forTid:(unsigned long long)arg2 needNewThreadForThisSample:(BOOL)arg3;
- (id)getMissingSampleTaskInCurrentSampleForPid:(int)arg1 andTaskName:(const char *)arg2 didExecSinceLastSample:(BOOL)arg3 needNewTaskForThisSample:(BOOL)arg4;
- (id)timeInsensitiveTaskDataPid:(int)arg1 andUniqueId:(unsigned long long)arg2 andName:(const char *)arg3 didExec:(BOOL)arg4;
- (id)_latestProcessStateChangeForPid:(int)arg1;
- (void)_addTidToIdleThreadSet:(unsigned long long)arg1;
@property(readonly, nonatomic) NSSet *idleThreadSet;
- (void)setIdleThreadSet:(id)arg1;
- (void)_addProcessStateChangeToArray:(id)arg1;
@property(readonly, nonatomic) NSDictionary *pidToPidStateChangeArrayDictionary;
- (void)setPidToPidStateChangeArrayDictionary:(id)arg1;
- (id)_latestThreadStateChangeForTid:(unsigned long long)arg1;
- (void)_addThreadStateChange:(id)arg1;
@property(readonly, nonatomic) NSDictionary *tidToTidStateChangeArrayDictionary;
- (void)setTidToTidStateChangeArrayDictionary:(id)arg1;
- (int)pidForTid:(unsigned long long)arg1;
- (id)tidsForPid:(int)arg1;
- (void)_addPid:(int)arg1 tid:(unsigned long long)arg2;
@property(readonly, nonatomic) NSDictionary *tidToPidDict;
- (void)setTidToPidDict:(id)arg1;
@property(readonly, nonatomic) NSDictionary *pidToTidSetDict;
- (void)setPidToTidSetDict:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

