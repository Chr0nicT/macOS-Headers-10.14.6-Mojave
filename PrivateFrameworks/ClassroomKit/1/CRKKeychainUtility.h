//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <objc/NSObject.h>

@interface CRKKeychainUtility : NSObject
{
}

+ (BOOL)identityExpiredWithPersistentId:(id)arg1;
+ (BOOL)certificateExpiredWithPersistentId:(id)arg1;
+ (id)certificateExpirationDateFromPersistentId:(id)arg1;
+ (id)identityExpirationDateFromPersistentId:(id)arg1;
+ (id)_validityDateIntervalForCetificateRef:(struct OpaqueSecCertificateRef *)arg1;
+ (id)_validityStartDateForCertificateRef:(struct OpaqueSecCertificateRef *)arg1;
+ (id)_validityEndDateForCertificateRef:(struct OpaqueSecCertificateRef *)arg1;
+ (id)validityDateIntervalForItemWithPersistentID:(id)arg1;
+ (BOOL)itemWithPersistentIDIsTemporallyValid:(id)arg1;
+ (id)certificateCommonNamesFromPersistentID:(id)arg1;
+ (id)identityPersistentIdFromCertificatePersistentID:(id)arg1 group:(id)arg2;
+ (id)createIdentityPersistentIdFromCommonName:(id)arg1 groupName:(id)arg2;
+ (struct OpaqueSecIdentityRef *)identityFromPrivateKeyData:(id)arg1 certificateData:(id)arg2;
+ (id)addCertificateData:(id)arg1 toGroup:(id)arg2;
+ (id)persistentIdFromCertificateData:(id)arg1;
+ (struct OpaqueSecKeyRef *)privateKeyFromPersistentId:(id)arg1;
+ (id)certificateDataFromPersistentId:(id)arg1;
+ (id)privateKeyDataFromPersistentId:(id)arg1;
+ (id)persistentIdFromPrivateKeyData:(id)arg1 certificateData:(id)arg2;
+ (id)getIdentityPublicCertificateData:(struct OpaqueSecIdentityRef *)arg1;
+ (id)getIdentityFingerprint:(struct OpaqueSecIdentityRef *)arg1;
+ (id)getIdentityExpirationDate:(struct OpaqueSecIdentityRef *)arg1;
+ (id)getCertificateFingerprint:(struct OpaqueSecCertificateRef *)arg1;
+ (id)getCertificateExpirationDate:(struct OpaqueSecCertificateRef *)arg1;
+ (struct OpaqueSecIdentityRef *)createIdentityWithCommonName:(id)arg1 error:(id *)arg2;
+ (id)getCommonNamesForCertificate:(struct OpaqueSecCertificateRef *)arg1;
+ (struct OpaqueSecCertificateRef *)getLeafCertificateForTrust:(struct __SecTrust *)arg1;
+ (BOOL)itemExistsInKeychain:(void *)arg1;
+ (id)getCertificatesWithPersistentIDs:(id)arg1;
+ (struct OpaqueSecIdentityRef *)copyIdentityWithPersistentID:(id)arg1;
+ (struct OpaqueSecCertificateRef *)copyCertificateWithPersistentID:(id)arg1;
+ (const void *)copyItemWithPersistentID:(id)arg1;
+ (BOOL)removeItemWithPersistentID:(id)arg1;
+ (id)addPrivateKeyData:(id)arg1 certificateData:(id)arg2 toGroup:(id)arg3;
+ (id)addItem:(void *)arg1 toGroup:(id)arg2;
+ (id)baseQueryAttributes;
+ (id)defaultKeychain;

@end

