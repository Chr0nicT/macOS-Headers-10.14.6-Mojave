//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <UIKitCore/UIView.h>

#import <UIKitCore/_UIKBRTRecognizerDelegate-Protocol.h>
#import <UIKitCore/_UIKBRTTouchDriftingDelegate-Protocol.h>
#import <UIKitCore/_UIScreenEdgePanRecognizerDelegate-Protocol.h>
#import <UIKitCore/_UIViewRepresentingKeyboardLayout-Protocol.h>

@class NSMutableArray, NSMutableDictionary, NSMutableSet, NSObject, NSString, NSUUID, UIKBCadenceMonitor, UIKBScreenTraits, UIKBTextEditingTraits, UIKeyboardTaskQueue, UITextInputTraits, _UIKBRTFingerDetection, _UIKBRTRecognizer, _UIKBRTTouchDrifting, _UIKBRTTouchVelocities, _UIScreenEdgePanRecognizer;
@protocol OS_dispatch_queue;

@interface UIKeyboardLayout : UIView <_UIKBRTRecognizerDelegate, _UIKBRTTouchDriftingDelegate, _UIViewRepresentingKeyboardLayout, _UIScreenEdgePanRecognizerDelegate>
{
    UITextInputTraits *_inputTraits;
    UIKBScreenTraits *_screenTraits;
    UIKBTextEditingTraits *_textEditingTraits;
    NSMutableArray *_uncommittedTouchUUIDs;
    NSUUID *_activeTouchUUID;
    NSUUID *_shiftKeyTouchUUID;
    unsigned long long _cursorLocation;
    BOOL _disableInteraction;
    UIKeyboardTaskQueue *_taskQueue;
    BOOL hideKeysUnderIndicator;
    BOOL _hasPreferredHeight;
    BOOL _isExecutingDeferredTouchTasks;
    BOOL _listeningForWillChange;
    BOOL _listeningForDidChange;
    double _preferredHeight;
    _UIScreenEdgePanRecognizer *_screenEdgePanRecognizer;
    CDUnknownBlockType _deferredTouchDownTask;
    CDUnknownBlockType _deferredTouchMovedTask;
    _UIKBRTRecognizer *_handRestRecognizer;
    _UIKBRTFingerDetection *_fingerDetection;
    UIKBCadenceMonitor *_cadenceMonitor;
    _UIKBRTTouchVelocities *_touchVelocities;
    double lastTouchUpTime;
    double _timestampOfLastTouchesEnded;
    CDUnknownBlockType _deferredTaskForActiveTouch;
    _UIKBRTTouchDrifting *_touchDrifting;
    NSMutableDictionary *_deferredTouchTaskLists;
    NSObject<OS_dispatch_queue> *_deferredTouchTaskListsQueue;
    NSMutableSet *_touchIgnoredUUIDSet;
}

+ (BOOL)_showSmallDisplayKeyplane;
+ (struct CGSize)keyboardSizeForInputMode:(id)arg1 screenTraits:(id)arg2 keyboardType:(long long)arg3;
+ (Class)_subclassForScreenTraits:(id)arg1;
@property(nonatomic) BOOL listeningForDidChange; // @synthesize listeningForDidChange=_listeningForDidChange;
@property(nonatomic) BOOL listeningForWillChange; // @synthesize listeningForWillChange=_listeningForWillChange;
@property(nonatomic) BOOL isExecutingDeferredTouchTasks; // @synthesize isExecutingDeferredTouchTasks=_isExecutingDeferredTouchTasks;
@property(retain, nonatomic) NSMutableSet *touchIgnoredUUIDSet; // @synthesize touchIgnoredUUIDSet=_touchIgnoredUUIDSet;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *deferredTouchTaskListsQueue; // @synthesize deferredTouchTaskListsQueue=_deferredTouchTaskListsQueue;
@property(retain, nonatomic) NSMutableDictionary *deferredTouchTaskLists; // @synthesize deferredTouchTaskLists=_deferredTouchTaskLists;
@property(retain, nonatomic) _UIKBRTTouchDrifting *touchDrifting; // @synthesize touchDrifting=_touchDrifting;
@property(readonly, nonatomic) BOOL hasPreferredHeight; // @synthesize hasPreferredHeight=_hasPreferredHeight;
@property(copy, nonatomic) CDUnknownBlockType deferredTaskForActiveTouch; // @synthesize deferredTaskForActiveTouch=_deferredTaskForActiveTouch;
@property(readonly, nonatomic) double timestampOfLastTouchesEnded; // @synthesize timestampOfLastTouchesEnded=_timestampOfLastTouchesEnded;
@property(nonatomic) double lastTouchUpTime; // @synthesize lastTouchUpTime;
@property(retain, nonatomic) _UIKBRTTouchVelocities *touchVelocities; // @synthesize touchVelocities=_touchVelocities;
@property(retain, nonatomic) UIKBCadenceMonitor *cadenceMonitor; // @synthesize cadenceMonitor=_cadenceMonitor;
@property(retain, nonatomic) _UIKBRTFingerDetection *fingerDetection; // @synthesize fingerDetection=_fingerDetection;
@property(retain, nonatomic) _UIKBRTRecognizer *handRestRecognizer; // @synthesize handRestRecognizer=_handRestRecognizer;
@property(copy, nonatomic) CDUnknownBlockType deferredTouchMovedTask; // @synthesize deferredTouchMovedTask=_deferredTouchMovedTask;
@property(copy, nonatomic) CDUnknownBlockType deferredTouchDownTask; // @synthesize deferredTouchDownTask=_deferredTouchDownTask;
@property(retain, nonatomic) _UIScreenEdgePanRecognizer *screenEdgePanRecognizer; // @synthesize screenEdgePanRecognizer=_screenEdgePanRecognizer;
@property(nonatomic) BOOL hideKeysUnderIndicator; // @synthesize hideKeysUnderIndicator;
@property(nonatomic) double preferredHeight; // @synthesize preferredHeight=_preferredHeight;
@property(nonatomic) BOOL disableInteraction; // @synthesize disableInteraction=_disableInteraction;
@property(nonatomic) unsigned long long cursorLocation; // @synthesize cursorLocation=_cursorLocation;
@property(retain, nonatomic) NSUUID *shiftKeyTouchUUID; // @synthesize shiftKeyTouchUUID=_shiftKeyTouchUUID;
@property(retain, nonatomic) NSUUID *activeTouchUUID; // @synthesize activeTouchUUID=_activeTouchUUID;
- (id)simulateTouchForCharacter:(id)arg1 errorVector:(struct CGPoint)arg2 shouldTypeVariants:(BOOL)arg3 baseKeyForVariants:(BOOL)arg4;
- (id)simulateTouch:(struct CGPoint)arg1;
- (void)changeToKeyplane:(id)arg1;
- (id)keyplaneNamed:(id)arg1;
- (id)keyplaneForKey:(id)arg1;
- (id)baseKeyForString:(id)arg1;
- (BOOL)shouldMergeAssistantBarWithKeyboardLayout;
- (struct CGSize)stretchFactor;
- (void)setTwoFingerTapTimestamp:(double)arg1;
- (BOOL)shouldAllowSelectionGestures:(BOOL)arg1 atPoint:(struct CGPoint)arg2 toBegin:(BOOL)arg3;
- (id)internationalKeyDisplayStringOnEmojiKeyboard;
- (void)updateUndoKeyState;
- (BOOL)globeKeyDisplaysAsEmojiKey;
- (void)setKeyboardBias:(long long)arg1;
- (void)updateGlobeKeyAndLayoutOriginBeforeSnapshotForInputView:(id)arg1;
- (BOOL)supportsEmoji;
- (BOOL)isEmojiKeyplane;
- (BOOL)keyplaneContainsEmojiKey;
- (BOOL)keyplaneContainsDismissKey;
- (void)triggerSpaceKeyplaneSwitchIfNecessary;
- (id)currentKeyplane;
- (double)biasedKeyboardWidthRatio;
- (long long)currentHandBias;
- (void)cancelTouchesForTwoFingerTapGesture:(id)arg1;
- (void)didEndIndirectSelectionGesture;
- (void)willBeginIndirectSelectionGesture;
- (void)setDisableTouchInput:(BOOL)arg1;
- (void)setPasscodeOutlineAlpha:(double)arg1;
- (BOOL)shouldFadeToLayout;
- (BOOL)shouldFadeFromLayout;
- (void)fadeWithInvocation:(id)arg1;
- (SEL)handlerForNotification:(id)arg1;
- (struct CGRect)frameForKeylayoutName:(id)arg1;
- (struct CGRect)dragGestureRectInView:(id)arg1;
- (double)flickDistance;
- (double)hitBuffer;
- (BOOL)canHandleEvent:(id)arg1;
- (unsigned long long)targetEdgesForScreenGestureRecognition;
- (unsigned long long)fingerIDForTouchUUID:(id)arg1;
- (struct CGPoint)_uikbrtTouchDrifting:(id)arg1 touchCenterForFingerID:(unsigned long long)arg2;
- (id)_uikbrtTouchDrifting:(id)arg1 touchIdentifiersForFingerID:(unsigned long long)arg2;
- (unsigned long long)_uikbrtTouchDrifting:(id)arg1 fingerIDFortouchIdentifier:(id)arg2;
- (void)_uikbrtTouchDriftingStateChanged:(id)arg1;
- (struct CGPoint)rightVirtualDriftOffset;
- (struct CGPoint)leftVirtualDriftOffset;
- (void)setNeedsVirtualDriftUpdate;
- (BOOL)supportsVirtualDrift;
- (BOOL)isReachableDevice;
- (BOOL)_handRestRecognizerCancelShouldBeEnd;
- (BOOL)_hasRelatedTouchesForTouchState:(id)arg1;
- (void)_ignoreTouchState:(id)arg1;
- (void)_updateTouchState:(id)arg1 errorVector:(struct CGPoint)arg2 rowOffsetFromHomeRow:(long long)arg3;
- (id)getHorizontalOffsetFromHomeRowForRowRelativeToHomeRow:(long long)arg1;
- (struct CGPoint)getCenterForKeyUnderRightIndexFinger;
- (struct CGPoint)getCenterForKeyUnderLeftIndexFinger;
- (void)handRestRecognizerNotifyRestForBegin:(BOOL)arg1 location:(struct CGPoint)arg2 timestamp:(double)arg3 pathIndex:(int)arg4 touchUUID:(id)arg5 context:(id)arg6;
- (CDUnknownBlockType)handRestRecognizerSilenceNextTouchDown;
- (struct CGSize)handRestRecognizerStandardKeyPixelSize;
- (BOOL)handRestRecognizerShouldNeverIgnoreTouchState:(id)arg1 fromPoint:(struct CGPoint)arg2 toPoint:(struct CGPoint)arg3 forRestingState:(unsigned long long)arg4 otherRestedTouchLocations:(id)arg5;
- (unsigned char)getHandRestRecognizerState;
- (void)screenEdgePanRecognizerStateDidChange:(id)arg1;
- (BOOL)_canAddTouchesToScreenGestureRecognizer:(id)arg1;
- (void)resetTouchProcessingForKeyboardChange;
- (void)updateTouchProcessingForKeyplaneChange;
- (void)updateTouchProcessingForKeyboardChange;
- (void)reloadKeyboardGestureRecognition;
- (void)didMoveToWindow;
- (void)_resetFingerDetectionFromLayout;
- (BOOL)_shouldAllowKeyboardHandlingForTouchesEndedOrCancelled:(id)arg1 withEvent:(id)arg2;
- (BOOL)_shouldAllowKeyboardHandlingForTouchesMoved:(id)arg1 withEvent:(id)arg2;
- (BOOL)_shouldAllowKeyboardHandlingForTouchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)assertSavedLocation:(struct CGPoint)arg1 onTouch:(id)arg2 inWindow:(id)arg3 resetPrevious:(BOOL)arg4;
- (void)_addTouchToScreenEdgePanRecognizer:(id)arg1;
- (void)_executeDeferredTouchTasks;
- (void)_clearDeferredTouchTasks;
- (BOOL)_shouldAllowKeyboardHandlingIfNecessaryForTouch:(id)arg1 phase:(long long)arg2 withTouchState:(id)arg3 task:(CDUnknownBlockType)arg4;
- (void)resetHRRLayoutState;
- (void)recognizer:(id)arg1 cancelTouchOnLayoutWithId:(id)arg2 startPoint:(struct CGPoint)arg3 endPoint:(struct CGPoint)arg4 whenReady:(CDUnknownBlockType)arg5;
- (void)recognizer:(id)arg1 releaseTouchToLayoutWithId:(id)arg2 startPoint:(struct CGPoint)arg3 endPoint:(struct CGPoint)arg4 whenReady:(CDUnknownBlockType)arg5;
- (void)recognizer:(id)arg1 continueTrackingIgnoredTouchWithId:(id)arg2 currentPoint:(struct CGPoint)arg3 whenReady:(CDUnknownBlockType)arg4;
- (void)recognizer:(id)arg1 willIgnoreTouchWithId:(id)arg2 startingAt:(double)arg3 atPoint:(struct CGPoint)arg4 currentPoint:(struct CGPoint)arg5 whenReady:(CDUnknownBlockType)arg6;
- (BOOL)queryShouldNeverIgnoreTouchStateWithIdentifier:(id)arg1 touchState:(id)arg2 startPoint:(struct CGPoint)arg3 forRestingState:(unsigned long long)arg4;
- (void)recognizer:(id)arg1 shouldContinueTrackingTouchWithId:(id)arg2 startingAt:(double)arg3 atPoint:(struct CGPoint)arg4 currentPoint:(struct CGPoint)arg5 forContinueState:(unsigned long long)arg6 whenStateReady:(CDUnknownBlockType)arg7;
- (void)recognizer:(id)arg1 restartTouchDownForTouchWithId:(id)arg2 startingAt:(double)arg3 atPoint:(struct CGPoint)arg4 currentPoint:(struct CGPoint)arg5 whenStateReady:(CDUnknownBlockType)arg6;
- (void)recognizer:(id)arg1 beginTouchDownForTouchWithId:(id)arg2 atPoint:(struct CGPoint)arg3 forBeginState:(unsigned long long)arg4 whenStateReady:(CDUnknownBlockType)arg5;
- (void)recognizerBlockUntilTaskQueueReadyForceUsingDeferredTask:(BOOL)arg1;
- (void)_enumerateDeferredTouchUUIDs:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (BOOL)canForceTouchUUIDCommit:(id)arg1 inWindow:(id)arg2;
- (void)commitTouches:(id)arg1 executionContext:(id)arg2;
- (void)forceUpdatesForCommittedTouch;
- (void)commitTouchUUIDs:(id)arg1;
- (id)touchUUIDsToCommitBeforeTouchUUID:(id)arg1;
- (void)_removeTouchesFromProcessing:(id)arg1;
- (void)touchesEstimatedPropertiesUpdated:(id)arg1;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)clearShiftIfNecessaryForEndedTouchState:(id)arg1;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)touchChanged:(id)arg1;
- (CDUnknownBlockType)touchChangedTaskForTouchState:(id)arg1;
- (void)touchChanged:(id)arg1 executionContext:(id)arg2;
- (void)touchCancelled:(id)arg1 forResting:(BOOL)arg2 executionContext:(id)arg3;
- (void)touchCancelled:(id)arg1 executionContext:(id)arg2;
- (void)touchCancelled:(id)arg1;
- (CDUnknownBlockType)touchCancelledTaskForTouchState:(id)arg1 forResting:(BOOL)arg2;
- (void)touchUp:(id)arg1 executionContext:(id)arg2;
- (void)didCommitTouchState:(id)arg1;
- (void)touchUp:(id)arg1;
- (CDUnknownBlockType)touchUpTaskForTouchState:(id)arg1;
- (void)_touchEndedProcessingForTouches:(id)arg1;
- (void)touchDragged:(id)arg1 executionContext:(id)arg2;
- (void)touchDragged:(id)arg1;
- (CDUnknownBlockType)touchDraggedTaskForTouchState:(id)arg1;
- (void)touchDown:(id)arg1 executionContext:(id)arg2;
- (void)touchDown:(id)arg1;
- (CDUnknownBlockType)touchDownTaskForTouchState:(id)arg1;
- (void)_setRequiresExclusiveTouch:(BOOL)arg1;
- (BOOL)canProduceString:(id)arg1;
- (BOOL)shouldShowIndicator;
- (id)activationIndicatorView;
- (void)deactivateActiveKeysClearingTouchInfo:(BOOL)arg1 clearingDimming:(BOOL)arg2;
- (void)setReturnKeyEnabled:(BOOL)arg1 withDisplayName:(id)arg2 withType:(int)arg3;
- (void)restoreDefaultsForAllKeys;
- (void)restoreDefaultsForKey:(id)arg1;
- (void)setLongPressAction:(SEL)arg1 forKey:(id)arg2;
- (void)setAction:(SEL)arg1 forKey:(id)arg2;
- (void)setTarget:(id)arg1 forKey:(id)arg2;
- (void)setLabel:(id)arg1 forKey:(id)arg2;
@property(retain, nonatomic) NSString *layoutTag;
- (void)setRenderConfig:(id)arg1;
- (void)updateBackgroundCorners;
- (BOOL)canMultitap;
- (BOOL)hasAccentKey;
- (BOOL)hasCandidateKeys;
- (id)candidateList;
- (BOOL)performSpaceAction;
- (BOOL)performReturnAction;
- (void)didClearInput;
- (id)_keyboardLongPressInteractionRegions;
- (id)_keyboardLayoutView;
- (void)longPressAction;
- (BOOL)isShiftKeyPlaneChooser;
- (BOOL)isShiftKeyBeingHeld;
- (void)setAutoshift:(BOOL)arg1;
- (void)setShift:(BOOL)arg1;
- (BOOL)diacriticForwardCompose;
- (BOOL)isAlphabeticPlane;
- (BOOL)ignoresShiftState;
- (BOOL)usesAutoShift;
- (void)updateLocalizedKeys:(BOOL)arg1;
- (void)deactivateActiveKeys;
- (void)clearTransientState;
- (void)clearUnusedObjects:(BOOL)arg1;
- (void)setRecentInputs:(id)arg1;
- (void)acceptRecentInputIfNecessary;
- (unsigned long long)textEditingKeyMask;
- (void)setTextEditingTraits:(id)arg1;
- (void)showKeyboardWithInputTraits:(id)arg1 screenTraits:(id)arg2 splitTraits:(id)arg3;
@property(readonly, nonatomic) long long idiom;
@property(readonly, nonatomic) long long orientation;
@property(retain, nonatomic) UIKeyboardTaskQueue *taskQueue;
- (void)willMoveToWindow:(id)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)addWipeRecognizer;
- (void)wipeGestureRecognized:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

