//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSMutableDictionary, NSMutableSet, NSString;

@interface QuickLiteDatabase : NSObject
{
    struct sqlite3 *QL_sqliteDatabase;
    NSString *QL_sqliteDatabasePath;
    int QL_cacheMethod;
    NSMutableDictionary *QL_schema;
    long long QL_lastErrorID;
    NSString *QL_lastError;
    unsigned long long QL_processID;
    NSMutableSet *QL_modifiedCursors;
    BOOL QL_notifySQLStatement;
    BOOL QL_isInDebugMode;
    BOOL QL_saveChangesWhenClosing;
    BOOL QL_willCommitChangeSchema;
}

+ (void)QLP_decodeQuantum:(char *)arg1 andSource:(const char *)arg2;
+ (id)decodeDataFromBase64:(id)arg1;
+ (id)encodeDataToBase64:(id)arg1;
+ (id)prepareStringForQuery:(id)arg1;
+ (id)UUIDString;
+ (id)escapeQuotesFromString:(id)arg1;
+ (id)databaseWithFile:(id)arg1;
+ (id)sharedQuickLiteDatatypes;
+ (id)sharedROWIDKeywords;
- (void)_communicateCompactingDoneChanged:(id)arg1;
- (void)_communicateDatabaseHasChanged:(id)arg1;
- (BOOL)QLP_closeSavingChanges:(BOOL)arg1;
- (long long)_prepareSQLite3Statement:(struct sqlite3_stmt **)arg1 sqlQuery:(id)arg2;
- (void)QLP_checkIfSQLQueryWillChangeSchema:(id)arg1;
- (void)QLP_executeSingleSQLStatement:(id)arg1;
- (id)QLP_flattenAllTables;
- (void)QLP_logIfInDebugMode:(id)arg1;
- (void)QLP_logIfInDebugMode:(SEL)arg1 forClass:(Class)arg2;
- (void)QLP_setFullColumnNamesEnabled;
- (void)QLP_deregisterModifiedCursor:(id)arg1;
- (void)QLP_registerModifiedCursor:(id)arg1;
- (int)QLP_isImportFileAvailable:(id)arg1;
- (int)QLP_datatypeForTable:(id)arg1 column:(id)arg2;
- (int)QLP_datatypeForColumn:(id)arg1;
- (id)QLP_performQuery:(id)arg1 useMiniCursor:(BOOL)arg2 cacheMethod:(int)arg3 treatValuesAsString:(BOOL)arg4 saveSQLStatement:(BOOL)arg5;
- (id)QLP_performInternalQuickLiteQuery:(id)arg1 useMiniCursor:(BOOL)arg2 cacheMethod:(int)arg3 treatValuesAsString:(BOOL)arg4;
- (BOOL)QLP_performExecuteQuery:(id)arg1 saveSQLStatement:(BOOL)arg2;
- (BOOL)QLP_performExecuteQuery:(id)arg1;
- (void)QLP_sendSQLStatement:(id)arg1;
- (void)QLP_setLastError:(const char *)arg1 withID:(long long)arg2;
- (id)QLP_schema;
- (void)readDatafile:(id)arg1;
- (void)setTempStoreMode:(int)arg1;
- (int)tempStoreMode;
- (void)setSynchronousMode:(int)arg1;
- (int)synchronousMode;
- (void)setSessionCacheSize:(unsigned long long)arg1;
- (unsigned long long)sessionCacheSize;
- (void)setBusyTimeout:(unsigned long long)arg1;
- (id)descriptionForValue:(id)arg1;
- (id)lastError;
- (long long)lastErrorID;
- (unsigned long long)maxRowUIDForTable:(id)arg1;
- (id)lastRowInserted;
- (id)temporaryTables;
- (id)indexedColumnsForTable:(id)arg1;
- (id)allIndexes;
- (id)datatypesForTable:(id)arg1;
- (id)columnsForTable:(id)arg1;
- (id)allTables;
- (id)tables;
- (struct sqlite3 *)sqliteDatabase;
- (id)performQuery:(id)arg1 useMiniCursor:(BOOL)arg2 cacheMethod:(int)arg3 treatValuesAsString:(BOOL)arg4;
- (id)performQuery:(id)arg1 useMiniCursor:(BOOL)arg2 treatValuesAsString:(BOOL)arg3;
- (id)performQuery:(id)arg1 useMiniCursor:(BOOL)arg2;
- (id)performQuery:(id)arg1 cacheMethod:(int)arg2 treatValuesAsString:(BOOL)arg3;
- (id)performQuery:(id)arg1 treatValuesAsString:(BOOL)arg2;
- (id)performQuery:(id)arg1 cacheMethod:(int)arg2;
- (id)performQuery:(id)arg1;
- (id)databaseEncoding;
- (id)sqliteVersion;
- (id)quickLiteVersion;
- (BOOL)integrityCheck;
- (BOOL)compact;
- (int)importFromFile:(id)arg1 encoding:(unsigned long long)arg2 columnDelimiter:(id)arg3 endOfRecord:(id)arg4 table:(id)arg5 dropTableIfItExistsAndRecreate:(BOOL)arg6 clearTableContentsBeforeImporting:(BOOL)arg7;
- (BOOL)isTransactionActive;
- (BOOL)isInDebugMode;
- (void)setIsInDebugMode:(BOOL)arg1;
- (void)setSendsSQLStatement:(BOOL)arg1;
- (BOOL)sendsSQLStatement;
- (void)setCacheMethod:(int)arg1;
- (int)cacheMethod;
- (id)databasePath;
- (void)setDatabasePath:(id)arg1;
- (BOOL)isDatabaseOpen;
- (void)revert;
- (BOOL)save;
- (BOOL)hasUnsavedChanges;
- (BOOL)savesChangesWhenClosingDatabase;
- (void)setSavesChangesWhenClosingDatabase:(BOOL)arg1;
- (BOOL)closeSavingChanges:(BOOL)arg1;
- (BOOL)close;
- (BOOL)open:(BOOL)arg1 cacheMethod:(int)arg2 exposeSQLOnNotify:(BOOL)arg3 debugMode:(BOOL)arg4 readDatafile:(BOOL)arg5;
- (BOOL)open:(BOOL)arg1 cacheMethod:(int)arg2;
- (BOOL)open:(BOOL)arg1;
- (BOOL)open;
- (void)dealloc;
- (id)init;
- (id)initWithFile:(id)arg1;
- (void)QLP_QuickLiteDatabaseDidChangeNotification;
- (void)QLP_uninstallCommitCallback;
- (void)QLP_installCommitCallback;
- (id)QLP_suffixWithDotDelimiter:(id)arg1;
- (id)QLP_prefixWithDotDelimiter:(id)arg1;
- (BOOL)QLP_isColumnROWIDAlias:(id)arg1 forTable:(id)arg2;
- (long long)QLP_ROWIDPresenceLocation:(id)arg1 andDatatypes:(id)arg2;
- (BOOL)QLP_sqlString:(id)arg1 forTable:(id)arg2 withColumns:(id)arg3 andDatatypes:(id)arg4;
- (void)QLP_sqlString:(id)arg1 appendingTags:(id)arg2;
- (void)QLP_sqlString:(id)arg1 appendingTags:(id)arg2 quoteTags:(BOOL)arg3;
- (BOOL)QLP_insertStringValues:(id)arg1 forColumns:(id)arg2 inTable:(id)arg3;
- (void)QLP_rebuildDatatypeCache;
- (BOOL)QLP_removeColumn:(id)arg1 fromTable:(id)arg2;
- (BOOL)QLP_createTable:(id)arg1 withColumns:(id)arg2 andDatatypes:(id)arg3 isTemporary:(BOOL)arg4;
- (BOOL)QLP_beginTransactionMode:(id)arg1;
- (void)dropIndex:(id)arg1;
- (BOOL)createIndexForColumn:(id)arg1 inTable:(id)arg2 isUnique:(BOOL)arg3;
- (unsigned long long)rowCountInTable:(id)arg1;
- (BOOL)deleteAllRowsInTable:(id)arg1;
- (BOOL)deleteRowsWithValue:(id)arg1 forColumn:(id)arg2 inTable:(id)arg3;
- (BOOL)deleteRowsWithUIDObjects:(id)arg1 inTable:(id)arg2;
- (BOOL)deleteRowWithUID:(id)arg1 inTable:(id)arg2;
- (BOOL)updateValues:(id)arg1 forColumns:(id)arg2 withRowUID:(id)arg3 inTable:(id)arg4;
- (BOOL)insertValues:(id)arg1 forColumns:(id)arg2 inTable:(id)arg3;
- (id)tableInfo:(id)arg1;
- (BOOL)removeColumn:(id)arg1 fromTable:(id)arg2;
- (BOOL)addColumn:(id)arg1 withDataType:(id)arg2 toTable:(id)arg3;
- (BOOL)dropTable:(id)arg1;
- (BOOL)copyTable:(id)arg1 toTable:(id)arg2;
- (BOOL)createTemporaryTable:(id)arg1 withColumns:(id)arg2 andDatatypes:(id)arg3;
- (BOOL)createTable:(id)arg1 withColumns:(id)arg2 andDatatypes:(id)arg3;
- (BOOL)rollbackTransaction;
- (BOOL)commitTransaction;
- (BOOL)beginExclusiveTransaction;
- (BOOL)beginImmediateTransaction;
- (BOOL)beginDeferredTransaction;
- (BOOL)beginTransaction;

@end

