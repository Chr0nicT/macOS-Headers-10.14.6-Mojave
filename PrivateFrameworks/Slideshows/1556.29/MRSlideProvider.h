//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <Slideshows/MRAssetPlayerDelegate-Protocol.h>
#import <Slideshows/MRLoadable-Protocol.h>
#import <Slideshows/MRRenderable-Protocol.h>

@class MCAnimationPathKeyframed, MCSlide, MRAssetPlayer, MRAudioDucker, MRFrame, MRImage, MRLayer, MRLayerEffect, NSDictionary, NSInvocationOperation, NSLock, NSString;

@interface MRSlideProvider : NSObject <MRLoadable, MRRenderable, MRAssetPlayerDelegate>
{
    struct CGSize mDefaultSize;
    float mStillTime;
    NSString *mImageSizeScript;
    NSDictionary *mEffectAttributes;
    NSString *mShowTimeScript;
    NSInvocationOperation *mPreloadOperation;
    NSLock *mPreloadOperationLock;
    MRFrame *mFrame;
    MRImage *mOriginalImage;
    MRImage *mOutputImage;
    struct CGSize mRequestedSize;
    MRLayerEffect *mEffectLayer;
    int mKenBurnsType;
    MRAssetPlayer *mSlidePlayer;
    MRLayer *mSlideLayer;
    unsigned long long mSlideIndex;
    struct CGSize mImageSize;
    struct CGSize mLastImageSize;
    double mLastTime;
    struct CGSize mLastDaSize;
    struct CGSize mSizeFactor;
    unsigned int mFlags;
    double _centerAnimationPathTriggerTime;
    double _scaleAnimationPathTriggerTime;
    double _rotationAnimationPathTriggerTime;
    double _timeToPreloadFor;
    MRAudioDucker *_audioDucker;
    int mDefaultKenBurnsType;
    double _showTime;
    double _showDuration;
    MCSlide *_slide;
    double mOriginalImageAspectRatio;
    double _slideStartTime;
    double _slideDuration;
    NSString *_assetPath;
    double _scale;
    double _rotation;
    MCAnimationPathKeyframed *_centerAnimationPath;
    MCAnimationPathKeyframed *_scaleAnimationPath;
    MCAnimationPathKeyframed *_rotationAnimationPath;
    NSString *_filterID;
    id _playerHint;
    struct CGPoint _center;
}

@property id playerHint; // @synthesize playerHint=_playerHint;
@property(copy, nonatomic) NSString *filterID; // @synthesize filterID=_filterID;
@property(retain, nonatomic) MCAnimationPathKeyframed *rotationAnimationPath; // @synthesize rotationAnimationPath=_rotationAnimationPath;
@property(retain, nonatomic) MCAnimationPathKeyframed *scaleAnimationPath; // @synthesize scaleAnimationPath=_scaleAnimationPath;
@property(retain, nonatomic) MCAnimationPathKeyframed *centerAnimationPath; // @synthesize centerAnimationPath=_centerAnimationPath;
@property(nonatomic) double rotation; // @synthesize rotation=_rotation;
@property(nonatomic) double scale; // @synthesize scale=_scale;
@property(nonatomic) struct CGPoint center; // @synthesize center=_center;
@property(copy, nonatomic) NSString *assetPath; // @synthesize assetPath=_assetPath;
@property(readonly) double slideDuration; // @synthesize slideDuration=_slideDuration;
@property(readonly) double slideStartTime; // @synthesize slideStartTime=_slideStartTime;
@property(readonly) double imageAspectRatio; // @synthesize imageAspectRatio=mOriginalImageAspectRatio;
@property(readonly) MRFrame *frame; // @synthesize frame=mFrame;
@property int defaultKenBurnsType; // @synthesize defaultKenBurnsType=mDefaultKenBurnsType;
@property(retain, nonatomic) MCSlide *slide; // @synthesize slide=_slide;
@property(nonatomic) struct CGSize sizeFactor; // @synthesize sizeFactor=mSizeFactor;
@property(readonly) struct CGSize requestedSize; // @synthesize requestedSize=mRequestedSize;
@property(nonatomic) double showDuration; // @synthesize showDuration=_showDuration;
@property(nonatomic) double showTime; // @synthesize showTime=_showTime;
@property(copy, nonatomic) NSString *showTimeScript; // @synthesize showTimeScript=mShowTimeScript;
@property(retain, nonatomic) NSDictionary *effectAttributes; // @synthesize effectAttributes=mEffectAttributes;
@property(copy, nonatomic) NSString *imageSizeScript; // @synthesize imageSizeScript=mImageSizeScript;
@property(nonatomic) float stillTime; // @synthesize stillTime=mStillTime;
@property(nonatomic) struct CGSize defaultSize; // @synthesize defaultSize=mDefaultSize;
- (void)imageIsAvailableFromAssetPlayer:(id)arg1;
- (id)patchworkAtTime:(double)arg1 inContext:(id)arg2 withArguments:(id)arg3;
- (id)retainedByUserRenderedImageAtTime:(double)arg1 inContext:(id)arg2 withArguments:(id)arg3;
- (void)renderAtTime:(double)arg1 inContext:(id)arg2 withArguments:(id)arg3;
- (BOOL)prerenderForTime:(double)arg1 inContext:(id)arg2 withArguments:(id)arg3;
- (BOOL)updateStuffWithAssetManager:(id)arg1;
- (void)_computeImageSizeInContext:(id)arg1 withArguments:(id)arg2;
@property(readonly, nonatomic) BOOL isInfinite;
@property(readonly, nonatomic) BOOL isAlphaFriendly;
@property(readonly, nonatomic) BOOL isOpaque;
@property(readonly, nonatomic) BOOL isNative3D;
- (void)cancelLoading;
- (void)unload;
- (void)loadWithArguments:(id)arg1;
- (void)loadForTime:(double)arg1 inContext:(id)arg2 withArguments:(id)arg3 now:(BOOL)arg4;
- (BOOL)isLoadedForTime:(double)arg1;
- (id)currentSlideInfo;
- (void)_unloadIfNotUpdatingLive;
- (BOOL)endLiveUpdate;
- (BOOL)beginLiveUpdate;
@property(nonatomic) double time;
@property(nonatomic) BOOL isPlaying;
- (void)updateShowTimeAndDurationWithPlugTiming:(id)arg1 andAttributes:(id)arg2;
- (struct CGSize)unframedImageSizeForAspectRatio:(float)arg1 frameID:(id)arg2 andFrameAttributes:(id)arg3 atIndex:(unsigned int)arg4 framedImageSize:(struct CGSize *)arg5;
- (struct CGSize)framedImageSizeAtIndex:(unsigned int)arg1 aspectRatio:(float)arg2;
@property(readonly) BOOL hasFilters;
@property(nonatomic) BOOL needsToUpdateLayout;
@property(readonly) BOOL isLoaded;
@property(readonly) BOOL canPlay;
@property(nonatomic) BOOL isMuted;
@property(nonatomic) BOOL slideIsReadonly;
@property(nonatomic) BOOL isStill;
@property(nonatomic) BOOL wantsMipmap;
@property(nonatomic) BOOL wantsMonochromatic;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)cleanup;
- (void)dealloc;
- (id)initWithEffectLayer:(id)arg1;
- (void)printFlags;
- (void)applyKenBurnsAtTime:(double)arg1 withTargetSize:(struct CGSize)arg2 kenBurnsType:(int)arg3 translation:(struct CGPoint *)arg4 scale:(double *)arg5 rotation:(double *)arg6;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

