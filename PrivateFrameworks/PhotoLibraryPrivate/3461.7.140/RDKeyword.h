//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <PhotoLibraryPrivate/RDKeywordModel.h>

@class NSMutableSet, NSSet, NSString;

@interface RDKeyword : RDKeywordModel
{
    BOOL _isFavorite;
    RDKeyword *_parent;
    NSString *_displayableAncestorString;
    NSSet *_allChildren;
    NSMutableSet *_directChildren;
}

+ (void)ensureBuiltinKeywordsExistForDatabase:(id)arg1;
+ (id)stringRepresentationForDatabase:(id)arg1;
+ (id)localizableRepresentationForDatabase:(id)arg1;
+ (void)importStringRepresentation:(id)arg1 toDatabase:(id)arg2;
+ (void)importLocalizableRepresentation:(id)arg1 toDatabase:(id)arg2;
+ (id)keywordUuidToArchiveStringForKeywordUuids:(id)arg1 fromDatabase:(id)arg2;
+ (id)archiveStringsForKeywordIds:(id)arg1 fromDatabase:(id)arg2;
+ (id)displayNameFromString:(id)arg1 forDatabase:(id)arg2;
+ (id)parentNameFromString:(id)arg1;
+ (id)nameFromString:(id)arg1;
+ (BOOL)isUniqueKeyword:(id)arg1 inDatabase:(id)arg2;
+ (id)keywordsFromDatabase:(id)arg1 matchingString:(id)arg2 partial:(BOOL)arg3 matchLocation:(unsigned char)arg4;
+ (id)keywordsFromDatabase:(id)arg1 matchingString:(id)arg2 partial:(BOOL)arg3 fromStart:(BOOL)arg4;
+ (id)keywordsFromDatabase:(id)arg1 matchingString:(id)arg2 partial:(BOOL)arg3;
+ (id)makeUniqueName:(id)arg1 forParent:(id)arg2;
+ (id)newKeywordsFromFlatList:(id)arg1 existingKeywords:(id)arg2 obeyKeywordLock:(BOOL)arg3 fromDatabase:(id)arg4;
+ (id)importKeywords:(id)arg1 toDatabase:(id)arg2;
+ (id)importKeyword:(id)arg1 toDatabase:(id)arg2;
+ (id)addKeywordWithInvertedString:(id)arg1 inDatabase:(id)arg2;
+ (id)addKeywordWithInvertedString:(id)arg1 inDatabase:(id)arg2 withNotification:(BOOL)arg3;
+ (id)addKeywordWithString:(id)arg1 inDatabase:(id)arg2;
+ (id)addKeywordWithString:(id)arg1 inDatabase:(id)arg2 withNotification:(BOOL)arg3;
+ (id)addKeywordIfMissing:(id)arg1 withParent:(id)arg2;
+ (id)addKeywordIfMissing:(id)arg1 withParent:(id)arg2 inDatabase:(id)arg3;
+ (id)addKeywordIfMissing:(id)arg1 withParent:(id)arg2 inDatabase:(id)arg3 withNotification:(BOOL)arg4;
+ (id)findKeywordWithString:(id)arg1 fromDatabase:(id)arg2;
+ (id)findKeyword:(id)arg1 withParent:(id)arg2;
+ (id)findKeyword:(id)arg1 withParent:(id)arg2 fromDatabase:(id)arg3;
+ (id)findKeyword:(id)arg1 fromDatabase:(id)arg2;
+ (id)highestKeywordFromCollection:(id)arg1;
+ (id)allKeywordsFromDatabase:(id)arg1;
+ (id)importedKeywordFromDatabase:(id)arg1;
+ (id)importedKeywordString;
+ (id)cleanKeywordString:(id)arg1;
+ (id)splitUpMultipleKeywords:(id)arg1;
+ (id)splitUpArray:(id)arg1 viaString:(id)arg2;
+ (long long)compareKeywordName:(id)arg1 toName:(id)arg2 options:(long long)arg3;
+ (id)addKeywordsForKeywordStrings:(id)arg1 inDatabase:(id)arg2;
+ (unsigned long long)countOfUniqueVersionsUsingKeywords:(id)arg1 keywordNamesUsed:(id)arg2;
+ (id)archiveStringsForKeywords:(id)arg1;
+ (void)deleteKeywords:(id)arg1 withReason:(unsigned short)arg2;
+ (id)convertFromKeypath:(id)arg1;
+ (id)pathExtensions;
+ (id)archiveDelimiter;
+ (id)keywordWithName:(id)arg1 parent:(id)arg2 inDatabase:(id)arg3;
+ (id)addImportedLabelToArchiveString:(id)arg1;
+ (id)appendString:(id)arg1 belowArchiveString:(id)arg2;
+ (id)appendString:(id)arg1 aboveArchiveString:(id)arg2;
+ (id)stringByDeletingParent:(id)arg1;
+ (id)parentArchiveStringFromString:(id)arg1;
+ (id)nameFromArchiveString:(id)arg1;
+ (void)addBackgroundBlock:(CDUnknownBlockType)arg1;
+ (void)initialize;
@property(readonly, nonatomic) NSMutableSet *directChildren; // @synthesize directChildren=_directChildren;
@property(readonly, nonatomic) NSSet *allChildren; // @synthesize allChildren=_allChildren;
@property(readonly, nonatomic) NSString *displayableAncestorString; // @synthesize displayableAncestorString=_displayableAncestorString;
@property(retain, nonatomic) RDKeyword *parent; // @synthesize parent=_parent;
@property(readonly, nonatomic) BOOL isFavorite; // @synthesize isFavorite=_isFavorite;
- (void).cxx_destruct;
- (void)updateHasChildren;
@property(readonly, nonatomic) NSSet *versions;
- (long long)hierarchyLevelCompare:(id)arg1;
@property(readonly, nonatomic) long long hierarchyLevel;
- (long long)hierarchyLevelTR:(long long)arg1;
- (void)setName:(id)arg1;
- (BOOL)hasAncestor:(id)arg1;
@property(readonly, nonatomic) NSString *displayName;
@property(readonly, nonatomic) NSString *displayablePathString;
- (long long)caseInsensitiveCompare:(id)arg1;
- (long long)compare:(id)arg1;
@property(readonly, nonatomic) NSString *keyPath;
@property(readonly, nonatomic) NSString *invertedArchiveString;
@property(readonly, nonatomic) NSString *archiveString;
- (void)allParents:(id)arg1;
@property(readonly, nonatomic) NSString *parentName;
@property(readonly, nonatomic) NSString *stringValue;
@property(readonly, nonatomic) unsigned long long countOfVersions;
- (id)countOfVersionsAsNumber;
- (id)versionIds;
- (void)deleteKeywordWithReason:(unsigned short)arg1;
- (id)_selfAndAllChildrenOrdered;
- (CDUnknownBlockType)willPersist;
- (id)description;
- (id)versionsForSearchIndex;
- (void)invalidateSearchIndexForKeyPath:(id)arg1;

@end

