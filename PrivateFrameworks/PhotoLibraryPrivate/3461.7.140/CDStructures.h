//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct BufferSegment {
    char *_field1;
    unsigned int _field2;
    unsigned short _field3;
    unsigned short _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned long long _field7;
    long long _field8;
    int _field9;
    short _field10;
    unsigned char _field11;
    _Bool _field12;
};

struct CC_SHA1state_st {
    unsigned int h0;
    unsigned int h1;
    unsigned int h2;
    unsigned int h3;
    unsigned int h4;
    unsigned int Nl;
    unsigned int Nh;
    unsigned int data[16];
    int num;
};

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double width;
    double height;
};

struct CompletedInflightProperties {
    void *_field1;
    struct CompletedInflightProperties *_field2;
};

struct CoreSignature {
    struct vector<bool, std::__1::allocator<bool>> _field1;
};

struct LRUCache<std::__1::pair<long, Li::Model::CoreSignature>, RDModel *> {
    struct __list_node_base<std::__1::pair<std::__1::pair<long, Li::Model::CoreSignature>, RDModel *>, void *> __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::pair<std::__1::pair<long, Li::Model::CoreSignature>, RDModel *>, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
    struct map<std::__1::pair<long, Li::Model::CoreSignature>, std::__1::__list_iterator<std::__1::pair<std::__1::pair<long, Li::Model::CoreSignature>, RDModel *>, void *>, std::__1::less<std::__1::pair<long, Li::Model::CoreSignature>>, std::__1::allocator<std::__1::pair<const std::__1::pair<long, Li::Model::CoreSignature>, std::__1::__list_iterator<std::__1::pair<std::__1::pair<long, Li::Model::CoreSignature>, RDModel *>, void *>>>> _map;
    unsigned long long _capacity;
};

struct LiRidBitset;

struct NSObject {
    Class _field1;
};

struct PFAsyncDispatchMulticaster {
    Class _field1;
};

struct PFIntSize_st {
    unsigned long long width;
    unsigned long long height;
};

struct PropertyIndexData {
    _Bool _field1;
    union {
        char *_field1;
        unsigned short *_field2;
    } _field2;
};

struct PropertyIndexMap {
    struct CoreSignature _field1;
    unsigned long long _field2;
    struct PropertyIndexData _field3;
};

struct SizedSegment;

struct StreamDecoder {
    struct vector<Li::Transport::SizedSegment *, std::__1::allocator<Li::Transport::SizedSegment *>> _segments;
    char *_data;
    long long _offset;
    unsigned long long _capacity;
    unsigned long long _length;
    _Bool _typed;
    unsigned long long _segmentIndex;
    unsigned long long _decodedLength;
    void *_mappedBuffer;
    unsigned long long _mappedSize;
};

struct StreamEncoder {
    struct vector<Li::Transport::SizedSegment *, std::__1::allocator<Li::Transport::SizedSegment *>> _segments;
    char *_data;
    long long _offset;
    unsigned long long _capacity;
    unsigned long long _length;
    _Bool _typed;
    unsigned char _firstSegmentBuffer[4096];
};

struct XTCFHeader {
    unsigned int signature;
    unsigned short version;
    unsigned short flags;
    unsigned int openCount;
    unsigned int indexLength;
    long long offsetToIndexes;
    long long offsetToData;
    long long offsetToEndOfData;
    long long offsetToEndOfFile;
    unsigned int indexCount;
    unsigned int sortedCount;
    unsigned int indexCapacity;
    unsigned int indexEntryLength;
    unsigned long long serialNumber;
    unsigned int userVersion;
    unsigned int userDataType;
    unsigned int userDataLength;
    unsigned int pageAlignment;
};

struct _CGSize {
    double _field1;
    double _field2;
};

struct _LiModelPropertyIndexMapList {
    void *_field1;
    struct _LiModelPropertyIndexMapList *_field2;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>, void *>*> *__next_;
};

struct __list_node_base<std::__1::pair<std::__1::pair<long, Li::Model::CoreSignature>, RDModel *>, void *> {
    struct __list_node_base<std::__1::pair<std::__1::pair<long, Li::Model::CoreSignature>, RDModel *>, void *> *__prev_;
    struct __list_node_base<std::__1::pair<std::__1::pair<long, Li::Model::CoreSignature>, RDModel *>, void *> *__next_;
};

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct __wrap_iter<const std::__1::shared_ptr<LiRidBitset>*> {
    shared_ptr_4932a42e *__i;
};

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct map<std::__1::pair<long, Li::Model::CoreSignature>, std::__1::__list_iterator<std::__1::pair<std::__1::pair<long, Li::Model::CoreSignature>, RDModel *>, void *>, std::__1::less<std::__1::pair<long, Li::Model::CoreSignature>>, std::__1::allocator<std::__1::pair<const std::__1::pair<long, Li::Model::CoreSignature>, std::__1::__list_iterator<std::__1::pair<std::__1::pair<long, Li::Model::CoreSignature>, RDModel *>, void *>>>> {
    struct __tree<std::__1::__value_type<std::__1::pair<long, Li::Model::CoreSignature>, std::__1::__list_iterator<std::__1::pair<std::__1::pair<long, Li::Model::CoreSignature>, RDModel *>, void *>>, std::__1::__map_value_compare<std::__1::pair<long, Li::Model::CoreSignature>, std::__1::__value_type<std::__1::pair<long, Li::Model::CoreSignature>, std::__1::__list_iterator<std::__1::pair<std::__1::pair<long, Li::Model::CoreSignature>, RDModel *>, void *>>, std::__1::less<std::__1::pair<long, Li::Model::CoreSignature>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<long, Li::Model::CoreSignature>, std::__1::__list_iterator<std::__1::pair<std::__1::pair<long, Li::Model::CoreSignature>, RDModel *>, void *>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<long, Li::Model::CoreSignature>, std::__1::__list_iterator<std::__1::pair<std::__1::pair<long, Li::Model::CoreSignature>, RDModel *>, void *>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<long, Li::Model::CoreSignature>, std::__1::__value_type<std::__1::pair<long, Li::Model::CoreSignature>, std::__1::__list_iterator<std::__1::pair<std::__1::pair<long, Li::Model::CoreSignature>, RDModel *>, void *>>, std::__1::less<std::__1::pair<long, Li::Model::CoreSignature>>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct shared_ptr<LiRidBitset> {
    struct LiRidBitset *_field1;
    struct __shared_weak_count *_field2;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>, _TableHashFunctor, std::__1::equal_to<LiTable *>, std::__1::allocator<std::__1::pair<LiTable *const, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>>> {
    struct __hash_table<std::__1::__hash_value_type<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>, std::__1::__unordered_map_hasher<LiTable *, std::__1::__hash_value_type<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>, _TableHashFunctor, true>, std::__1::__unordered_map_equal<LiTable *, std::__1::__hash_value_type<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>, std::__1::equal_to<LiTable *>, true>, std::__1::allocator<std::__1::__hash_value_type<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<LiTable *, std::__1::__hash_value_type<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>, _TableHashFunctor, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<LiTable *, std::__1::__hash_value_type<LiTable *, std::__1::tuple<NSMutableOrderedSet *, NSMutableOrderedSet *, NSMutableOrderedSet *>>, std::__1::equal_to<LiTable *>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>, std::__1::equal_to<long>, true>, std::__1::allocator<std::__1::__hash_value_type<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>, std::__1::hash<long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<long, LiModel *, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<std::__1::pair<const long, LiModel *>>>>, std::__1::equal_to<long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<Li::Sqlite::BufferSegment *, std::__1::allocator<Li::Sqlite::BufferSegment *>> {
    struct BufferSegment **__begin_;
    struct BufferSegment **__end_;
    struct __compressed_pair<Li::Sqlite::BufferSegment **, std::__1::allocator<Li::Sqlite::BufferSegment *>> {
        struct BufferSegment **__value_;
    } __end_cap_;
};

struct vector<Li::Transport::SizedSegment *, std::__1::allocator<Li::Transport::SizedSegment *>> {
    struct SizedSegment **__begin_;
    struct SizedSegment **__end_;
    struct __compressed_pair<Li::Transport::SizedSegment **, std::__1::allocator<Li::Transport::SizedSegment *>> {
        struct SizedSegment **__value_;
    } __end_cap_;
};

struct vector<bool, std::__1::allocator<bool>> {
    unsigned long long *_field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<unsigned long>> {
        unsigned long long _field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<LiRidBitset>, std::__1::allocator<std::__1::shared_ptr<LiRidBitset>>> {
    shared_ptr_4932a42e *__begin_;
    shared_ptr_4932a42e *__end_;
    struct __compressed_pair<std::__1::shared_ptr<LiRidBitset>*, std::__1::allocator<std::__1::shared_ptr<LiRidBitset>>> {
        shared_ptr_4932a42e *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    char *_field1;
    char *_field2;
    char *_field3;
    char *_field4;
    void *_field5;
} CDStruct_98c8119d;

typedef struct {
    long long _field1;
    int _field2;
    unsigned int _field3;
    long long _field4;
} CDStruct_198678f7;

typedef struct {
    struct {
        unsigned int _field1;
        unsigned int _field2;
        unsigned long long _field3;
        unsigned long long _field4;
    } _field1;
    unsigned short _field2;
    unsigned short _field3;
    unsigned int _field4;
    unsigned short _field5;
    unsigned short _field6;
    char _field7[36];
} CDStruct_967ea38f;

// Template types
typedef struct __wrap_iter<const std::__1::shared_ptr<LiRidBitset>*> {
    shared_ptr_4932a42e *__i;
} __wrap_iter_a5f64ff8;

typedef struct shared_ptr<LiRidBitset> {
    struct LiRidBitset *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_4932a42e;

typedef struct vector<std::__1::shared_ptr<LiRidBitset>, std::__1::allocator<std::__1::shared_ptr<LiRidBitset>>> {
    shared_ptr_4932a42e *__begin_;
    shared_ptr_4932a42e *__end_;
    struct __compressed_pair<std::__1::shared_ptr<LiRidBitset>*, std::__1::allocator<std::__1::shared_ptr<LiRidBitset>>> {
        shared_ptr_4932a42e *__value_;
    } __end_cap_;
} vector_6231458f;

