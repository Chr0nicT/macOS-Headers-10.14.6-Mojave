//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <WebCore/WAKResponder.h>

@class CALayer, WAKView;

@interface WAKWindow : WAKResponder
{
    CALayer *_hostLayer;
    // Error parsing type: ^{LegacyTileCache=@{RetainPtr<CGImage *>=^v}{RetainPtr<LegacyTileCacheTombstone>=^v}{Optional<WebCore::FloatRect>=B(constexpr_storage_t<WebCore::FloatRect>=C{FloatRect={FloatPoint=ff}{FloatSize=ff}})}{IntSize=ii}iiBBBBBBBBBB{unique_ptr<WebCore::LegacyTileGrid, std::__1::default_delete<WebCore::LegacyTileGrid> >={__compressed_pair<WebCore::LegacyTileGrid *, std::__1::default_delete<WebCore::LegacyTileGrid> >=^{LegacyTileGrid}}}{unique_ptr<WebCore::LegacyTileGrid, std::__1::default_delete<WebCore::LegacyTileGrid> >={__compressed_pair<WebCore::LegacyTileGrid *, std::__1::default_delete<WebCore::LegacyTileGrid> >=^{LegacyTileGrid}}}{Timer=^^?{MonotonicTime=d}{Seconds=d}B{RefPtr<WebCore::ThreadTimerHeapItem, WTF::DumbPtrTraits<WebCore::ThreadTimerHeapItem> >=^{ThreadTimerHeapItem}}{Ref<WTF::Thread, WTF::DumbPtrTraits<WTF::Thread> >=^{Thread}}{Function<void ()>={unique_ptr<WTF::Function<void ()>::CallableWrapperBase, std::__1::default_delete<WTF::Function<void ()>::CallableWrapperBase> >={__compressed_pair<WTF::Function<void ()>::CallableWrapperBase *, std::__1::default_delete<WTF::Function<void ()>::CallableWrapperBase> >=^{CallableWrapperBase}}}}}{Vector<WebCore::IntRect, 0, WTF::CrashOnOverflow, 16>=^{IntRect}II}fff{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}}, name: _tileCache
    struct CGRect _frozenVisibleRect;
    CALayer *_rootLayer;
    struct CGSize _screenSize;
    struct CGSize _availableScreenSize;
    double _screenScale;
    struct CGRect _frame;
    WAKView *_contentView;
    WAKView *_responderView;
    WAKView *_nextResponder;
    BOOL _visible;
    BOOL _isInSnapshottingPaint;
    BOOL _useOrientationDependentFontAntialiasing;
    BOOL _entireWindowVisibleForTesting;
    // Error parsing type: {Lock="m_byte"{Atomic<unsigned char>="value"{atomic<unsigned char>="__a_"AC}}}, name: _exposedScrollViewRectLock
    struct CGRect _exposedScrollViewRect;
}

+ (id)currentEvent;
+ (BOOL)hasLandscapeOrientation;
+ (void)setOrientationProvider:(id)arg1;
@property(nonatomic) BOOL useOrientationDependentFontAntialiasing; // @synthesize useOrientationDependentFontAntialiasing=_useOrientationDependentFontAntialiasing;
- (id).cxx_construct;
- (id)recursiveDescription;
- (id)description;
- (void)setTileControllerShouldUseLowScaleTiles:(BOOL)arg1;
- (void)dumpTiles;
- (void)setAcceleratedDrawingEnabled:(BOOL)arg1;
- (void)setTilePaintCountsVisible:(BOOL)arg1;
- (void)setTileBordersVisible:(BOOL)arg1;
- (id)hostLayer;
- (void)unfreezeVisibleRect;
- (void)freezeVisibleRect;
- (void)didRotate;
- (void)willRotate;
- (void)displayRect:(struct CGRect)arg1;
@property(nonatomic) struct CGImage *contentReplacementImage;
- (BOOL)hasPendingDraw;
-     // Error parsing type: ^{LegacyTileCache=@{RetainPtr<CGImage *>=^v}{RetainPtr<LegacyTileCacheTombstone>=^v}{Optional<WebCore::FloatRect>=B(constexpr_storage_t<WebCore::FloatRect>=C{FloatRect={FloatPoint=ff}{FloatSize=ff}})}{IntSize=ii}iiBBBBBBBBBB{unique_ptr<WebCore::LegacyTileGrid, std::__1::default_delete<WebCore::LegacyTileGrid> >={__compressed_pair<WebCore::LegacyTileGrid *, std::__1::default_delete<WebCore::LegacyTileGrid> >=^{LegacyTileGrid}}}{unique_ptr<WebCore::LegacyTileGrid, std::__1::default_delete<WebCore::LegacyTileGrid> >={__compressed_pair<WebCore::LegacyTileGrid *, std::__1::default_delete<WebCore::LegacyTileGrid> >=^{LegacyTileGrid}}}{Timer=^^?{MonotonicTime=d}{Seconds=d}B{RefPtr<WebCore::ThreadTimerHeapItem, WTF::DumbPtrTraits<WebCore::ThreadTimerHeapItem> >=^{ThreadTimerHeapItem}}{Ref<WTF::Thread, WTF::DumbPtrTraits<WTF::Thread> >=^{Thread}}{Function<void ()>={unique_ptr<WTF::Function<void ()>::CallableWrapperBase, std::__1::default_delete<WTF::Function<void ()>::CallableWrapperBase> >={__compressed_pair<WTF::Function<void ()>::CallableWrapperBase *, std::__1::default_delete<WTF::Function<void ()>::CallableWrapperBase> >=^{CallableWrapperBase}}}}}{Vector<WebCore::IntRect, 0, WTF::CrashOnOverflow, 16>=^{IntRect}II}fff{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}}16@0:8, name: tileCache
- (BOOL)keepsZoomedOutTiles;
- (void)setKeepsZoomedOutTiles:(BOOL)arg1;
- (float)currentTileScale;
- (void)setCurrentTileScale:(float)arg1;
- (float)zoomedOutTileScale;
- (void)setZoomedOutTileScale:(float)arg1;
- (int)tilingDirection;
- (void)setTilingDirection:(int)arg1;
- (int)tilingMode;
- (void)setTilingMode:(int)arg1;
- (void)removeForegroundTiles;
- (void)removeAllTiles;
- (void)removeAllNonVisibleTiles;
- (struct CGRect)extendedVisibleRect;
- (struct CGRect)visibleRect;
- (struct CGRect)_visibleRectRespectingMasksToBounds:(BOOL)arg1;
- (void)setEntireWindowVisibleForTesting:(BOOL)arg1;
- (BOOL)isInSnapshottingPaint;
- (void)setIsInSnapshottingPaint:(BOOL)arg1;
- (void)setTilesOpaque:(BOOL)arg1;
- (BOOL)tilesOpaque;
- (void)setNeedsDisplayInRect:(struct CGRect)arg1;
- (void)setNeedsDisplay;
- (void)layoutTilesNowForRect:(struct CGRect)arg1;
- (void)layoutTilesNow;
- (void)layoutTiles;
- (struct CGRect)exposedScrollViewRect;
- (void)setExposedScrollViewRect:(struct CGRect)arg1;
- (void)sendMouseMoveEvent:(id)arg1 contentChange:(int *)arg2;
- (void)sendEventSynchronously:(id)arg1;
- (void)sendEvent:(id)arg1;
- (id)rootLayer;
- (void)setRootLayer:(id)arg1;
- (double)screenScale;
- (void)setScreenScale:(double)arg1;
- (struct CGSize)availableScreenSize;
- (void)setAvailableScreenSize:(struct CGSize)arg1;
- (struct CGSize)screenSize;
- (void)setScreenSize:(struct CGSize)arg1;
- (void)setContentRect:(struct CGRect)arg1;
- (struct CGRect)frame;
- (void)setFrame:(struct CGRect)arg1 display:(BOOL)arg2;
- (BOOL)makeFirstResponder:(id)arg1;
- (int)keyViewSelectionDirection;
- (void)setVisible:(BOOL)arg1;
- (BOOL)isVisible;
- (void)makeKeyWindow;
- (BOOL)isKeyWindow;
- (struct CGRect)convertRectFromScreen:(struct CGRect)arg1;
- (struct CGRect)convertRectToScreen:(struct CGRect)arg1;
- (struct CGPoint)convertScreenToBase:(struct CGPoint)arg1;
- (struct CGPoint)convertBaseToScreen:(struct CGPoint)arg1;
- (id)_newFirstResponderAfterResigning;
- (id)firstResponder;
- (void)close;
- (id)contentView;
- (void)setContentView:(id)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)initWithLayer:(id)arg1;

@end

