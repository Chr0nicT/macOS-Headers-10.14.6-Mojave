//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct BGThread {
    id thread;
    struct _opaque_pthread_mutex_t processLock;
    struct _opaque_pthread_mutex_t waitLock;
    struct _opaque_pthread_cond_t condition;
    struct _opaque_pthread_mutex_t quitLock;
    struct IPPhotoInfo *info;
    int state;
    int priority;
};

struct BGThreadParams {
    struct BGThread *bgThread;
    struct _opaque_pthread_mutex_t *listLock;
    struct _opaque_pthread_mutex_t *finishedLock;
    struct BackgroundArray *highPriority;
    struct BackgroundArray *lowPriority;
    struct BackgroundArray *finishArray;
    struct _opaque_pthread_cond_t *communicationCondition;
    struct _opaque_pthread_mutex_t *communicationWaitLock;
};

struct BackgroundArray {
    struct BackgroundImage *_field1;
    struct BackgroundImage *_field2;
    struct __compressed_pair<BackgroundImage *, std::__1::allocator<BackgroundImage>> {
        struct BackgroundImage *_field1;
    } _field3;
};

struct BackgroundImage {
    struct IPPhotoInfo *_field1;
    struct IPFileImage *_field2;
    int _field3;
    struct CGSize _field4;
    int _field5;
    char _field6;
    id _field7;
};

struct CGAffineTransform {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct CGImage;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CLLocationCoordinate2D {
    double _field1;
    double _field2;
};

struct DGSize_st {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct ExternallyEditedPhoto;

struct FFPMRContextImpl {
    id _field1;
    id _field2;
    id _field3;
    id _field4;
};

struct FFPMRInstrument {
    CDUnknownFunctionPointerType *_field1;
    struct __CFString *_field2;
};

struct FFPMRSimpleTimer {
    unsigned long long mStartTime;
    unsigned char mShouldLog;
};

struct FaceNameInfo {
    id _field1;
    id _field2;
    id _field3;
    unsigned long long _field4;
};

struct IPAlbumList {
    struct vector<Album *, std::__1::allocator<Album *>> _field1;
};

struct IPAlbumSelectable {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    int _field3;
    long long _field4;
    id _field5;
    id _field6;
    id _field7;
};

struct IPAlbumState;

struct IPCachedObject;

struct IPFileImage {
    CDUnknownFunctionPointerType *_field1;
    struct CGImage *_field2;
    CDStruct_e321d937 _field3;
    id _field4;
    id _field5;
    id _field6;
    int _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    id _field13;
    struct IPPhotoInfo *_field14;
    int _field15;
    char _field16;
    char _field17;
    char _field18;
    struct CGSize _field19;
    struct CGSize _field20;
    long long _field21;
    unsigned long long _field22;
    struct CGSize _field23;
    id _field24;
    id _field25;
    id _field26;
    id _field27;
    id _field28;
    unsigned int _field29;
    char _field30;
};

struct IPImage {
    CDUnknownFunctionPointerType *_field1;
    struct CGImage *_field2;
    CDStruct_e321d937 _field3;
    id _field4;
    id _field5;
    id _field6;
    int _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    id _field13;
};

struct IPObjectCache {
    CDUnknownFunctionPointerType *_field1;
    long long _field2;
    long long _field3;
    CDUnknownFunctionPointerType _field4;
    void *_field5;
    struct IPCachedObject *_field6;
    struct IPCachedObject *_field7;
    struct map<unsigned int, IPCachedObject *, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, IPCachedObject *>>> _field8;
    struct _opaque_pthread_mutex_t _field9;
};

struct IPPersonSelectable {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct vector<IPPhotoInfo *, std::__1::allocator<IPPhotoInfo *>> _field3;
    struct hash_set<IPPhotoInfo *, IPPhotoInfoPtrHash, std::__1::equal_to<IPPhotoInfo *>, std::__1::allocator<IPPhotoInfo *>> *_field4;
    id _field5;
    char _field6;
    double _field7;
    double _field8;
    unsigned long long _field9;
    int _field10;
    unsigned long long _field11;
    unsigned long long _field12;
    unsigned long long _field13;
    unsigned long long _field14;
    unsigned long long _field15;
    unsigned long long _field16;
    unsigned long long _field17;
    unsigned long long _field18;
    char _field19;
    CDUnknownFunctionPointerType *_field20;
    id _field21;
    int _field22;
    int _field23;
    id _field24;
};

struct IPPhotoInfo {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    int _field3;
    unsigned long long _field4;
    struct IPRoll *_field5;
    struct IPStack *_field6;
    int _field7;
    _Bool _field8;
    id _field9;
    unsigned char _field10;
    struct IPImage *_field11[8];
    unsigned long long _field12;
    char _field13;
    char _field14;
    unsigned long long _field15;
    id _field16;
    id _field17;
    id _field18;
    id _field19;
    int _field20;
    id _field21;
    _Bool _field22;
    char _field23;
    unsigned long long _field24;
    unsigned long long _field25;
    unsigned char _field26;
    unsigned long long _field27;
    id _field28;
    id _field29;
    id _field30;
    int _field31;
    id _field32;
    unsigned short _field33;
    char _field34;
    double _field35;
    double _field36;
    double _field37;
    _Bool _field38;
    struct CGSize _field39;
    struct CGSize _field40;
    double _field41;
    double _field42;
    double _field43;
    double _field44;
    id _field45;
    id _field46;
    _Bool _field47;
    unsigned long long _field48;
    id _field49;
    id _field50;
    unsigned long long _field51;
    unsigned long long _field52;
    unsigned long long _field53;
    id _field54;
    double _field55;
    char _field56;
    char _field57;
    char _field58;
    char _field59;
    char _field60;
    char _field61;
    id _field62;
    id _field63;
    long long _field64;
    char _field65;
    int _field66;
    long long _field67;
    unsigned long long _field68;
    long long _field69;
    double _field70;
    double _field71;
    double _field72;
    id _field73;
    id _field74;
    double _field75;
    id _field76;
    double _field77;
    unsigned long long _field78;
    unsigned long long _field79;
    id _field80;
    id _field81;
    id _field82;
    id _field83;
    id _field84;
    char _field85;
    long long _field86;
    id _field87;
    id _field88;
    long long _field89;
    char _field90;
    char _field91;
    id _field92;
    id _field93;
    id _field94;
    unsigned int _field95;
    char _field96;
    id _field97;
    id _field98;
    unsigned int _field99;
    id _field100;
    id _field101;
    unsigned int _field102;
    char _field103;
    char _field104;
    id _field105;
    id _field106;
    id _field107;
    unsigned int _field108;
    char _field109;
    id _field110;
    int _field111;
    id _field112;
    id _field113;
    char _field114;
    char _field115;
    char _field116;
    char _field117;
    id _field118;
    id _field119;
    long long _field120;
    long long _field121;
};

struct IPPhotoList {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct vector<IPPhotoInfo *, std::__1::allocator<IPPhotoInfo *>> _field3;
    struct hash_set<IPPhotoInfo *, IPPhotoInfoPtrHash, std::__1::equal_to<IPPhotoInfo *>, std::__1::allocator<IPPhotoInfo *>> *_field4;
    id _field5;
    char _field6;
    double _field7;
    double _field8;
    unsigned long long _field9;
    int _field10;
    unsigned long long _field11;
    unsigned long long _field12;
    unsigned long long _field13;
    unsigned long long _field14;
    unsigned long long _field15;
    unsigned long long _field16;
    unsigned long long _field17;
    unsigned long long _field18;
    char _field19;
};

struct IPRoll {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct vector<IPPhotoInfo *, std::__1::allocator<IPPhotoInfo *>> _field3;
    struct hash_set<IPPhotoInfo *, IPPhotoInfoPtrHash, std::__1::equal_to<IPPhotoInfo *>, std::__1::allocator<IPPhotoInfo *>> *_field4;
    id _field5;
    char _field6;
    double _field7;
    double _field8;
    unsigned long long _field9;
    int _field10;
    unsigned long long _field11;
    unsigned long long _field12;
    unsigned long long _field13;
    unsigned long long _field14;
    unsigned long long _field15;
    unsigned long long _field16;
    unsigned long long _field17;
    unsigned long long _field18;
    char _field19;
    CDUnknownFunctionPointerType *_field20;
    id _field21;
    int _field22;
    id _field23;
    unsigned long long _field24;
    unsigned long long _field25;
    unsigned long long _field26;
    id _field27;
    char _field28;
    unsigned long long _field29;
    unsigned long long _field30;
    id _field31;
    long long _field32;
    unsigned long long _field33;
    id _field34;
    id _field35;
    id _field36;
    char _field37;
    id _field38;
    id _field39;
    id _field40;
    char _field41;
};

struct IPSelectable {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    int _field3;
};

struct IPSelectionList {
    CDUnknownFunctionPointerType *_field1;
    struct vector<IPSelectable *, std::__1::allocator<IPSelectable *>> _field2;
    struct set<IPSelectable *, std::__1::less<IPSelectable *>, std::__1::allocator<IPSelectable *>> *_field3;
    struct IPPhotoList *_field4;
    long long _field5;
};

struct IPStack {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct vector<IPPhotoInfo *, std::__1::allocator<IPPhotoInfo *>> _field3;
    struct hash_set<IPPhotoInfo *, IPPhotoInfoPtrHash, std::__1::equal_to<IPPhotoInfo *>, std::__1::allocator<IPPhotoInfo *>> *_field4;
    id _field5;
    char _field6;
    double _field7;
    double _field8;
    unsigned long long _field9;
    int _field10;
    unsigned long long _field11;
    unsigned long long _field12;
    unsigned long long _field13;
    unsigned long long _field14;
    unsigned long long _field15;
    unsigned long long _field16;
    unsigned long long _field17;
    unsigned long long _field18;
    char _field19;
    CDUnknownFunctionPointerType *_field20;
    id _field21;
    int _field22;
    id _field23;
    unsigned long long _field24;
    unsigned long long _field25;
    unsigned long long _field26;
};

struct IPToolTipInfo {
    struct CGRect _rect;
    id _owner;
    void *_userData;
    long long _trackingTag;
};

struct ImportPhoto {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    id _field3;
    id _field4;
    id _field5;
    char _field6;
    struct CGSize _field7;
    id _field8;
    struct CGSize _field9;
    id _field10;
    struct CGSize _field11;
    id _field12;
    struct CGSize _field13;
    char _field14;
    char _field15;
    id _field16;
    long long _field17;
    int _field18;
    id _field19;
    double _field20;
    unsigned long long _field21;
    double _field22;
    id _field23;
    id _field24;
    id _field25;
    id _field26;
    id _field27;
    struct IPPhotoInfo *_field28;
    id _field29;
    unsigned long long _field30;
    char _field31;
    double _field32;
    id _field33;
    id _field34;
    id _field35;
    id _field36;
    id _field37;
    long long _field38;
    char _field39;
    id _field40;
    struct IPPhotoInfo *_field41;
};

struct ImportTask {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    id _field3;
    int _field4;
    _Bool _field5;
    struct _opaque_pthread_t *_field6;
    struct _opaque_pthread_mutex_t _field7;
    struct _opaque_pthread_cond_t _field8;
    struct _opaque_pthread_mutex_t _field9;
    struct _opaque_pthread_cond_t _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    id _field14;
    int _field15;
    struct ImportPhoto *_field16;
    _Bool _field17;
    _Bool _field18;
    _Bool _field19;
    _Bool _field20;
    id _field21;
    _Bool _field22;
    int _field23;
    id _field24;
};

struct KeySet {
    struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<unsigned long>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct MapOfDays {
    struct __tree<std::__1::__value_type<double, long>, std::__1::__map_value_compare<double, std::__1::__value_type<double, long>, std::__1::less<double>, true>, std::__1::allocator<std::__1::__value_type<double, long>>> _field1;
};

struct NSMapTable {
    Class _field1;
};

struct NSObject {
    Class _field1;
};

struct OnscreenArray {
    struct OnscreenRecord *_field1;
    struct OnscreenRecord *_field2;
    struct __compressed_pair<OnscreenRecord *, std::__1::allocator<OnscreenRecord>> {
        struct OnscreenRecord *_field1;
    } _field3;
};

struct OnscreenRecord {
    struct IPPhotoInfo *_field1;
    id _field2;
    id _field3;
    struct IPFileImage *_field4;
    struct CGSize _field5;
    int _field6;
};

struct PhotosCountMap {
    struct __tree<std::__1::__value_type<IPPhotoInfo *, long>, std::__1::__map_value_compare<IPPhotoInfo *, std::__1::__value_type<IPPhotoInfo *, long>, std::__1::less<IPPhotoInfo *>, true>, std::__1::allocator<std::__1::__value_type<IPPhotoInfo *, long>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<IPPhotoInfo *, long>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<IPPhotoInfo *, std::__1::__value_type<IPPhotoInfo *, long>, std::__1::less<IPPhotoInfo *>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct ProcessSerialNumber {
    unsigned int _field1;
    unsigned int _field2;
};

struct ReadAheadTask {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    id _field3;
    int _field4;
    _Bool _field5;
    struct _opaque_pthread_t *_field6;
    struct _opaque_pthread_mutex_t _field7;
    struct _opaque_pthread_cond_t _field8;
    struct _opaque_pthread_mutex_t _field9;
    struct _opaque_pthread_cond_t _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    id _field14;
    int _field15;
    id _field16;
    id _field17;
    id _field18;
    id _field19;
    _Bool _field20;
    struct _opaque_pthread_mutex_t _field21;
    struct _opaque_pthread_cond_t _field22;
};

struct RenderCache {
    struct vector<unsigned long, std::__1::allocator<unsigned long>> _field1;
    struct unordered_map<unsigned long, RenderCacheEntry, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, RenderCacheEntry>>> _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    id _field6;
};

struct RowBreakInfo;

struct SetOfDays {
    struct __tree<double, std::__1::less<double>, std::__1::allocator<double>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<double, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<double>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct SlideThumb {
    struct IPPhotoInfo *_field1;
    struct CGRect _field2;
    char _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct Task;

struct TempImageEntry;

struct Thumb {
    void *_field1;
    struct IPPhotoInfo *_field2;
    struct CGRect _field3;
    struct CGRect _field4;
    double _field5;
    double _field6;
    double _field7;
    unsigned long long _field8;
    int _field9;
    int _field10;
};

struct ThumbArray {
    struct Thumb *_field1;
    struct Thumb *_field2;
    struct __compressed_pair<Thumb *, std::__1::allocator<Thumb>> {
        struct Thumb *_field1;
    } _field3;
};

struct ThumbData;

struct ThumbDataArray {
    struct ThumbData *_field1;
    struct ThumbData *_field2;
    struct __compressed_pair<ThumbData *, std::__1::allocator<ThumbData>> {
        struct ThumbData *_field1;
    } _field3;
};

struct WriteTask {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    id _field3;
    int _field4;
    _Bool _field5;
    struct _opaque_pthread_t *_field6;
    struct _opaque_pthread_mutex_t _field7;
    struct _opaque_pthread_cond_t _field8;
    struct _opaque_pthread_mutex_t _field9;
    struct _opaque_pthread_cond_t _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    id _field14;
    int _field15;
    id _field16;
    id _field17;
    id _field18;
    id _field19;
    char _field20;
    int _field21;
    long long _field22;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, RenderCacheEntry>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, RenderCacheEntry>, void *>*> *_field1;
};

struct __list_node_base<NSDate *, void *> {
    struct __list_node_base<NSDate *, void *> *_field1;
    struct __list_node_base<NSDate *, void *> *_field2;
};

struct __list_node_base<double, void *> {
    struct __list_node_base<double, void *> *_field1;
    struct __list_node_base<double, void *> *_field2;
};

struct __list_node_base<unsigned long long, void *> {
    struct __list_node_base<unsigned long long, void *> *_field1;
    struct __list_node_base<unsigned long long, void *> *_field2;
};

struct __sbuf {
    char *_field1;
    int _field2;
};

struct __tree<std::__1::__value_type<double, long>, std::__1::__map_value_compare<double, std::__1::__value_type<double, long>, std::__1::less<double>, true>, std::__1::allocator<std::__1::__value_type<double, long>>> {
    struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
    struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<double, long>, void *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
    } _field2;
    struct __compressed_pair<unsigned long, std::__1::__map_value_compare<double, std::__1::__value_type<double, long>, std::__1::less<double>, true>> {
        unsigned long long _field1;
    } _field3;
};

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *_field1;
};

struct __va_list_tag {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
    void *_field4;
};

struct _opaque_pthread_cond_t {
    long long __sig;
    char __opaque[40];
};

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct _opaque_pthread_t {
    long long _field1;
    struct __darwin_pthread_handler_rec *_field2;
    char _field3[8176];
};

struct hash_set<IPPhotoInfo *, IPPhotoInfoPtrHash, std::__1::equal_to<IPPhotoInfo *>, std::__1::allocator<IPPhotoInfo *>>;

struct list<NSDate *, std::__1::allocator<NSDate *>> {
    struct __list_node_base<NSDate *, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<NSDate *, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<double, std::__1::allocator<double>> {
    struct __list_node_base<double, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<double, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<unsigned long long, std::__1::allocator<unsigned long long>> {
    struct __list_node_base<unsigned long long, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned long long, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct map<ImportTask *, ImportTask *, std::__1::less<ImportTask *>, std::__1::allocator<std::__1::pair<ImportTask *const, ImportTask *>>> {
    struct __tree<std::__1::__value_type<ImportTask *, ImportTask *>, std::__1::__map_value_compare<ImportTask *, std::__1::__value_type<ImportTask *, ImportTask *>, std::__1::less<ImportTask *>, true>, std::__1::allocator<std::__1::__value_type<ImportTask *, ImportTask *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<ImportTask *, ImportTask *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<ImportTask *, std::__1::__value_type<ImportTask *, ImportTask *>, std::__1::less<ImportTask *>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<NSString *, NSString *, MyCompare, std::__1::allocator<std::__1::pair<NSString *const, NSString *>>> {
    struct __tree<std::__1::__value_type<NSString *, NSString *>, std::__1::__map_value_compare<NSString *, std::__1::__value_type<NSString *, NSString *>, MyCompare, true>, std::__1::allocator<std::__1::__value_type<NSString *, NSString *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<NSString *, NSString *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<NSString *, std::__1::__value_type<NSString *, NSString *>, MyCompare, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<double, long, std::__1::less<double>, std::__1::allocator<std::__1::pair<const double, long>>> {
    struct __tree<std::__1::__value_type<double, long>, std::__1::__map_value_compare<double, std::__1::__value_type<double, long>, std::__1::less<double>, true>, std::__1::allocator<std::__1::__value_type<double, long>>> _field1;
};

struct map<long, CGSize, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, CGSize>>> {
    struct __tree<std::__1::__value_type<long, CGSize>, std::__1::__map_value_compare<long, std::__1::__value_type<long, CGSize>, std::__1::less<long>, true>, std::__1::allocator<std::__1::__value_type<long, CGSize>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long, CGSize>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<long, std::__1::__value_type<long, CGSize>, std::__1::less<long>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<long, id, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id>>> {
    struct __tree<std::__1::__value_type<long, id>, std::__1::__map_value_compare<long, std::__1::__value_type<long, id>, std::__1::less<long>, true>, std::__1::allocator<std::__1::__value_type<long, id>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long, id>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<long, std::__1::__value_type<long, id>, std::__1::less<long>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<long, long, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, long>>> {
    struct __tree<std::__1::__value_type<long, long>, std::__1::__map_value_compare<long, std::__1::__value_type<long, long>, std::__1::less<long>, true>, std::__1::allocator<std::__1::__value_type<long, long>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long, long>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<long, std::__1::__value_type<long, long>, std::__1::less<long>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned int, IPCachedObject *, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, IPCachedObject *>>> {
    struct __tree<std::__1::__value_type<unsigned int, IPCachedObject *>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, IPCachedObject *>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, IPCachedObject *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, IPCachedObject *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, IPCachedObject *>, std::__1::less<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned int, unsigned long long, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long long>>> {
    struct __tree<std::__1::__value_type<unsigned int, unsigned long long>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned long long>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned long long>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned long long>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned long long>, std::__1::less<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned long long, unsigned int, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned int>>> {
    struct __tree<std::__1::__value_type<unsigned long long, unsigned int>, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, unsigned int>, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, unsigned int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, unsigned int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, unsigned int>, std::__1::less<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned long, RollCachePhotoEntry, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, RollCachePhotoEntry>>> {
    struct __tree<std::__1::__value_type<unsigned long, RollCachePhotoEntry>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, RollCachePhotoEntry>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, RollCachePhotoEntry>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, RollCachePhotoEntry>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, RollCachePhotoEntry>, std::__1::less<unsigned long>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned long, RollInfoCacheRecord, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, RollInfoCacheRecord>>> {
    struct __tree<std::__1::__value_type<unsigned long, RollInfoCacheRecord>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, RollInfoCacheRecord>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, RollInfoCacheRecord>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, RollInfoCacheRecord>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, RollInfoCacheRecord>, std::__1::less<unsigned long>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned long, long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, long>>> {
    struct __tree<std::__1::__value_type<unsigned long, long>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, long>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, long>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, long>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, long>, std::__1::less<unsigned long>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long>>> {
    struct __tree<std::__1::__value_type<unsigned long, unsigned long>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, unsigned long>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, unsigned long>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, unsigned long>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, unsigned long>, std::__1::less<unsigned long>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<Album *, std::__1::less<Album *>, std::__1::allocator<Album *>> {
    struct __tree<Album *, std::__1::less<Album *>, std::__1::allocator<Album *>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<Album *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<Album *>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<IPPhotoInfo *, std::__1::less<IPPhotoInfo *>, std::__1::allocator<IPPhotoInfo *>> {
    struct __tree<IPPhotoInfo *, std::__1::less<IPPhotoInfo *>, std::__1::allocator<IPPhotoInfo *>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<IPPhotoInfo *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<IPPhotoInfo *>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<IPSelectable *, std::__1::less<IPSelectable *>, std::__1::allocator<IPSelectable *>>;

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, RenderCacheEntry>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, RenderCacheEntry>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, RenderCacheEntry>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, RenderCacheEntry>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, RenderCacheEntry>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, RenderCacheEntry>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, RenderCacheEntry>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unordered_map<unsigned long, RenderCacheEntry, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, RenderCacheEntry>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long, RenderCacheEntry>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, RenderCacheEntry>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, RenderCacheEntry>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, RenderCacheEntry>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, RenderCacheEntry>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, RenderCacheEntry>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, RenderCacheEntry>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, RenderCacheEntry>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, RenderCacheEntry>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, RenderCacheEntry>, std::__1::hash<unsigned long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, RenderCacheEntry>, std::__1::equal_to<unsigned long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct vector<Album *, std::__1::allocator<Album *>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<Album **, std::__1::allocator<Album *>> {
        id *_field1;
    } _field3;
};

struct vector<DetectedFaceState, std::__1::allocator<DetectedFaceState>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<DetectedFaceState *, std::__1::allocator<DetectedFaceState>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<ExternallyEditedPhoto, std::__1::allocator<ExternallyEditedPhoto>> {
    struct ExternallyEditedPhoto *_field1;
    struct ExternallyEditedPhoto *_field2;
    struct __compressed_pair<ExternallyEditedPhoto *, std::__1::allocator<ExternallyEditedPhoto>> {
        struct ExternallyEditedPhoto *_field1;
    } _field3;
};

struct vector<FaceCorrelationState, std::__1::allocator<FaceCorrelationState>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<FaceCorrelationState *, std::__1::allocator<FaceCorrelationState>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<FaceExternalState, std::__1::allocator<FaceExternalState>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<FaceExternalState *, std::__1::allocator<FaceExternalState>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<FaceFeatureState, std::__1::allocator<FaceFeatureState>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<FaceFeatureState *, std::__1::allocator<FaceFeatureState>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<IPAlbumState *, std::__1::allocator<IPAlbumState *>> {
    struct IPAlbumState **_field1;
    struct IPAlbumState **_field2;
    struct __compressed_pair<IPAlbumState **, std::__1::allocator<IPAlbumState *>> {
        struct IPAlbumState **_field1;
    } _field3;
};

struct vector<IPAnimationObject, std::__1::allocator<IPAnimationObject>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<IPAnimationObject *, std::__1::allocator<IPAnimationObject>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<IPFaceIdentifier, std::__1::allocator<IPFaceIdentifier>>;

struct vector<IPPersonInfo, std::__1::allocator<IPPersonInfo>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<IPPersonInfo *, std::__1::allocator<IPPersonInfo>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<IPPhotoInfo *, std::__1::allocator<IPPhotoInfo *>> {
    struct IPPhotoInfo **_field1;
    struct IPPhotoInfo **_field2;
    struct __compressed_pair<IPPhotoInfo **, std::__1::allocator<IPPhotoInfo *>> {
        struct IPPhotoInfo **_field1;
    } _field3;
};

struct vector<IPRoll *, std::__1::allocator<IPRoll *>> {
    struct IPRoll **_field1;
    struct IPRoll **_field2;
    struct __compressed_pair<IPRoll **, std::__1::allocator<IPRoll *>> {
        struct IPRoll **_field1;
    } _field3;
};

struct vector<IPSelectable *, std::__1::allocator<IPSelectable *>> {
    struct IPSelectable **_field1;
    struct IPSelectable **_field2;
    struct __compressed_pair<IPSelectable **, std::__1::allocator<IPSelectable *>> {
        struct IPSelectable **_field1;
    } _field3;
};

struct vector<IQEntry, std::__1::allocator<IQEntry>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<IQEntry *, std::__1::allocator<IQEntry>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<ImportPhoto *, std::__1::allocator<ImportPhoto *>> {
    struct ImportPhoto **_field1;
    struct ImportPhoto **_field2;
    struct __compressed_pair<ImportPhoto **, std::__1::allocator<ImportPhoto *>> {
        struct ImportPhoto **_field1;
    } _field3;
};

struct vector<ImportRoll *, std::__1::allocator<ImportRoll *>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<ImportRoll **, std::__1::allocator<ImportRoll *>> {
        id *_field1;
    } _field3;
};

struct vector<MeasurementRecord, std::__1::allocator<MeasurementRecord>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<MeasurementRecord *, std::__1::allocator<MeasurementRecord>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<ReportRecord, std::__1::allocator<ReportRecord>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<ReportRecord *, std::__1::allocator<ReportRecord>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<RowBreakInfo, std::__1::allocator<RowBreakInfo>> {
    struct RowBreakInfo *_field1;
    struct RowBreakInfo *_field2;
    struct __compressed_pair<RowBreakInfo *, std::__1::allocator<RowBreakInfo>> {
        struct RowBreakInfo *_field1;
    } _field3;
};

struct vector<SlideThumb, std::__1::allocator<SlideThumb>> {
    struct SlideThumb *_field1;
    struct SlideThumb *_field2;
    struct __compressed_pair<SlideThumb *, std::__1::allocator<SlideThumb>> {
        struct SlideThumb *_field1;
    } _field3;
};

struct vector<Task *, std::__1::allocator<Task *>> {
    struct Task **_field1;
    struct Task **_field2;
    struct __compressed_pair<Task **, std::__1::allocator<Task *>> {
        struct Task **_field1;
    } _field3;
};

struct vector<TempImageEntry, std::__1::allocator<TempImageEntry>> {
    struct TempImageEntry *_field1;
    struct TempImageEntry *_field2;
    struct __compressed_pair<TempImageEntry *, std::__1::allocator<TempImageEntry>> {
        struct TempImageEntry *_field1;
    } _field3;
};

struct vector<int, std::__1::allocator<int>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<int *, std::__1::allocator<int>> {
        int *_field1;
    } _field3;
};

struct vector<long, std::__1::allocator<long>> {
    long long *_field1;
    long long *_field2;
    struct __compressed_pair<long *, std::__1::allocator<long>> {
        long long *_field1;
    } _field3;
};

struct vector<unsigned int, std::__1::allocator<unsigned int>> {
    unsigned int *_field1;
    unsigned int *_field2;
    struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int>> {
        unsigned int *_field1;
    } _field3;
};

struct vector<unsigned long, std::__1::allocator<unsigned long>> {
    unsigned long long *_field1;
    unsigned long long *_field2;
    struct __compressed_pair<unsigned long *, std::__1::allocator<unsigned long>> {
        unsigned long long *_field1;
    } _field3;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
    id _field3;
    char _field4;
    char _field5;
    char _field6;
} CDStruct_ba67eed2;

typedef struct {
    unsigned long long count;
    unsigned long long photoCount;
    unsigned long long hiddenPhotoCount;
    unsigned long long movieCount;
    unsigned long long hiddenMovieCount;
    unsigned long long readOnlyCount;
    unsigned long long trashCount;
    unsigned long long doNotShowInLibraryCount;
    unsigned long long totalBytes;
} CDStruct_283dfa7c;

typedef struct {
    unsigned long long _field1;
    long long _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    id _field14;
    double _field15;
    double _field16;
    id _field17;
    long long _field18;
    long long _field19;
    long long _field20;
    long long _field21;
    double _field22;
    long long _field23;
    double _field24;
    double _field25;
    long long _field26;
    long long _field27;
    id _field28;
} CDStruct_9cfe5aca;

typedef struct {
    unsigned long long _field1;
    long long _field2;
    long long _field3;
    double _field4;
    double _field5;
    double _field6;
} CDStruct_f601cb6a;

typedef struct {
    unsigned long long _field1;
    long long _field2;
    long long _field3;
} CDStruct_efb988e1;

typedef struct {
    long long _field1;
    id _field2;
    id _field3;
} CDStruct_1b4a36b4;

typedef struct {
    long long timeValue;
    long long timeScale;
    long long flags;
} CDStruct_900afa40;

typedef struct CDStruct_183601bc;

typedef struct {
    struct CGImage *_field1;
    void *_field2;
    long long _field3;
    struct CGSize _field4;
    double _field5;
    unsigned int _field6;
} CDStruct_e321d937;

typedef struct {
    int _field1;
    unsigned long long _field2;
    id _field3;
    id _field4;
    id _field5;
    struct vector<IPFaceIdentifier, std::__1::allocator<IPFaceIdentifier>> *_field6;
    long long _field7;
} CDStruct_39edc211;

typedef struct {
    struct {
        double x;
        double y;
    } origin;
    struct {
        double width;
        double height;
    } size;
} CDStruct_02837cd9;

typedef struct {
    CDStruct_900afa40 time;
    CDStruct_900afa40 duration;
} CDStruct_977f9211;

typedef struct {
    id _field1;
    int _field2;
    int _field3;
    char _field4;
    struct CGRect _field5;
} CDStruct_fb816f7b;

// Ambiguous groups
typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct map<NSString *, NSString *, MyCompare, std::__1::allocator<std::__1::pair<NSString *const, NSString *>>> {
    struct __tree<std::__1::__value_type<NSString *, NSString *>, std::__1::__map_value_compare<NSString *, std::__1::__value_type<NSString *, NSString *>, MyCompare, true>, std::__1::allocator<std::__1::__value_type<NSString *, NSString *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<NSString *, NSString *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<NSString *, std::__1::__value_type<NSString *, NSString *>, MyCompare, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
} map_85022853;

typedef struct map<double, long, std::__1::less<double>, std::__1::allocator<std::__1::pair<const double, long>>> {
    struct __tree<std::__1::__value_type<double, long>, std::__1::__map_value_compare<double, std::__1::__value_type<double, long>, std::__1::less<double>, true>, std::__1::allocator<std::__1::__value_type<double, long>>> _field1;
} map_1b45d07f;

typedef struct map<long, long, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, long>>> {
    struct __tree<std::__1::__value_type<long, long>, std::__1::__map_value_compare<long, std::__1::__value_type<long, long>, std::__1::less<long>, true>, std::__1::allocator<std::__1::__value_type<long, long>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long, long>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<long, std::__1::__value_type<long, long>, std::__1::less<long>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
} map_9fc55045;

typedef struct map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long>>> {
    struct __tree<std::__1::__value_type<unsigned long, unsigned long>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, unsigned long>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, unsigned long>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, unsigned long>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, unsigned long>, std::__1::less<unsigned long>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
} map_d3401061;

typedef struct vector<ExternallyEditedPhoto, std::__1::allocator<ExternallyEditedPhoto>> {
    struct ExternallyEditedPhoto *_field1;
    struct ExternallyEditedPhoto *_field2;
    struct __compressed_pair<ExternallyEditedPhoto *, std::__1::allocator<ExternallyEditedPhoto>> {
        struct ExternallyEditedPhoto *_field1;
    } _field3;
} vector_2dec9dc0;

typedef struct vector<IPRoll *, std::__1::allocator<IPRoll *>> {
    struct IPRoll **_field1;
    struct IPRoll **_field2;
    struct __compressed_pair<IPRoll **, std::__1::allocator<IPRoll *>> {
        struct IPRoll **_field1;
    } _field3;
} vector_5dbb424c;

typedef struct vector<int, std::__1::allocator<int>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<int *, std::__1::allocator<int>> {
        int *_field1;
    } _field3;
} vector_3203cf93;

typedef struct vector<long, std::__1::allocator<long>> {
    long long *_field1;
    long long *_field2;
    struct __compressed_pair<long *, std::__1::allocator<long>> {
        long long *_field1;
    } _field3;
} vector_4b7ceedc;

typedef struct vector<unsigned int, std::__1::allocator<unsigned int>> {
    unsigned int *_field1;
    unsigned int *_field2;
    struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int>> {
        unsigned int *_field1;
    } _field3;
} vector_f672cb0f;

