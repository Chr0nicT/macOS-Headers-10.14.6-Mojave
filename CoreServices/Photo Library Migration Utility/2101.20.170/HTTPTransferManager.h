//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <Cocoa/NSObject.h>

@class NSError, NSMutableData, NSString, NSURL, NSURLConnection, NSURLCredential, NSURLProtectionSpace;
@protocol HTTPTransferManagerDelegate;

@interface HTTPTransferManager : NSObject
{
    NSURL *m_URL;
    NSString *m_user;
    NSString *m_password;
    NSString *m_lastModifiedDate;
    BOOL m_notModified;
    NSString *m_lockToken;
    id <HTTPTransferManagerDelegate> m_delegate;
    NSObject *m_context;
    NSURLConnection *m_connection;
    NSMutableData *m_responseData;
    NSError *m_error;
    int _request;
    unsigned long long _attemptNumber;
    BOOL _authenticationFailure;
    NSURLProtectionSpace *_protectionSpace;
    NSURLCredential *_credential;
    unsigned long long _expectedContentLength;
    double _completed;
}

+ (BOOL)removeLockTokenWithPath:(id)arg1;
+ (BOOL)saveLockToken:(id)arg1 withPath:(id)arg2 timeout:(unsigned long long)arg3 created:(char *)arg4;
+ (id)lockTokenWithPath:(id)arg1;
+ (id)DAVLockEntryWithPath:(id)arg1;
+ (BOOL)removePasswordWithURL:(id)arg1 user:(id)arg2 realm:(id)arg3 authenticationMethod:(id)arg4;
+ (id)storedPasswordWithURL:(id)arg1 user:(id)arg2 realm:(id)arg3 authenticationMethod:(id)arg4;
+ (void)storePassword:(id)arg1 withURL:(id)arg2 user:(id)arg3 realm:(id)arg4 authenticationMethod:(id)arg5;
+ (void)initialize;
@property(readonly, nonatomic) double completed; // @synthesize completed=_completed;
@property(readonly, nonatomic) NSURLCredential *credential; // @synthesize credential=_credential;
@property(readonly, nonatomic) NSURLProtectionSpace *protectionSpace; // @synthesize protectionSpace=_protectionSpace;
@property(retain, nonatomic) NSError *error; // @synthesize error=m_error;
@property(retain, nonatomic) NSMutableData *responseData; // @synthesize responseData=m_responseData;
@property(retain, nonatomic) NSURLConnection *connection; // @synthesize connection=m_connection;
@property(retain, nonatomic) NSObject *context; // @synthesize context=m_context;
@property(nonatomic) id <HTTPTransferManagerDelegate> delegate; // @synthesize delegate=m_delegate;
@property(retain, nonatomic) NSString *lockToken; // @synthesize lockToken=m_lockToken;
@property(nonatomic) BOOL notModified; // @synthesize notModified=m_notModified;
@property(retain, nonatomic) NSString *lastModifiedDate; // @synthesize lastModifiedDate=m_lastModifiedDate;
@property(retain, nonatomic) NSString *password; // @synthesize password=m_password;
@property(retain, nonatomic) NSString *user; // @synthesize user=m_user;
@property(retain, nonatomic) NSURL *URL; // @synthesize URL=m_URL;
- (BOOL)createDirectoryAtURL;
- (BOOL)unlockItemAtURL;
- (BOOL)lockItemAtURLWithTimeout:(unsigned long long)arg1;
- (BOOL)deleteItemAtURL;
- (BOOL)writeWithData:(id)arg1;
- (BOOL)readWithData:(id *)arg1 ignoreErrorIfNoContent:(BOOL)arg2;
- (BOOL)readWithData:(id *)arg1;
- (BOOL)itemExistsAtURL;
- (id)initWithBaseURL:(id)arg1 fileName:(id)arg2 user:(id)arg3 password:(id)arg4 delegate:(id)arg5;
- (id)initWithURL:(id)arg1 user:(id)arg2 password:(id)arg3 delegate:(id)arg4;
- (id)initWithURL:(id)arg1 delegate:(id)arg2;
- (id)initWithURL:(id)arg1 delegate:(id)arg2 context:(id)arg3;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (id)connection:(id)arg1 willCacheResponse:(id)arg2;
- (id)connection:(id)arg1 willSendRequest:(id)arg2 redirectResponse:(id)arg3;
- (void)connection:(id)arg1 didCancelAuthenticationChallenge:(id)arg2;
- (void)connection:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (BOOL)connectionShouldUseCredentialStorage:(id)arg1;
- (BOOL)connection:(id)arg1 canAuthenticateAgainstProtectionSpace:(id)arg2;
- (id)description;
- (void)dealloc;
- (id)_checkLockTokenWithPath:(id)arg1;
- (void)_releasePreviousAuthenticationContext;
- (id)_valueForCaseInsensitiveKey:(id)arg1 inDictionary:(id)arg2;
- (id)_stringFromHTTPTMRequest:(int)arg1;
- (BOOL)_needRetryWithError:(id)arg1;
- (void)_endNetworkActivity;
- (void)_beginNetworkActivity;

@end

