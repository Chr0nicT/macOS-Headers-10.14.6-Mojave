//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "LWAuthServiceManagerScreenLockDelegate-Protocol.h"
#import "LWAuthServiceStateDelegate-Protocol.h"
#import "LWDefaultScreenLockUIDelegate-Protocol.h"

@class LWAuthServiceState, LWDefaultScreenLockUI, NSString;
@protocol OS_dispatch_queue, OS_dispatch_semaphore;

@interface LWScreenLock : NSObject <LWDefaultScreenLockUIDelegate, LWAuthServiceManagerScreenLockDelegate, LWAuthServiceStateDelegate>
{
    BOOL _userSwitchedOut;
    BOOL _screenIsLocked;
    BOOL _screenLockImmediateIsActive;
    int _preferredScreenLockDelay;
    BOOL _wakeForIncomingMessage;
    BOOL _lockRequestInProgress;
    BOOL _unlockInProgress;
    BOOL _lockUIPresentedWithoutSuccessfulUnlock;
    int _lockReqestedBy;
    NSString *_askForPasswordPrompt;
    double _startLockTime;
    NSObject<OS_dispatch_queue> *_lockSerialQueue;
    NSObject<OS_dispatch_semaphore> *_enqueueSemaphore;
    LWDefaultScreenLockUI *_screenlockUI;
    long long _hotKeyRefCount;
    long long _permittedFrontRefCount;
    long long _setScreenLockedNotificationCount;
    BOOL _useDefaultScreenLockUI;
    BOOL _immediateLockStartsAutoUnlock;
    LWAuthServiceState *_authState;
}

+ (id)sharedScreenLock;
@property BOOL immediateLockStartsAutoUnlock; // @synthesize immediateLockStartsAutoUnlock=_immediateLockStartsAutoUnlock;
@property(retain) LWAuthServiceState *authState; // @synthesize authState=_authState;
@property(readonly) BOOL useDefaultScreenLockUI; // @synthesize useDefaultScreenLockUI=_useDefaultScreenLockUI;
- (void)sendScreenUnlockedNotification;
- (void)sendScreenLockedNotification;
- (void)disableHotKeys;
- (void)enableHotKeys;
- (void)setLoginWindowAsOnlyFrontmostApp:(BOOL)arg1;
- (void)setPermittedFrontList;
- (void)setCGScreenUnlocked;
- (void)setCGScreenLocked;
- (void)userActivityChanged:(BOOL)arg1;
@property(readonly) BOOL shieldWindowShowing;
- (unsigned int)shieldWindowID;
@property BOOL userSwitchedOut;
@property(readonly) BOOL lockEnabled;
@property(readonly) int screenLockDefaultDelay;
- (void)setScreenLockDefaultDelay:(int)arg1;
- (void)readAskForPasswordSettings;
- (BOOL)readUseDefaultScreenLockUI;
- (id)systemScreenSaverAuthDict;
- (void)_warmupAdminCanUnlockAdmin;
- (void)warmup;
- (void)resetAfterDarkwake;
- (void)_checkAuthWithContinuityHints:(id)arg1 localAuthenticationHints:(id)arg2 username:(id)arg3 password:(id)arg4 user:(id)arg5 completionBlock:(CDUnknownBlockType)arg6;
- (void)askForPasswordUsingSecurityAgentOnThread;
- (void)closeAuthAfterFUSIfNeeded;
- (void)cancel;
@property(readonly) BOOL lockUIIsOnScreen;
- (void)setFaceTimeCallIsRinging:(BOOL)arg1;
@property(readonly) BOOL screenIsLocked;
- (void)setScreenIsLocked:(BOOL)arg1;
- (void)lockScreenImmediateWithFadeToLockUI;
- (void)fadeToLockUI;
- (void)lockScreenImmediateUsingShortTimeout:(BOOL)arg1;
- (void)lockScreenImmediate;
- (void)shouldShowTextField:(BOOL)arg1 withMessage:(id)arg2 showingSpinner:(BOOL)arg3 withDelay:(double)arg4;
- (void)authFailWithMessage:(id)arg1;
- (void)hidePasswordField;
- (void)showPasswordField;
- (void)setSmartcardHints:(id)arg1;
- (void)checkAuthWithLocalAuthenticationHints:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)checkAuthWithContinuityHints:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)startUnlockForActiveUser;
- (void)handleUnlockResult:(id)arg1;
- (void)passwordFieldKeyPressed;
- (void)checkAuthWithUsername:(id)arg1 password:(id)arg2 user:(id)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)enqueueUnlockScreenRequestedBy:(int)arg1;
- (void)_bumpScreenLock:(int)arg1;
- (void)enqueueLockScreenRequestedBy:(int)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)enqueueLockScreenRequestedBy:(int)arg1;
- (void)dealloc;
- (id)init;
- (int)askForPasswordSecAgent;
- (char *)stringValueForItem:(const char *)arg1 fromItemSet:(CDStruct_166d2db6 *)arg2;
- (void)startUnlock:(int)arg1;
- (BOOL)unlockFromEFI;
- (BOOL)userIsActiveCheck;
- (void)startScreenLock:(int)arg1;

@end

