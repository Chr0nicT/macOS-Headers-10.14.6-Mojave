//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <AppKit/NSAccessibility-Protocol.h>
#import <AppKit/NSAccessibilityElement-Protocol.h>
#import <AppKit/NSCoding-Protocol.h>
#import <AppKit/NSCopying-Protocol.h>
#import <AppKit/NSImmediateActionAnimationController-Protocol.h>
#import <AppKit/NSMenuItem-Protocol.h>
#import <AppKit/NSUserInterfaceItemIdentification-Protocol.h>
#import <AppKit/NSValidatedUserInterfaceItem-Protocol.h>

@class NSArray, NSAttributedString, NSImage, NSMenu, NSString, NSURL, NSView;

@interface NSMenuItem : NSObject <NSImmediateActionAnimationController, NSMenuItem, NSCopying, NSCoding, NSValidatedUserInterfaceItem, NSUserInterfaceItemIdentification, NSAccessibilityElement, NSAccessibility>
{
    NSMenu *_menu;
    NSString *_title;
    NSString *_keyEquivalent;
    NSString *_uiid;
    id _repObject;
    NSMenu *_submenu;
    id _extraData;
    id _target;
    SEL _action;
    long long _tag;
    unsigned char _keyEquivalentModifierMask;
    struct __miFlags {
        unsigned int keGenerationCount:8;
        unsigned int disabled:1;
        unsigned int isSeparator:1;
        unsigned int hidden:1;
        unsigned int alternate:1;
        unsigned int moreAlternate:1;
        unsigned int singleAlternate:1;
        unsigned int indent:4;
        unsigned int keShareMode:3;
        unsigned int state:2;
        unsigned int destructive:1;
        unsigned int RESERVED1:1;
        unsigned int limitedView:1;
        unsigned int nextItemIsAlternate:1;
        unsigned int blockKE:1;
        unsigned int ignoredForAccessibility:1;
        unsigned int hiddenActiveKE:1;
        unsigned int noRepeatKEs:1;
        unsigned int targetWeak:1;
    } _miFlags;
}

+ (struct __CFString *)_menuItemViewerHIViewClassName;
+ (BOOL)_hasTitlePathBasedUserKeyEquivalent;
+ (void)_updateUserKEsAfterActivation:(id)arg1;
+ (id)standardQuickLookMenuItem;
+ (id)standardShareMenuItemWithItems:(id)arg1;
+ (id)standardShareMenuItemForItems:(id)arg1;
+ (id)standardDeleteMenuItem;
+ (id)standardPasteMenuItem;
+ (id)standardCopyMenuItem;
+ (id)separatorItem;
+ (BOOL)usesUserKeyEquivalents;
+ (void)setUsesUserKeyEquivalents:(BOOL)arg1;
+ (void)initialize;
+ (id)_defaultWindowMenuStateImageDirtyWindow;
+ (id)_defaultWindowMenuStateImageKeyWindow;
+ (id)_defaultWindowMenuStateImageMinimizedWindow;
+ (id)standardImportFromDeviceMenuItem;
+ (id)_sidecarServicesMenuItemWithTarget:(id)arg1 action:(SEL)arg2 options:(unsigned long long)arg3;
+ (id)_sidecarServicesMenuItemWithOptions:(unsigned long long)arg1;
+ (id)_menuItemForItem:(id)arg1 view:(id)arg2 itemFrame:(struct CGRect)arg3 aimFrame:(struct CGRect)arg4 options:(id)arg5;
+ (void)_dispatchActionBlockFor:(id)arg1;
+ (id)_menuItemWithTitle:(id)arg1 handler:(CDUnknownBlockType)arg2;
@property(copy) NSString *identifier;
- (void)setUserInterfaceItemIdentifier:(id)arg1;
- (id)userInterfaceItemIdentifier;
- (id)_bindingAdaptor;
- (void)_setBindingAdaptor:(id)arg1;
- (BOOL)_requiresModifiersToBeVisible;
- (void)_setRequiresModifiersToBeVisible:(BOOL)arg1;
- (BOOL)_isAlternateDespiteNonmatchingModifiers;
- (void)_setIsAlternateDespiteNonmatchingModifiers:(BOOL)arg1;
- (BOOL)_respectsKeyEquivalentForRepeatKeys;
- (void)_setRespectsKeyEquivalentForRepeatKeys:(BOOL)arg1;
- (BOOL)_respectsKeyEquivalentWhileHidden;
- (void)_setRespectsKeyEquivalentWhileHidden:(BOOL)arg1;
- (void)_setIgnoredForAccessibility:(BOOL)arg1;
- (BOOL)_ignoredForAccessibility;
- (id)_startingWindowForSendAction:(SEL)arg1;
- (id)_menuItemViewer;
@property(retain) NSView *view;
- (BOOL)_viewHandlesEvents;
- (void)_setViewHandlesEvents:(BOOL)arg1;
- (void)_setViewNeedsDisplayInRect:(struct CGRect)arg1;
- (long long)_changedFlags;
- (void)_setChangedFlags:(long long)arg1;
- (BOOL)_isHelpMenuAppKitOnly;
- (BOOL)_isHelpMenu;
@property(copy) NSString *toolTip;
@property(retain) id representedObject;
@property long long tag;
@property SEL action;
@property __weak id target;
@property long long indentationLevel;
- (void)_setNextItemIsAlternate:(BOOL)arg1;
- (BOOL)_nextItemIsAlternate;
- (BOOL)isDestructive;
- (void)setDestructive:(BOOL)arg1;
@property(getter=isAlternate) BOOL alternate;
- (BOOL)_isEnabled;
@property(readonly, getter=isHighlighted) BOOL highlighted;
- (BOOL)_canBeHighlighted;
@property(getter=isEnabled) BOOL enabled;
@property(retain) NSImage *mixedStateImage;
@property(retain) NSImage *offStateImage;
@property(retain) NSImage *onStateImage;
@property long long state;
- (long long)_currentStateImageEnumeration;
- (id)_imageForState:(long long)arg1;
- (void)_setIconRef:(struct OpaqueIconRef *)arg1;
- (struct OpaqueIconRef *)_iconRef;
- (struct CGSize)_imageSize;
- (void)_setImageSize:(struct CGSize)arg1;
@property(retain) NSImage *image;
- (void)setTitleWithMnemonic:(id)arg1;
- (id)mnemonic;
- (unsigned long long)mnemonicLocation;
- (void)setMnemonicLocation:(unsigned long long)arg1;
- (void)_setMenuItemBelongsToContextualMenu:(BOOL)arg1;
- (BOOL)_canShareKeyEquivalentWithItem:(id)arg1;
- (long long)keyEquivalentSharingMode;
- (void)setKeyEquivalentSharingMode:(long long)arg1;
- (BOOL)_requiresKERegistration;
- (unsigned long long)_keyEquivalentPriority;
- (unsigned long long)_defaultKeyEquivalentPriority;
- (void)_setDefaultKeyEquivalentPriority:(unsigned long long)arg1;
- (BOOL)_blockKE;
- (void)_setBlockKE:(BOOL)arg1;
- (BOOL)_menuTitleMayBeInvolvedInMenuPaths;
- (void)_recursivelyUpdateKeyEquivalents;
- (unsigned long long)_desiredKeyEquivalentModifierMask;
- (id)_desiredKeyEquivalent;
- (unsigned long long)_rawKeyEquivalentModifierMask;
- (id)_rawKeyEquivalent;
- (id)_keyboardAwareEquivalent;
- (id)_rawKeyboardAwareEquivalent;
- (BOOL)_mayBeInvolvedInMenuItemPath;
- (void)_recacheUserKeyEquivalentOnlyIfStale:(BOOL)arg1;
- (unsigned long long)userKeyEquivalentModifierMask;
@property(readonly, copy) NSString *userKeyEquivalent;
- (void)_internalPerformActionThroughMenuIfPossible;
- (void)_corePerformAction;
- (void)_sendItemSelectedNote;
- (BOOL)_canSendAction:(SEL)arg1;
- (unsigned short)_keyEquivalentVirtualKeyCode;
- (void)_setKeyEquivalentVirtualKeyCode:(unsigned short)arg1;
- (BOOL)_shouldForceShiftModifierWithKeyEquivalent:(id)arg1;
- (id)_applicableImage;
- (unsigned long long)_applicableKeyEquivalentModifierMask;
@property BOOL allowsKeyEquivalentWhenHidden;
@property unsigned long long keyEquivalentModifierMask;
@property(copy) NSString *keyEquivalent;
- (void)_cacheUserKeyEquivalentInfo:(struct NSMenuUserKeyEquivalentInfo_t)arg1;
- (struct NSMenuUserKeyEquivalentInfo_t)_fetchFreshUserKeyEquivalentInfo;
- (void)_setKeyboardAwareEquivalent:(id)arg1;
@property(readonly, getter=isSeparatorItem) BOOL separatorItem;
- (struct CGSize)_cachedAttributedTitleSizeForMeasuring:(BOOL)arg1 hasAttachment:(char *)arg2;
- (struct CGSize)_computeBoundingRectSizeForTitle:(id)arg1 hasAttachment:(char *)arg2;
- (void)setFont:(id)arg1;
- (id)font;
- (void)_setNewItemsCount:(unsigned long long)arg1;
- (unsigned long long)_newItemsCount;
@property(copy) NSAttributedString *attributedTitle;
@property(copy) NSString *title;
- (id)_titlePathForUserKeyEquivalents;
- (id)_titleForUserKeyEquivalents;
- (void)_unconfigureAsSeparatorItem;
- (void)_configureAsSeparatorItem;
@property(readonly, getter=isHiddenOrHasHiddenAncestor) BOOL hiddenOrHasHiddenAncestor;
@property(getter=isHidden) BOOL hidden;
- (BOOL)_isHidden;
- (void)_setHidden:(BOOL)arg1;
@property(retain) NSMenu *submenu;
- (void)_setSubmenu:(id)arg1;
@property(readonly) BOOL hasSubmenu;
@property NSMenu *menu;
@property(readonly) NSMenuItem *parentItem;
- (id)_superitem;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (long long)backgroundStyle;
- (id)init;
- (id)copyNormalizedTitle:(id)arg1;
- (id)initWithTitle:(id)arg1 action:(SEL)arg2 keyEquivalent:(id)arg3;
- (BOOL)accessibilityPerformShowMenu;
- (BOOL)accessibilityPerformShowDefaultUI;
- (BOOL)accessibilityPerformShowAlternateUI;
- (BOOL)accessibilityPerformRaise;
- (BOOL)accessibilityPerformPress;
- (BOOL)accessibilityPerformPick;
- (BOOL)accessibilityPerformIncrement;
- (BOOL)accessibilityPerformDelete;
- (BOOL)accessibilityPerformDecrement;
- (BOOL)accessibilityPerformConfirm;
- (BOOL)accessibilityPerformCancel;
- (void)setAccessibilityContentSiblingBelow:(id)arg1;
- (id)accessibilityContentSiblingBelow;
- (void)setAccessibilityContentSiblingAbove:(id)arg1;
- (id)accessibilityContentSiblingAbove;
- (void)setNextContentSibling:(id)arg1;
- (id)accessibilityNextContentSibling;
- (void)setPreviousContentSibling:(id)arg1;
- (id)accessibilityPreviousContentSibling;
@property(retain) id accessibilityZoomButton; // @dynamic accessibilityZoomButton;
@property(copy) NSArray *accessibilityWindows; // @dynamic accessibilityWindows;
@property __weak id accessibilityWindow; // @dynamic accessibilityWindow;
@property(retain) id accessibilityWarningValue; // @dynamic accessibilityWarningValue;
@property(copy) NSArray *accessibilityVisibleRows; // @dynamic accessibilityVisibleRows;
@property(copy) NSArray *accessibilityVisibleColumns; // @dynamic accessibilityVisibleColumns;
@property(copy) NSArray *accessibilityVisibleChildren; // @dynamic accessibilityVisibleChildren;
@property struct _NSRange accessibilityVisibleCharacterRange; // @dynamic accessibilityVisibleCharacterRange;
@property(copy) NSArray *accessibilityVisibleCells; // @dynamic accessibilityVisibleCells;
@property long long accessibilityVerticalUnits; // @dynamic accessibilityVerticalUnits;
@property(copy) NSString *accessibilityVerticalUnitDescription; // @dynamic accessibilityVerticalUnitDescription;
@property(retain) id accessibilityVerticalScrollBar; // @dynamic accessibilityVerticalScrollBar;
@property(copy) NSString *accessibilityValueDescription; // @dynamic accessibilityValueDescription;
@property(retain) id accessibilityValue; // @dynamic accessibilityValue;
@property long long accessibilityUnits; // @dynamic accessibilityUnits;
@property(copy) NSString *accessibilityUnitDescription; // @dynamic accessibilityUnitDescription;
@property(copy) NSURL *accessibilityURL; // @dynamic accessibilityURL;
@property __weak id accessibilityTopLevelUIElement; // @dynamic accessibilityTopLevelUIElement;
@property(retain) id accessibilityToolbarButton; // @dynamic accessibilityToolbarButton;
@property __weak id accessibilityTitleUIElement; // @dynamic accessibilityTitleUIElement;
@property(copy) NSString *accessibilityTitle; // @dynamic accessibilityTitle;
@property(copy) NSArray *accessibilityTabs; // @dynamic accessibilityTabs;
@property(copy) NSString *accessibilitySubrole; // @dynamic accessibilitySubrole;
@property(copy) NSArray *accessibilitySplitters; // @dynamic accessibilitySplitters;
@property long long accessibilitySortDirection; // @dynamic accessibilitySortDirection;
- (void)setAccessibilityFrameInParentSpace:(struct CGRect)arg1;
- (struct CGRect)accessibilityFrameInParentSpace;
@property struct CGRect accessibilityFrame; // @dynamic accessibilityFrame;
@property(retain) id accessibilityShownMenu; // @dynamic accessibilityShownMenu;
@property(copy) NSArray *accessibilitySharedTextUIElements; // @dynamic accessibilitySharedTextUIElements;
@property(copy) NSArray *accessibilitySharedFocusElements; // @dynamic accessibilitySharedFocusElements;
@property struct _NSRange accessibilitySharedCharacterRange; // @dynamic accessibilitySharedCharacterRange;
@property(copy) NSArray *accessibilityServesAsTitleForUIElements; // @dynamic accessibilityServesAsTitleForUIElements;
@property(copy) NSArray *accessibilitySelectedTextRanges; // @dynamic accessibilitySelectedTextRanges;
@property struct _NSRange accessibilitySelectedTextRange; // @dynamic accessibilitySelectedTextRange;
@property(copy) NSString *accessibilitySelectedText; // @dynamic accessibilitySelectedText;
@property(copy) NSArray *accessibilitySelectedRows; // @dynamic accessibilitySelectedRows;
- (void)setAccessibilityHeaderGroup:(id)arg1;
- (id)accessibilityHeaderGroup;
@property(copy) NSArray *accessibilitySelectedColumns; // @dynamic accessibilitySelectedColumns;
@property(copy) NSArray *accessibilitySelectedChildren; // @dynamic accessibilitySelectedChildren;
@property(copy) NSArray *accessibilitySelectedCells; // @dynamic accessibilitySelectedCells;
@property(getter=isAccessibilitySelected) BOOL accessibilitySelected; // @dynamic accessibilitySelected;
- (void)setAccessibilitySections:(id)arg1;
- (id)accessibilitySections;
@property(retain) id accessibilitySearchMenu; // @dynamic accessibilitySearchMenu;
@property(retain) id accessibilitySearchButton; // @dynamic accessibilitySearchButton;
@property(copy) NSArray *accessibilityRows; // @dynamic accessibilityRows;
@property struct _NSRange accessibilityRowIndexRange; // @dynamic accessibilityRowIndexRange;
@property(copy) NSArray *accessibilityRowHeaderUIElements; // @dynamic accessibilityRowHeaderUIElements;
@property long long accessibilityRowCount; // @dynamic accessibilityRowCount;
@property(copy) NSString *accessibilityRoleDescription; // @dynamic accessibilityRoleDescription;
@property(copy) NSString *accessibilityRole; // @dynamic accessibilityRole;
@property(getter=isAccessibilityRequired) BOOL accessibilityRequired; // @dynamic accessibilityRequired;
@property(retain) id accessibilityProxy; // @dynamic accessibilityProxy;
@property(copy) NSArray *accessibilityPreviousContents; // @dynamic accessibilityPreviousContents;
@property(copy) NSString *accessibilityPlaceholderValue; // @dynamic accessibilityPlaceholderValue;
@property __weak id accessibilityParent; // @dynamic accessibilityParent;
@property(retain) id accessibilityOverflowButton; // @dynamic accessibilityOverflowButton;
@property long long accessibilityOrientation; // @dynamic accessibilityOrientation;
@property(getter=isAccessibilityOrderedByRow) BOOL accessibilityOrderedByRow; // @dynamic accessibilityOrderedByRow;
@property long long accessibilityNumberOfCharacters; // @dynamic accessibilityNumberOfCharacters;
@property(copy) NSArray *accessibilityNextContents; // @dynamic accessibilityNextContents;
@property(getter=isAccessibilityModal) BOOL accessibilityModal; // @dynamic accessibilityModal;
@property(getter=isAccessibilityMinimized) BOOL accessibilityMinimized; // @dynamic accessibilityMinimized;
@property(retain) id accessibilityMinimizeButton; // @dynamic accessibilityMinimizeButton;
@property(retain) id accessibilityMinValue; // @dynamic accessibilityMinValue;
- (void)setAccessibilityMimicNativeView:(BOOL)arg1;
- (BOOL)isAccessibilityMimicNativeView;
@property __weak id accessibilityMenuBar; // @dynamic accessibilityMenuBar;
@property(retain) id accessibilityMaxValue; // @dynamic accessibilityMaxValue;
@property(retain) id accessibilityMarkerValues; // @dynamic accessibilityMarkerValues;
@property(copy) NSArray *accessibilityMarkerUIElements; // @dynamic accessibilityMarkerUIElements;
@property(copy) NSString *accessibilityMarkerTypeDescription; // @dynamic accessibilityMarkerTypeDescription;
@property long long accessibilityRulerMarkerType; // @dynamic accessibilityRulerMarkerType;
@property(retain) id accessibilityMarkerGroupUIElement; // @dynamic accessibilityMarkerGroupUIElement;
@property(retain) id accessibilityMainWindow; // @dynamic accessibilityMainWindow;
@property(getter=isAccessibilityMain) BOOL accessibilityMain; // @dynamic accessibilityMain;
@property(copy) NSArray *accessibilityLinkedUIElements; // @dynamic accessibilityLinkedUIElements;
@property float accessibilityLabelValue; // @dynamic accessibilityLabelValue;
@property(copy) NSArray *accessibilityLabelUIElements; // @dynamic accessibilityLabelUIElements;
@property long long accessibilityInsertionPointLineNumber; // @dynamic accessibilityInsertionPointLineNumber;
@property long long accessibilityIndex; // @dynamic accessibilityIndex;
@property(retain) id accessibilityIncrementButton; // @dynamic accessibilityIncrementButton;
@property(copy) NSString *accessibilityIdentifier; // @dynamic accessibilityIdentifier;
@property long long accessibilityHorizontalUnits; // @dynamic accessibilityHorizontalUnits;
@property(copy) NSString *accessibilityHorizontalUnitDescription; // @dynamic accessibilityHorizontalUnitDescription;
@property(retain) id accessibilityHorizontalScrollBar; // @dynamic accessibilityHorizontalScrollBar;
@property(getter=isAccessibilityHidden) BOOL accessibilityHidden; // @dynamic accessibilityHidden;
@property(copy) NSString *accessibilityHelp; // @dynamic accessibilityHelp;
@property(retain) id accessibilityHeader; // @dynamic accessibilityHeader;
@property(copy) NSArray *accessibilityHandles; // @dynamic accessibilityHandles;
@property(retain) id accessibilityGrowArea; // @dynamic accessibilityGrowArea;
- (void)setAccessibilityFunctionRowTopLevelElements:(id)arg1;
- (id)accessibilityFunctionRowTopLevelElements;
@property(retain) id accessibilityFullScreenButton; // @dynamic accessibilityFullScreenButton;
@property(getter=isAccessibilityFrontmost) BOOL accessibilityFrontmost; // @dynamic accessibilityFrontmost;
@property(retain) id accessibilityFocusedWindow; // @dynamic accessibilityFocusedWindow;
@property(retain) id accessibilityApplicationFocusedUIElement; // @dynamic accessibilityApplicationFocusedUIElement;
@property(getter=isAccessibilityFocused) BOOL accessibilityFocused; // @dynamic accessibilityFocused;
@property(copy) NSString *accessibilityFilename; // @dynamic accessibilityFilename;
@property __weak id accessibilityExtrasMenuBar; // @dynamic accessibilityExtrasMenuBar;
@property(getter=isAccessibilityExpanded) BOOL accessibilityExpanded; // @dynamic accessibilityExpanded;
- (void)setAccessibilityEnhancedUserInterface:(BOOL)arg1;
- (BOOL)isAccessibilityEnhancedUserInterface;
@property(getter=isAccessibilityEnabled) BOOL accessibilityEnabled; // @dynamic accessibilityEnabled;
@property(getter=isAccessibilityEdited) BOOL accessibilityEdited; // @dynamic accessibilityEdited;
@property(copy) NSString *accessibilityDocument; // @dynamic accessibilityDocument;
@property long long accessibilityDisclosureLevel; // @dynamic accessibilityDisclosureLevel;
@property(getter=isAccessibilityDisclosed) BOOL accessibilityDisclosed; // @dynamic accessibilityDisclosed;
@property(retain) id accessibilityDisclosedRows; // @dynamic accessibilityDisclosedRows;
@property __weak id accessibilityDisclosedByRow; // @dynamic accessibilityDisclosedByRow;
@property(copy) NSString *accessibilityLabel; // @dynamic accessibilityLabel;
- (id)_accessibilityLabel;
@property(retain) id accessibilityDefaultButton; // @dynamic accessibilityDefaultButton;
@property(retain) id accessibilityDecrementButton; // @dynamic accessibilityDecrementButton;
@property(copy) NSArray *accessibilityCustomRotors; // @dynamic accessibilityCustomRotors;
- (void)setAccessibilityCustomChoosers:(id)arg1;
- (id)accessibilityCustomChoosers;
@property(copy) NSArray *accessibilityCustomActions; // @dynamic accessibilityCustomActions;
@property(retain) id accessibilityCriticalValue; // @dynamic accessibilityCriticalValue;
@property(copy) NSArray *accessibilityContents; // @dynamic accessibilityContents;
@property(getter=isAccessibilityProtectedContent) BOOL accessibilityProtectedContent; // @dynamic accessibilityProtectedContent;
@property(copy) NSArray *accessibilityColumns; // @dynamic accessibilityColumns;
@property(copy) NSArray *accessibilityColumnTitles; // @dynamic accessibilityColumnTitles;
@property struct _NSRange accessibilityColumnIndexRange; // @dynamic accessibilityColumnIndexRange;
@property(copy) NSArray *accessibilityColumnHeaderUIElements; // @dynamic accessibilityColumnHeaderUIElements;
@property long long accessibilityColumnCount; // @dynamic accessibilityColumnCount;
@property(retain) id accessibilityCloseButton; // @dynamic accessibilityCloseButton;
@property(retain) id accessibilityClearButton; // @dynamic accessibilityClearButton;
@property(copy) NSArray *accessibilityChildrenInNavigationOrder; // @dynamic accessibilityChildrenInNavigationOrder;
@property(copy) NSArray *accessibilityChildren; // @dynamic accessibilityChildren;
@property(retain) id accessibilityCancelButton; // @dynamic accessibilityCancelButton;
- (void)setAccessibilityAuditIssues:(id)arg1;
- (id)accessibilityAuditIssues;
@property(getter=isAccessibilityAlternateUIVisible) BOOL accessibilityAlternateUIVisible; // @dynamic accessibilityAlternateUIVisible;
@property(copy) NSArray *accessibilityAllowedValues; // @dynamic accessibilityAllowedValues;
@property struct CGPoint accessibilityActivationPoint; // @dynamic accessibilityActivationPoint;
@property(getter=isAccessibilityElement) BOOL accessibilityElement; // @dynamic accessibilityElement;
- (id)accessibilityAttributedStringForRange:(struct _NSRange)arg1;
- (id)accessibilityStringForRange:(struct _NSRange)arg1;
- (id)accessibilityRTFForRange:(struct _NSRange)arg1;
- (struct _NSRange)accessibilityStyleRangeForIndex:(long long)arg1;
- (struct CGSize)accessibilityScreenSizeForLayoutSize:(struct CGSize)arg1;
- (struct CGPoint)accessibilityScreenPointForLayoutPoint:(struct CGPoint)arg1;
- (id)accessibilityResultsForSearchPredicate:(id)arg1;
- (struct _NSRange)accessibilityRangeForPosition:(struct CGPoint)arg1;
- (struct _NSRange)accessibilityRangeForLine:(long long)arg1;
- (struct _NSRange)accessibilityRangeForIndex:(long long)arg1;
- (long long)accessibilityLineForIndex:(long long)arg1;
- (struct CGSize)accessibilityLayoutSizeForScreenSize:(struct CGSize)arg1;
- (struct CGPoint)accessibilityLayoutPointForScreenPoint:(struct CGPoint)arg1;
- (struct CGRect)accessibilityFrameForRange:(struct _NSRange)arg1;
- (id)accessibilityCellForColumn:(long long)arg1 row:(long long)arg2;
- (BOOL)isAccessibilitySelectorAllowed:(SEL)arg1;
- (void)recognizerDidDismissAnimation:(id)arg1;
- (void)recognizerDidCompleteAnimation:(id)arg1;
- (void)recognizerDidCancelAnimation:(id)arg1;
- (void)recognizerDidUpdateAnimation:(id)arg1;
- (void)recognizerWillBeginAnimation:(id)arg1;
- (void)_releaseDeepAnimation;
- (void)_completeDeepAnimation;
- (void)_cancelPredeepAnimation;
- (void)_doPredeepAnimationWithProgress:(double)arg1;
- (void)_beginPredeepAnimationAgainstPoint:(struct CGPoint)arg1 inView:(id)arg2;
@property(readonly) BOOL _wantsDeepAnimationCallbacks;
- (void)setActionBlock:(CDUnknownBlockType)arg1;
- (void)invokeActionBlock:(id)arg1;
- (id)controlView;
- (void)setControlView:(id)arg1;
- (BOOL)accessibilitySetOverrideValue:(id)arg1 forAttribute:(id)arg2;
- (BOOL)accessibilitySupportsOverriddenAttributes;
- (BOOL)accessibilityIsIgnored;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

