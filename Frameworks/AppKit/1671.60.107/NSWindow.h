//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <AppKit/NSResponder.h>

#import <AppKit/NSAccessibility-Protocol.h>
#import <AppKit/NSAccessibilityElement-Protocol.h>
#import <AppKit/NSAnimatablePropertyContainer-Protocol.h>
#import <AppKit/NSAppearanceCustomization-Protocol.h>
#import <AppKit/NSAppearanceCustomizationInternal-Protocol.h>
#import <AppKit/NSMenuItemValidation-Protocol.h>
#import <AppKit/NSTouchBarProviderContainer-Protocol.h>
#import <AppKit/NSUserInterfaceItemIdentification-Protocol.h>
#import <AppKit/NSUserInterfaceValidations-Protocol.h>

@class CAContext, NSAppearance, NSArray, NSButtonCell, NSCGSWindow, NSColor, NSColorSpace, NSDictionary, NSDockTile, NSImage, NSMutableSet, NSObject, NSScreen, NSString, NSTabBarItem, NSTitlebarAccessoryViewController, NSToolbar, NSTouchBar, NSURL, NSView, NSViewController, NSWindowAuxiliary, NSWindowController, NSWindowStackController, NSWindowTab, NSWindowTabGroup;
@protocol NSAppearanceCustomization, NSWindowDelegate;

@interface NSWindow : NSResponder <NSTouchBarProviderContainer, NSAppearanceCustomizationInternal, NSAnimatablePropertyContainer, NSMenuItemValidation, NSUserInterfaceValidations, NSUserInterfaceItemIdentification, NSAppearanceCustomization, NSAccessibilityElement, NSAccessibility>
{
    struct CGRect _frame;
    NSView *_contentView;
    id _delegate;
    NSResponder *_firstResponder;
    NSView *_lastLeftHit;
    NSView *_lastRightHit;
    id _unusedWindow2;
    id _fieldEditor;
    int _winEventMask;
    long long _windowNum;
    int _level;
    NSColor *_backgroundColor;
    NSView *_borderView;
    unsigned char _postingDisabled;
    unsigned char _styleMask;
    unsigned char _flushDisabled;
    unsigned int _ignoreResignEvent:1;
    unsigned int _reservedWindow:7;
    void *_cursorRects;
    void *_trectTable;
    NSImage *_miniIcon;
    int _bamboo;
    NSMutableSet *_dragTypes;
    NSURL *_representedURL;
    struct CGSize *_sizeLimits;
    NSString *_frameSaveName;
    NSToolbar *_toolbar;
    struct __wFlags {
        unsigned int backing:2;
        unsigned int visible:1;
        unsigned int isMainWindow:1;
        unsigned int isKeyWindow:1;
        unsigned int hidesOnDeactivate:1;
        unsigned int dontFreeWhenClosed:1;
        unsigned int oneShot:1;
        unsigned int deferred:1;
        unsigned int cursorRectsDisabled:1;
        unsigned int haveFreeCursorRects:1;
        unsigned int validCursorRects:1;
        unsigned int docEdited:1;
        unsigned int staticDepthLimit:1;
        unsigned int worksWhenModal:1;
        unsigned int limitedBecomeKey:1;
        unsigned int needsFlush:1;
        unsigned int viewsNeedDisplay:1;
        unsigned int ignoredFirstMouse:1;
        unsigned int repostedFirstMouse:1;
        unsigned int windowDying:1;
        unsigned int tempHidden:1;
        unsigned int floatingPanel:1;
        unsigned int wantsToBeOnMainScreen:1;
        unsigned int needsBuildLayerTree:1;
        unsigned int deferCanDraw:1;
        unsigned int titleIsRepresentedFilename:1;
        unsigned int excludedFromWindowsMenu:1;
        unsigned int depthLimit:4;
        unsigned int delegateReturnsValidRequestor:1;
        unsigned int lmouseupPending:1;
        unsigned int rmouseupPending:1;
        unsigned int hasColorSensitiveUI:1;
        unsigned int wantsToRegDragTypes:1;
        unsigned int sentInvalidateCursorRectsMsg:1;
        unsigned int avoidsActivation:1;
        unsigned int frameSavedUsingTitle:1;
        unsigned int didRegDragTypes:1;
        unsigned int delayedOneShot:1;
        unsigned int postedNeedsDisplayNote:1;
        unsigned int unused2:1;
        unsigned int initialFirstResponderTempSet:1;
        unsigned int autodisplay:1;
        unsigned int tossedFirstEvent:1;
        unsigned int isImageCache:1;
        unsigned int autolayoutEngagedSomewhere:1;
        unsigned int hasRegisteredBackdropViews:1;
        unsigned int unused3:1;
        unsigned int keyViewSelectionDirection:2;
        unsigned int defaultButtonCellKETemporarilyDisabled:1;
        unsigned int defaultButtonCellKEDisabled:1;
        unsigned int menuHasBeenSet:1;
        unsigned int wantsToBeModal:1;
        unsigned int showingModalFrame:1;
        unsigned int isTerminating:1;
        unsigned int makingFirstResponderForMouseDown:1;
        unsigned int needsZoom:1;
        unsigned int sentWindowNeedsDisplayMsg:1;
        unsigned int wasModalAtSometime:1;
        unsigned int windowWillBecomeFS:1;
    } _wFlags;
    id _defaultButtonCell;
    NSView *_initialFirstResponderX;
    NSWindowAuxiliary *_auxiliaryStorage;
}

+ (BOOL)_hiddenInWindowList;
+ (id)windowWithContentViewController:(id)arg1;
+ (id)keyPathsForValuesAffectingEffectiveAppearance;
+ (id)keyPathsForValuesAffectingAppearance;
+ (BOOL)automaticallyNotifiesObserversOfAppearance;
+ (id)defaultAnimationForKey:(id)arg1;
+ (id)defaultAnimationForKeyPath:(id)arg1;
+ (struct _NSModalSession *)_modalSessionForShownService:(id)arg1;
+ (void)removeFrameUsingName:(id)arg1;
+ (struct CGRect)_savedFrameFromString:(id)arg1;
+ (id)_allowedRunLoopModesForToolTips;
+ (BOOL)_currentWorkspaceIsUserSpace;
+ (id)windowNumbersWithOptions:(unsigned long long)arg1;
+ (id)_windowNumbersWithOptions:(unsigned long long)arg1 onSpace:(unsigned long long)arg2;
+ (long long)windowNumberAtPoint:(struct CGPoint)arg1 belowWindowWithWindowNumber:(long long)arg2;
+ (void)_minimizeAll;
+ (BOOL)_batchMinimizeWindowsWithBlock:(CDUnknownBlockType)arg1;
+ (long long)_baseModalWindowLevel;
+ (void)_setBaseWindowModalLevel:(long long)arg1;
+ (BOOL)_batchOrderWindows:(unsigned long long)arg1 withBlock:(CDUnknownBlockType)arg2;
+ (void)_calcKeyAndMain;
+ (int)defaultDepthLimit;
+ (double)standardContentBorderThicknessForEdge:(unsigned long long)arg1 borderSize:(unsigned long long)arg2 styleMask:(unsigned long long)arg3;
+ (BOOL)_shouldMiniaturizeOnDoubleClick;
+ (BOOL)_shouldZoomOnDoubleClick;
+ (BOOL)_tracksDirtyRegions;
+ (void)_enableKeyStateChangeNotifications;
+ (void)_disableKeyStateChangeNotifications;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (BOOL)automaticallyNotifiesObserversOf_borderView;
+ (id)keyPathsForValuesAffectingContentLayoutRect;
+ (id)standardWindowButton:(unsigned long long)arg1 forStyleMask:(unsigned long long)arg2;
+ (double)minFrameWidthWithTitle:(id)arg1 styleMask:(unsigned long long)arg2;
+ (struct CGSize)minContentSizeForMinFrameSize:(struct CGSize)arg1 styleMask:(unsigned long long)arg2;
+ (struct CGSize)minFrameSizeForMinContentSize:(struct CGSize)arg1 styleMask:(unsigned long long)arg2;
+ (struct CGRect)contentRectForFrameRect:(struct CGRect)arg1 styleMask:(unsigned long long)arg2;
+ (struct CGRect)frameRectForContentRect:(struct CGRect)arg1 styleMask:(unsigned long long)arg2;
+ (Class)frameViewClassForStyleMask:(unsigned long long)arg1;
+ (BOOL)_isStyleMaskEffectivelyTitled:(unsigned long long)arg1;
+ (BOOL)_allowsNontitledResizableWindows;
+ (unsigned long long)_validateStyleMask:(unsigned long long)arg1;
+ (void)initialize;
+ (void)_automateActivateDeactivate;
+ (void)_tabbedWindowsFinishedRestoration;
+ (void)_addWindowTabsMenuItemsIfNeeded;
+ (BOOL)shouldPreferWindowTabbingForEvent:(id)arg1 withIdentifier:(id)arg2;
+ (BOOL)shouldPreferWindowTabbingForEvent:(id)arg1;
+ (void)_setTabPlusButtonWasClicked:(BOOL)arg1;
+ (BOOL)_shouldInvertImplicitBehavior;
+ (void)_setShouldInvertImplicitBehaviorToYesForCurrentRunLoop;
+ (void)_setShouldInvertImplicitBehavior:(BOOL)arg1;
+ (void)setAllowsAutomaticWindowTabbing:(BOOL)arg1;
+ (BOOL)allowsAutomaticWindowTabbing;
+ (void)_updateTabbingModePreference;
+ (void)setUserTabbingPreference:(long long)arg1;
+ (long long)userTabbingPreference;
+ (long long)_readWindowTabbingModeFromPrefs;
+ (BOOL)_sendDockMenuCommand:(unsigned int)arg1 withTag:(unsigned long long)arg2 modifierFlags:(unsigned long long)arg3;
+ (struct OpaqueCUIRendererRef *)coreUIRenderer;
+ (id)_windowWithPersistentUIWindowID:(unsigned int)arg1;
+ (double)_tileDividerInteriorResizeEdgeThickness;
+ (void)_getExteriorResizeEdgeThicknesses:(double [8])arg1 forStyleMask:(unsigned long long)arg2;
+ (void)_getResizeEdgeAndCornerThicknesses:(double [8])arg1 forStyleMask:(unsigned long long)arg2;
+ (BOOL)canBeResizedFromInterior;
+ (long long)_mouseHysteresisCheck:(id)arg1 withExpiration:(id)arg2 andDistance:(struct CGSize)arg3 finalMouseLocation:(struct CGPoint *)arg4;
+ (BOOL)_useReducedMotionFullScreenTransition;
+ (BOOL)_hidesChromeWhenFullScreen;
- (void).cxx_destruct;
- (BOOL)_allowsRootLayerBacking;
@property BOOL hasColorSensitiveUI;
- (void)setTitlebarAlphaValue:(double)arg1;
- (double)titlebarAlphaValue;
- (void)setStandardWindowTitleButtonsAlphaValue:(double)arg1;
- (double)standardWindowTitleButtonsAlphaValue;
- (void)setCanBeVisibleOnAllSpaces:(BOOL)arg1;
- (BOOL)canBeVisibleOnAllSpaces;
@property(readonly) NSCGSWindow *_cgsWindow;
- (BOOL)_preserveAnimatingFrames;
- (void)addTabbedWindow:(id)arg1 ordered:(long long)arg2;
@property(readonly) __weak NSWindowTabGroup *tabGroup; // @dynamic tabGroup;
- (void)toggleTabOverview:(id)arg1;
- (void)toggleTabBar:(id)arg1;
- (void)mergeAllWindows:(id)arg1;
- (void)moveTabToNewWindow:(id)arg1;
- (void)selectPreviousTab:(id)arg1;
- (void)selectNextTab:(id)arg1;
@property(readonly, copy) NSArray *tabbedWindows; // @dynamic tabbedWindows;
@property(readonly) long long windowTitlebarLayoutDirection; // @dynamic windowTitlebarLayoutDirection;
@property __weak id accessibilityParent; // @dynamic accessibilityParent;
@property struct CGRect accessibilityFrame; // @dynamic accessibilityFrame;
- (double)_maxXTitlebarButtonsWidth;
- (double)_toolbarTrailingSpace;
- (double)_toolbarLeadingSpace;
- (double)_minXTitlebarButtonsWidth;
@property BOOL titlebarAppearsTransparent;
@property long long titleVisibility;
- (long long)titleMode;
- (void)setTitleMode:(long long)arg1;
- (void)setTitleHidden:(BOOL)arg1;
- (BOOL)titleHidden;
@property(retain) NSViewController *contentViewController;
- (void)_contentViewControllerChanged;
- (void)_hierarchyDidChangeInView:(id)arg1;
- (void)_drawBackgroundForCellWithRect:(struct CGRect)arg1 inView:(id)arg2;
- (void)setAppearanceParent:(id)arg1;
- (id)appearanceParent;
@property __weak NSObject<NSAppearanceCustomization> *appearanceSource;
@property(readonly) NSAppearance *effectiveAppearance;
- (void)_windowDidChangeAppearance;
- (id)_kitAppearance;
- (BOOL)_hasIncompatibleAppearanceOverride;
@property(retain) NSAppearance *appearance;
- (void)editTitle:(id)arg1;
- (void)editTitleWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)_makeTitlebarRenamingFloatingWindow;
- (void)_renamingDidEndNormally:(BOOL)arg1;
- (void)_titlebarEditingDidEndNormally:(BOOL)arg1 title:(id)arg2 editingRange:(struct _NSRange)arg3 grantHandler:(CDUnknownBlockType)arg4;
- (void)_endTitlebarRenamingPrecleanup;
- (void)_removeTitlebarRenamingFloatingWindow;
- (void)_hideTitlebarFloatingWindow;
- (void)_addTitlebarRenamingFloatingWindow;
- (void)_titleBarRenamingApplicationDidResignActive:(id)arg1;
- (BOOL)_cancelTitleEditing;
- (void)_internalEditTitleWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_setSavedFirstResponderForRenaming:(id)arg1;
- (id)_savedFirstResponderForRenaming;
- (void)_setRemoteRenameSession:(id)arg1;
- (id)_remoteRenameSession;
- (id)_windowForInlineTitleEditing;
- (void)_setTitlebarFloatingWindow:(id)arg1;
- (id)_titlebarFloatingWindow;
- (BOOL)_canEditTitle;
- (BOOL)_titlebarRenamingShouldBeInWindow;
- (void)_setEventMonitorForRenaming:(id)arg1;
- (id)_eventMonitorForRenaming;
- (struct CGRect)_titlebarFloatingWindowFrame;
- (unsigned long long)_editingModeForTitle:(id)arg1 editingRange:(struct _NSRange *)arg2 selectedRange:(struct _NSRange *)arg3;
- (void)setUserInterfaceLayoutDirection:(long long)arg1;
- (long long)userInterfaceLayoutDirection;
@property(copy) NSString *identifier;
- (void)setUserInterfaceItemIdentifier:(id)arg1;
- (id)userInterfaceItemIdentifier;
- (BOOL)canRepresentDisplayGamut:(long long)arg1;
@property(retain) NSColorSpace *colorSpace;
- (BOOL)_setColorSpace:(id)arg1 sendNotification:(BOOL)arg2 displayIfChanged:(BOOL)arg3;
- (BOOL)_colorSpaceIsInherited;
- (void)_adjustColorSpace:(BOOL)arg1;
- (void)_setWindowResolution:(double)arg1 displayIfChanged:(BOOL)arg2;
- (double)_windowResolution;
- (BOOL)_windowValidForDrawing;
- (void)_setAnyViewCanDrawConcurrently:(BOOL)arg1;
- (BOOL)_anyViewCanDrawConcurrently;
@property BOOL allowsConcurrentViewDrawing;
- (unsigned long long)backingLocation;
- (unsigned long long)preferredBackingLocation;
- (void)setPreferredBackingLocation:(unsigned long long)arg1;
@property unsigned long long sharingType;
- (id)animationForKey:(id)arg1;
- (id)animationForKeyPath:(id)arg1;
@property(copy) NSDictionary *animations;
- (id)animator;
- (double)userSpaceScaleFactor;
@property(readonly) double backingScaleFactor;
- (BOOL)_excludedFromVisibleWindowList;
- (void)_setExcludedFromVisibleWindowList:(BOOL)arg1;
- (id)_topmostChild;
@property __weak NSWindow *parentWindow;
- (id)_ultimateParentWindow;
@property(readonly, copy) NSArray *childWindows;
- (id)_childWindows;
- (void)removeChildWindow:(id)arg1;
- (void)_setIsRemovingFromParentWindow:(BOOL)arg1;
- (BOOL)_acceptsSecondaryKey;
- (BOOL)_canBecomeSecondaryKeyWindow;
- (BOOL)_sharesParentKeyState;
- (void)addChildWindow:(id)arg1 ordered:(long long)arg2 shareKey:(BOOL)arg3;
- (void)_rebuildOrderingGroup:(BOOL)arg1;
- (void)addChildWindow:(id)arg1 ordered:(long long)arg2;
- (long long)_childWindowOrderingPriority;
- (void)_willRemoveChildWindow:(id)arg1;
- (void)_updateFirstResponderForIgnoredChildWindow:(id)arg1;
- (void)_didRemoveChildWindow:(id)arg1;
- (void)_didAddChildWindow:(id)arg1;
- (void)_unhideChildren;
- (void)_hideChildren;
- (void)_addToGroups:(id)arg1 ordered:(long long)arg2;
- (void)_removeFromGroups:(id)arg1;
- (void)_updateMovementGroup;
- (void)_checkForImplicitRemovalFromMovementGroupWhenMovingToFrame:(struct CGRect)arg1;
- (BOOL)_allowsImplicitRemovalFromMovementGroup;
- (id)_parentWindowForAddingToMovementGroupWithProposedParent:(id)arg1;
- (void)_maskRoundedBottomCorners:(struct CGRect)arg1;
- (struct CGRect)_intersectBottomCornersWithRect:(struct CGRect)arg1;
- (BOOL)bottomCornerRounded;
- (void)setBottomCornerRounded:(BOOL)arg1;
- (void)_endFauxModalSession;
- (void)_beginFauxModalSession;
- (void)_endWindowBlockingModalSessionForShownService:(id)arg1;
- (void)_beginWindowBlockingModalSessionForShownService:(id)arg1;
@property(readonly) NSWindow *sheetParent;
@property(readonly, getter=isSheet) BOOL sheet;
- (BOOL)_showingModalSheet;
@property(readonly) NSWindow *attachedSheet;
@property(readonly, copy) NSArray *sheets;
- (void)_endWindowBlockingModalSession:(struct _NSModalSession *)arg1 returnCode:(long long)arg2;
- (BOOL)_hasQueuedSheets;
- (BOOL)_beginNextQueuedSheetIfNecessary;
- (void)endSheet:(id)arg1 returnCode:(long long)arg2;
- (void)endSheet:(id)arg1;
- (void)beginCriticalSheet:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)beginSheet:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_beginSheet:(id)arg1 completionHandler:(CDUnknownBlockType)arg2 isCritical:(BOOL)arg3;
- (void)_beginWindowBlockingModalSessionForSheet:(id)arg1 service:(id)arg2 completionHandler:(CDUnknownBlockType)arg3 isCritical:(BOOL)arg4;
- (BOOL)showsResizeIndicator;
- (void)setShowsResizeIndicator:(BOOL)arg1;
- (double)_effectiveAlphaValue;
@property double alphaValue;
@property(getter=isOpaque) BOOL opaque;
- (id)autofillColor;
- (void)setAutofillColor:(id)arg1;
- (BOOL)autofill;
- (void)setAutofill:(BOOL)arg1;
- (id)graphicsContext;
- (void)_windowDeviceRoundWithContext:(id)arg1;
- (void)_windowDeviceRound;
- (void *)graphicsPort;
- (id)_threadContext;
- (BOOL)_makingFirstResponderForMouseDown;
- (void)helpRequested:(id)arg1;
- (BOOL)_forwardActionToParent:(SEL)arg1;
- (BOOL)validateMenuItem:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (BOOL)_userInterfaceItemIsTemporarilyDisabled:(id)arg1;
- (BOOL)_runningDocModalOrFauxModal;
- (void)_takeApplicationMenuIfNeeded:(id)arg1;
- (id)menu;
- (void)setMenu:(id)arg1;
- (void)doCommandBySelector:(SEL)arg1;
- (BOOL)_isTerminating;
- (void)_termWindowIfOwner;
- (void)_termOneShotWindow;
- (BOOL)_doesOwnRealWindow;
- (void)_setOwnsRealWindow:(BOOL)arg1;
- (struct CGPoint)cascadeTopLeftFromPoint:(struct CGPoint)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
@property struct CGSize maxFullScreenContentSize; // @dynamic maxFullScreenContentSize;
@property struct CGSize minFullScreenContentSize; // @dynamic minFullScreenContentSize;
@property struct CGSize contentMaxSize;
@property struct CGSize contentMinSize;
- (void)_commonMinMaxSizeChanged;
- (void)_adjustMinAndMaxSizeForSheet:(BOOL)arg1;
@property struct CGSize maxSize;
@property struct CGSize minSize;
- (BOOL)_confirmSize:(struct CGSize *)arg1 force:(BOOL)arg2;
- (void)_validSize:(struct CGSize *)arg1 forFullScreen:(BOOL)arg2 force:(BOOL)arg3;
- (void)_validSize:(struct CGSize *)arg1 force:(BOOL)arg2;
- (struct CGRect)_overrideDefeatingConstrainFrameRect:(struct CGRect)arg1 toScreen:(id)arg2;
- (BOOL)_defeatsOverrideOfFullScreenAvoidance;
- (BOOL)canMoveToCurrentSpaceOnScreen:(id)arg1;
- (struct CGRect)constrainFrameRect:(struct CGRect)arg1 toScreen:(id)arg2;
- (struct CGRect)_enforceMenuBarAvoidanceForFrame:(struct CGRect)arg1 onScreen:(id)arg2;
- (struct CGRect)_enforceFullScreenRestrictionForFrame:(struct CGRect)arg1;
- (void)invalidateShadow;
@property BOOL hasShadow;
@property(readonly) NSScreen *screen;
- (id)_bestScreenBySpaceAssignmentOrGeometry;
- (id)_bestScreenByGeometry;
- (id)_bestScreenBySpaceAssignment;
- (id)_bestScreenByGeometryOfFrame:(struct CGRect)arg1 avoidingFullScreen:(BOOL)arg2;
- (id)_bestScreenByGeometryOfFrame:(struct CGRect)arg1 respectingSpaceAssignment:(BOOL)arg2;
@property(readonly, copy) NSDictionary *deviceDescription;
@property(readonly) NSScreen *deepestScreen;
- (BOOL)canStoreColor;
- (void)_setFrameSavedUsingTitle:(BOOL)arg1;
- (id)_copyPublicPersistentUIInfo;
- (id)_restorableStateRepresentedURL;
- (void)encodeRestorableStateWithCoder:(id)arg1;
- (id)_copyTileSpaceName;
- (id)_copyWorkspaceIdentifier;
- (BOOL)_enterFullScreenModeOnTileSpaceWithName:(id)arg1 takeOwnership:(BOOL)arg2;
- (BOOL)_enterFullScreenModeOnTileSpaceWithName:(id)arg1;
- (void)restoreStateWithCoder:(id)arg1;
- (void)_persistFrame;
- (id)_toggleFrameAutosaveEnabled:(id)arg1;
@property(readonly, copy) NSString *frameAutosaveName;
- (BOOL)setFrameAutosaveName:(id)arg1;
- (BOOL)_setFrameAutosaveName:(id)arg1 changeFrame:(BOOL)arg2;
- (BOOL)setFrameUsingName:(id)arg1 force:(BOOL)arg2;
- (BOOL)setFrameUsingName:(id)arg1;
- (void)setFrameFromString:(id)arg1;
- (BOOL)_setFrameUsingName:(id)arg1 domain:(id)arg2;
- (BOOL)_setFrameUsingName:(id)arg1 domain:(id)arg2 force:(BOOL)arg3;
- (BOOL)_setFrameFromString:(id)arg1 overrideTopLeft:(const struct CGPoint *)arg2 preferActiveDisplay:(BOOL)arg3 constrainFullFrame:(BOOL)arg4 force:(BOOL)arg5;
- (struct CGRect)_convertAdjustedFrameFromDefaults:(struct CGRect)arg1;
- (struct CGRect)_adjustedFrameForSaving:(struct CGRect)arg1;
- (struct CGRect)_adjustedFrameFromDefaults:(struct CGRect)arg1;
@property(readonly, copy) NSString *stringWithSavedFrame;
- (void)saveFrameUsingName:(id)arg1;
- (void)_saveFrameUsingName:(id)arg1 domain:(id)arg2;
- (id)_stringWithSavedFrame;
- (id)_stringWithSavedFrameAdjustingForToolbar:(BOOL)arg1;
- (id)_stringWithFrame:(struct CGRect)arg1 onScreen:(id)arg2 adjustingForToolbar:(BOOL)arg3;
- (void)discardCachedImage;
- (void)restoreCachedImage;
- (void)cacheImageInRect:(struct CGRect)arg1;
- (BOOL)_shouldShowResizeCursor;
- (void)_synchronizeOverrideForActiveGestureRecognizers;
- (void)_invalidateAllRevealoversForView:(id)arg1;
- (BOOL)_isToolTipCreationAndDisplayEnabled;
- (void)_enableToolTipCreationAndDisplay;
- (void)_disableToolTipCreationAndDisplay;
- (void)_endLiveResize;
- (void)_startLiveResize;
@property BOOL preservesContentDuringLiveResize;
@property(readonly) BOOL inLiveResize;
- (BOOL)_shouldSyncSurfaceToView;
- (BOOL)_inLiveResize;
@property BOOL allowsToolTipsWhenApplicationIsInactive;
- (BOOL)_showToolTip;
- (void)print:(id)arg1;
- (id)dataWithPDFInsideRect:(struct CGRect)arg1;
- (id)dataWithEPSInsideRect:(struct CGRect)arg1;
- (void)_changeKeyAndMainLimitedOK:(BOOL)arg1;
- (void)_changeJustMain;
- (BOOL)_preventsActivation;
- (void)_setPreventsActivation:(BOOL)arg1;
- (BOOL)_avoidsActivation;
- (void)_setAvoidsActivation:(BOOL)arg1;
@property unsigned long long collectionBehavior;
- (unsigned long long)_validateCollectionBehavior:(unsigned long long)arg1;
- (BOOL)_cgsWindowSaysSupportsTiling;
- (void)_updateCollectionBehavior;
- (void)_cacheAndSetPropertiesForCollectionBehavior:(unsigned long long)arg1;
- (unsigned long long)_effectiveCollectionBehavior;
- (unsigned long long)_defaultCollectionBehavior;
- (BOOL)_wasModalAtSometime;
- (BOOL)_isTitledWindow;
- (BOOL)_isActiveAndOnScreen:(id)arg1;
- (BOOL)_isOnActiveScreen;
@property(readonly, getter=isOnActiveSpace) BOOL onActiveSpace;
@property BOOL canBecomeVisibleWithoutLogin;
- (BOOL)isOneShot;
- (void)setOneShot:(BOOL)arg1;
- (long long)gState;
- (id)_batchZoom;
- (id)_copyMinimizeDictionary;
- (id)_batchClose;
- (void)performZoom:(id)arg1;
- (void)performMiniaturize:(id)arg1;
- (void)performClose:(id)arg1;
- (void)_close:(id)arg1;
- (void)__close;
- (struct CGPoint)convertScreenToBase:(struct CGPoint)arg1;
- (struct CGPoint)convertBaseToScreen:(struct CGPoint)arg1;
- (struct CGRect)backingAlignedRect:(struct CGRect)arg1 options:(unsigned long long)arg2;
- (struct CGRect)_convertRectFromIntegralizationSpace:(struct CGRect)arg1;
- (struct CGRect)_convertRectToIntegralizationSpace:(struct CGRect)arg1;
- (void)_nsib_setUsesPointIntegralizationForLayout:(BOOL)arg1;
- (BOOL)_nsib_usesPointIntegralizationForLayout;
- (struct CGPoint)convertPointFromBacking:(struct CGPoint)arg1;
- (struct CGPoint)convertPointToBacking:(struct CGPoint)arg1;
- (struct CGRect)convertRectFromBacking:(struct CGRect)arg1;
- (struct CGRect)convertRectToBacking:(struct CGRect)arg1;
- (struct CGPoint)convertPointFromScreen:(struct CGPoint)arg1;
- (struct CGPoint)convertPointToScreen:(struct CGPoint)arg1;
- (struct CGRect)convertRectFromScreen:(struct CGRect)arg1;
- (struct CGRect)convertRectToScreen:(struct CGRect)arg1;
- (BOOL)_visibleAndCanBecomeKeyLimitedOK:(BOOL)arg1;
- (BOOL)_visibleAndCanBecomeKey;
- (BOOL)_miniaturizedOrCanBecomeMain;
- (void)_dismissModalForTerminate;
- (BOOL)_blocksKeyAndMainWindowTouchBarsWhenModal;
- (BOOL)_blocksActionWhenModal:(SEL)arg1;
@property BOOL preventsApplicationTerminationWhenModal;
- (BOOL)_worksWhenModalOrChildOfModalWindow;
- (BOOL)_isChildOfWindow:(id)arg1;
- (BOOL)_isChildOfWindowWithWindowNumber:(long long)arg1;
- (unsigned int)_persistentUIWindowID;
- (BOOL)isRestorable;
- (BOOL)_windowCanBeRestored;
- (void)setRestorable:(BOOL)arg1;
@property(readonly) BOOL worksWhenModal;
@property(readonly) BOOL canBecomeMainWindow;
- (BOOL)_canBecomeMainWindowRegardlessOfVisibility;
@property(readonly) BOOL canBecomeKeyWindow;
@property(readonly, getter=isMainWindow) BOOL mainWindow;
- (BOOL)_hostWindowIsKey;
- (BOOL)_isKeyWindow;
@property(readonly, getter=isKeyWindow) BOOL keyWindow;
- (BOOL)_isEffectivelyVisible;
- (void)_setVisible:(BOOL)arg1;
@property(readonly, getter=isVisible) BOOL visible;
@property(getter=isDocumentEdited) BOOL documentEdited;
- (void)_setDocumentEdited:(BOOL)arg1;
@property(readonly) NSDockTile *dockTile;
@property(copy) NSString *miniwindowTitle;
@property(retain) NSImage *miniwindowImage;
- (void)_setWantsHideOnDeactivate:(BOOL)arg1;
- (BOOL)_wantsHideOnDeactivate;
- (id)_tempHide:(BOOL)arg1 relWin:(long long)arg2;
- (void)_setTempHidden:(BOOL)arg1;
- (BOOL)_isHidden;
- (void)_setKeepChildrenAttached:(BOOL)arg1;
- (BOOL)_keepChildrenAttached;
- (void)_hideAttachedWindows:(BOOL)arg1 findKey:(BOOL)arg2;
- (id)_tempUnhideHODWindow;
- (id)_tempHideHODWindow;
@property BOOL canHide;
- (void)_setCanCycle:(BOOL)arg1;
- (id)_restoreModalWindowLevel;
- (void)_setModalWindowLevel;
- (void)_restoreLevelAfterRunningModal;
- (id)_clearModalWindowLevel;
- (void)_setModal:(BOOL)arg1;
- (void)_unlockSublevel;
- (void)_lockToAbsoluteSubLevel:(long long)arg1;
@property long long level;
- (void)_applyWindowLevelWithTagUpdateNeeded:(BOOL)arg1;
- (long long)_effectiveLevel;
- (BOOL)_attemptToModifyAlwaysOnTopWithEvent:(id)arg1;
- (BOOL)_alwaysOnTop;
- (void)_setAlwaysOnTop:(BOOL)arg1;
- (long long)_childLevel:(long long)arg1;
- (id)_destroyRealWindowIfNotVisible:(id)arg1;
- (id)_destroyRealWindow:(BOOL)arg1;
- (void)_setWantsToDestroyRealWindow:(BOOL)arg1;
- (BOOL)_wantsToDestroyRealWindow;
- (void)_doOrderWindowWithoutAnimation:(long long)arg1 relativeTo:(long long)arg2 findKey:(BOOL)arg3 forCounter:(BOOL)arg4 force:(BOOL)arg5 isModal:(BOOL)arg6;
- (void)_doOrderWindow:(long long)arg1 relativeTo:(long long)arg2 findKey:(BOOL)arg3 forCounter:(BOOL)arg4 force:(BOOL)arg5 isModal:(BOOL)arg6;
- (BOOL)_reallyIsVisible;
- (void)_removeFromParentIfPossible;
- (BOOL)_shouldRemoveFromParentIfPossible;
- (id)_windowTransformAnimationForOrdering:(long long)arg1 animationType:(long long)arg2 interruptingAnimation:(id)arg3;
- (void)_setTransformDidCompleteHandler:(CDUnknownBlockType)arg1;
- (void)_windowTransformAnimationDidEnd:(id)arg1;
- (void)_windowTransformAnimationWillBegin:(id)arg1;
- (void)_setRunningWindowTransformAnimation:(id)arg1;
- (id)_runningWindowTransformAnimation;
- (void)_reallyDoOrderWindow:(long long)arg1 relativeTo:(long long)arg2 findKey:(BOOL)arg3 forCounter:(BOOL)arg4 force:(BOOL)arg5 isModal:(BOOL)arg6;
- (void)_reallyDoOrderWindowOutRelativeTo:(long long)arg1 findKey:(BOOL)arg2 forCounter:(BOOL)arg3 force:(BOOL)arg4 isModal:(BOOL)arg5;
- (void)_setPreferredNextWindowToSelect:(id)arg1;
- (id)_preferredNextWindowToSelect;
- (void)_reallyDoOrderWindowAboveOrBelow:(long long)arg1 relativeTo:(long long)arg2 findKey:(BOOL)arg3 forCounter:(BOOL)arg4 force:(BOOL)arg5 isModal:(BOOL)arg6;
- (void)_orderPanelIfActiveWithOrderingMode:(long long)arg1 otherWin:(long long)arg2;
- (BOOL)_shouldReallyOrderWindow;
- (void)_doWindowOrderOutWithWithKeyCalc:(BOOL)arg1 forCounter:(BOOL)arg2 orderingDone:(BOOL)arg3 docWindow:(id)arg4;
- (void)_unscheduleWindowForBatchOrdering;
- (void)_scheduleWindowForBatchOrdering:(long long)arg1 relativeTo:(long long)arg2;
- (void)_orderOutWhenAppHiddenRelativeToWindow:(id)arg1;
- (void)_doWindowWillBecomeHidden;
- (void)_doWindowWillBeVisibleAsSheet:(BOOL)arg1;
- (BOOL)_reallyNeedsWindowRef;
- (void)_postWindowWillOrderOnScreenNotification;
- (void)_postWillOrderOffScreenNotification;
- (void)_setUpFirstResponderBeforeBecomingVisible;
- (void)_setUpFirstResponder;
- (void)_orderOutAndCalcKeyWithCounter:(BOOL)arg1;
- (void)_orderOutAndCalcKeyWithCounter:(BOOL)arg1 stillVisible:(BOOL)arg2 docWindow:(id)arg3;
- (BOOL)_orderOutInProgress;
- (void)_setOrderOutInProgress:(BOOL)arg1;
- (void)_doOrderWindow:(long long)arg1 relativeTo:(long long)arg2 findKey:(BOOL)arg3 forCounter:(BOOL)arg4 force:(BOOL)arg5;
- (void)_doOrderWindow:(long long)arg1 relativeTo:(long long)arg2 findKey:(BOOL)arg3;
- (BOOL)_shouldParticipateInBatchOrdering:(long long)arg1;
- (void)orderWindow:(long long)arg1 relativeTo:(long long)arg2;
- (void)_justOrderOut;
- (void)orderFrontRegardless;
- (void)orderOut:(id)arg1;
- (void)orderBack:(id)arg1;
- (void)orderFront:(id)arg1;
- (void)_toggleOrderedFrontMost:(id)arg1;
- (BOOL)_toggleOrderedFrontMostWillOrderOut;
- (void)makeKeyAndOrderFront:(id)arg1;
- (void)_makeKeyRegardlessOfVisibility;
- (BOOL)becomesKeyOnlyIfNeeded;
- (void)center;
@property BOOL displaysWhenScreenProfileChanges;
- (void)_adjustWindowResolution;
- (int)_setCGColorSpace:(struct CGColorSpace *)arg1;
- (double)_backingStoreResolution;
- (int)_setBackingStoreResolution:(double)arg1;
- (void)_adjustDynamicDepthLimit;
- (int)_windowDepth;
- (void)_setWindowDepth:(int)arg1;
@property int depthLimit;
@property(readonly) BOOL hasDynamicDepthLimit;
- (void)setDynamicDepthLimit:(BOOL)arg1;
@property BOOL hidesOnDeactivate;
@property(getter=isMovable) BOOL movable;
- (void)_setModeDisablesServerSideDrag:(BOOL)arg1;
- (void)_updateWindowCanServerSideDrag;
@property(getter=isMovableByWindowBackground) BOOL movableByWindowBackground;
- (void)_setMovableByBottomBar:(BOOL)arg1;
- (BOOL)_movableByBottomBar;
- (BOOL)showsContentSeparatorForEdge:(unsigned long long)arg1;
- (void)setShowsContentSeparator:(BOOL)arg1 forEdge:(unsigned long long)arg2;
- (BOOL)autorecalculatesContentBorderThicknessForEdge:(unsigned long long)arg1;
- (void)setAutorecalculatesContentBorderThickness:(BOOL)arg1 forEdge:(unsigned long long)arg2;
- (double)contentBorderThicknessForEdge:(unsigned long long)arg1;
- (void)setContentBorderThickness:(double)arg1 forEdge:(unsigned long long)arg2;
- (id)contentInsetColor;
- (id)contentSeparatorColor;
@property(copy) NSColor *backgroundColor;
- (BOOL)_hasBackgroundColor;
- (id)_compositedBackground;
- (id)_generateCompositedBackground;
- (unsigned long long)_themeBackgroundStyle;
- (void)_invalidateCompositedBackground;
- (id)_scaledBackground;
- (void)_invalidateScaledBackground;
- (id)_generateScaledBackground;
- (BOOL)_viewIsInContentBorder:(id)arg1;
- (double)_bottomBarHeight;
- (double)_topBarHeight;
- (BOOL)_hasScaledBackground;
- (BOOL)_scalesBackgroundVertically;
- (BOOL)_scalesBackgroundHorizontally;
- (id)_gradientImage;
- (id)_texturePattern;
- (BOOL)_hasGradientBackground;
- (id)validRequestorForSendType:(id)arg1 returnType:(id)arg2;
- (BOOL)tryToPerform:(SEL)arg1 with:(id)arg2;
- (void)zoom:(id)arg1;
- (void)_saveUserFrame;
@property(readonly, getter=isZoomed) BOOL zoomed;
- (struct CGRect)_standardFrame;
- (void)deminiaturize:(id)arg1;
- (void)miniaturize:(id)arg1;
- (void)_miniturizeFromFullScreen;
- (BOOL)_canMiniaturize;
- (BOOL)_canMiniaturizeCheckingMask:(BOOL)arg1 forButtonEnabledState:(BOOL)arg2;
- (BOOL)_hasSiblingSpaceWhenFullScreenPrefersModal;
- (void)_setMiniaturized:(BOOL)arg1;
@property(readonly, getter=isMiniaturized) BOOL miniaturized;
@property(getter=isReleasedWhenClosed) BOOL releasedWhenClosed;
- (void)_closeForTermination;
- (BOOL)_shouldCloseForTermination;
- (void)close;
- (void)_close;
- (void)_finishClosingWindow;
- (void)quickLookWithEvent:(id)arg1;
- (void)quickLookPreviewItemsAtWindowLocation:(struct CGPoint)arg1;
- (void)quickLookPreviewItems:(id)arg1;
- (void)keyDown:(id)arg1;
- (BOOL)_performKeyEquivalentConditionally:(id)arg1;
- (BOOL)performKeyEquivalent:(id)arg1;
- (BOOL)_commonPerformKeyEquivalent:(id)arg1 conditionally:(BOOL)arg2;
- (void)rightMouseDown:(id)arg1;
- (void)_getRetainedLastFocusRingView:(id *)arg1 bleedRegion:(id *)arg2;
- (void)_setLastFocusRingView:(id)arg1 bleedRegion:(id)arg2;
- (id)_dirtyRegion;
- (void)_subtractFromNeedsDisplayRegion:(id)arg1;
- (id)_copyNeedsDisplayRegionInRect:(struct CGRect)arg1 validateSubtractedRegion:(BOOL)arg2;
- (void)_adjustNeedsDisplayRegionForNewFrame:(struct CGRect)arg1;
- (void)_setNeedsDisplayInRegion:(id)arg1;
- (void)_setNeedsDisplayInRect:(struct CGRect)arg1;
- (BOOL)_needsDisplayForEntireRect:(struct CGRect)arg1;
- (BOOL)_needsDisplayInRect:(struct CGRect)arg1;
- (void)_absorbDeferredNeedsDisplayRegion;
- (void)_setFrameNeedsDisplay:(BOOL)arg1;
- (void)_sendForcedWindowChangedKeyState;
- (void)_sendWindowChangedKeyStateIfNeeded;
- (void)_shake;
- (BOOL)_wantsSnapshotProxyWindowForOrderOutAnimation;
- (long long)_effectiveOrderOutAnimationTypeIfModal:(BOOL)arg1;
- (void)_setOrderOutAnimationType:(long long)arg1;
- (long long)_orderOutAnimationType;
- (long long)_effectiveOrderFrontAnimationTypeIfModal:(BOOL)arg1;
- (void)_setOrderFrontAnimationType:(long long)arg1;
- (long long)_orderFrontAnimationType;
- (long long)_effectiveAnimationBehaviorIfModal:(BOOL)arg1;
@property long long animationBehavior;
- (void)_setTransformForAnimation:(struct CGAffineTransform)arg1 anchorPoint:(struct CGPoint)arg2;
- (void)_enumerateAnimatedGlobalWindowsUsingBlock:(CDUnknownBlockType)arg1;
- (void)_removeGlobalWindowFromAnimationsWithWindowNumber:(unsigned int)arg1;
- (void)_addGlobalWindowToAnimationsWithWindowNumber:(unsigned int)arg1;
- (void)_moveOnscreen;
- (id)_moveOffscreen;
- (void)resignMainWindow;
- (void)becomeMainWindow;
- (BOOL)_allowsActiveInputContext;
- (BOOL)_allowsActiveInputContextDuringMenuTracking;
- (BOOL)_isKeyWindowIgnoringFocus;
- (BOOL)_isResigningKeyFocusOnly;
- (void)_resignKeyFocus;
- (void)_handleResignMainAppearanceEvent;
- (void)_handleResignKeyAppearanceEvent;
- (void)resignKeyWindow;
- (void)becomeKeyWindow;
- (void)makeMainWindow;
- (void)makeKeyWindow;
- (BOOL)_wouldBeSufficientlyUnclippedOnSpace:(unsigned long long)arg1;
- (BOOL)_isInSomeVisibleSpace;
@property(readonly) unsigned long long resizeFlags;
- (void)_hideMenu:(id)arg1;
- (void)toggleFullScreen:(id)arg1;
- (void)_updateWindowDockFeedbackAtRectEdges:(unsigned long long)arg1;
- (void)_scheduleShowingDockWindowFeedback;
- (void)_cancelShowingDockWindowFeedback;
- (void)_startShowingWindowDockingFeedback;
- (void)_makeSnappingInfo;
- (void)_internalHandleWindowMovedWithEvent:(id)arg1;
- (BOOL)_internalHandleAppKitDefinedEvent:(id)arg1;
- (void)_doClientSideDraggingWithEvent:(id)arg1;
- (struct CGRect)_frameFromMoveData:(id)arg1;
- (BOOL)_shouldDoClientSideDragging;
- (void)_attemptSnapFrameWithMoveData:(id)arg1 event:(id)arg2;
- (void)_makeCatchupAnimationWithMoveData:(id)arg1 catchupSize:(struct CGSize)arg2;
- (void)_setUnsnapCatchupAnimation:(id)arg1;
- (id)_unsnapCatchupAnimation;
- (BOOL)_shouldSnapForEvent:(id)arg1;
- (void)_sendWindowWillMoveNoteWithEvent:(id)arg1;
- (void)_sendWindowWillStartDragging;
- (void)_sendWindowDidEndDragging;
- (void)_endWindowMoveWithEvent:(id)arg1;
- (void)_startWindowMoveWithEvent:(id)arg1;
- (BOOL)_windowIsBeingMoved;
- (void)_addWindowDockingEventMonitorIfNeeded;
- (void)_removeWindowDockingEventMonitor;
- (void)_setWindowDockingEventMonitor:(id)arg1;
- (id)_windowDockingEventMonitor;
- (void)_setRectEdgesForDocking:(unsigned long long)arg1;
- (unsigned long long)_rectEdgesForDocking;
- (void)_showDockFeedbackWindowAtRectEdges:(unsigned long long)arg1;
- (id)_makeGhostFeedbackWindowWithFrame:(struct CGRect)arg1;
- (id)_makeGhostContentViewWithFrame:(struct CGRect)arg1;
- (void)_hideDockFeedbackWindow;
- (void)_setWindowDockFeedbackWindow:(id)arg1;
- (id)_windowDockFeedbackWindow;
- (void)_attemptToUndockWindowWithEvent:(id)arg1;
- (void)_attemptToDockWindowOnRectEdges:(unsigned long long)arg1;
- (void)_attemptToDockWindow;
- (void)_attemptToShowDockWindowFeedbackWithEvent:(id)arg1;
- (unsigned long long)_windowDockRectEdgesFromPoint:(struct CGPoint)arg1;
- (void)_windowMoved:(id)arg1;
- (void)_doDockingForWindowMovementWithEvent:(id)arg1;
- (BOOL)_shouldSnapWindowsClientSide;
- (BOOL)_shouldDockWindow;
- (id)_getPositionFromServer;
- (void)_updateFrameToScreenConstraints;
- (void)_displayProfileChanged;
- (BOOL)_updateInheritedColorSpaceAndDisplayIfChanged:(BOOL)arg1;
- (void)_displayResolutionChanged;
- (BOOL)_updateInheritedBackingScaleFactorAndDisplayIfChanged:(BOOL)arg1;
- (id)_displayChangedWithoutAdjusting;
- (id)_displayChanged;
- (id)_displayChangedSoAdjustWindows:(BOOL)arg1;
- (void)_displayChangedDepth;
- (id)_savedScreen;
- (void)_updateSavedScreen;
- (void)_adjustWindowToScreen;
- (void)_positionWindowOnBestScreen;
- (struct CGRect)_bestFrameForScreenBasedOnFrame:(struct CGRect)arg1;
- (unsigned long long)_autoPositionMask;
- (void)_setAutoPositionMask:(unsigned long long)arg1;
- (void)_windowMovedToRect:(struct CGRect)arg1;
- (void)_setFrameAfterMove:(struct CGRect)arg1;
- (void)_setFrameOriginForDockMove:(struct CGPoint)arg1;
- (void)_moveChildrenByOffset:(struct CGSize)arg1;
- (void)_moveByOffset:(struct CGSize)arg1;
- (void)_screenChanged:(id)arg1;
- (void)setMouseConfinementRect:(struct CGRect)arg1;
- (struct CGRect)mouseConfinementRect;
- (void)_setNeedsZoom:(id)arg1;
- (void)_windowExposed:(id)arg1;
- (void)_handleWindowShouldCloseEvent:(id)arg1;
- (BOOL)_isRunningADocModalAttachedSheet;
- (BOOL)_tryWindowDragWithEvent:(id)arg1;
- (void)_startWindowDragWithEvent:(id)arg1 options:(unsigned long long)arg2 animate:(BOOL)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)_startWindowDragWithEvent:(id)arg1 options:(unsigned long long)arg2 animate:(BOOL)arg3;
- (void)_startWindowDragWithEvent:(id)arg1 animate:(BOOL)arg2;
- (void)_showDragBeginFeedback;
- (void)_orderForwardWithEvent:(id)arg1;
- (BOOL)_allowsMoving;
- (BOOL)_deferQuickLookIfPossible;
- (void)_setDisableInteraction:(BOOL)arg1;
- (void)_dragWindowRelativeToMouseDown:(struct CGPoint)arg1;
- (void)mouseDown:(id)arg1;
- (BOOL)_shouldStartWindowDragForEvent:(id)arg1;
- (void)_beginWindowDragWithEvent:(id)arg1 options:(unsigned long long)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)_beginWindowDragWithEvent:(id)arg1 options:(unsigned long long)arg2;
- (void)performWindowDragWithEvent:(id)arg1;
- (void)_dragWindowRelativeToMouseDown:(struct CGPoint)arg1 options:(unsigned long long)arg2;
- (long long)_resizeWeighting;
- (void)_setResizeWeighting:(long long)arg1;
- (void)_updateButtonsForFullScreen;
- (BOOL)showsFullScreenButton;
- (void)lockButtonClicked:(id)arg1;
- (BOOL)showsLockButton;
- (void)setShowsLockButton:(BOOL)arg1;
@property BOOL showsToolbarButton;
- (void)_toolbarFrameSizeChanged:(id)arg1 oldSize:(struct CGSize)arg2;
- (void)_hideToolbar:(id)arg1 animate:(BOOL)arg2;
- (void)_showToolbar:(id)arg1 animate:(BOOL)arg2;
- (id)_windowForToolbar;
- (BOOL)_hasToolbar;
@property(retain) NSToolbar *toolbar;
- (BOOL)_toolbarIsShown;
- (id)_toolbarView;
- (void)_toolbarPillButtonClicked:(id)arg1;
- (BOOL)_toolbarButtonIsClickable;
- (void)_setNextToolbarSizeMode:(id)arg1;
- (void)_setNextToolbarDisplayMode:(id)arg1;
- (void)_setPreviousToolbarSizeAndDisplayMode:(id)arg1;
- (void)_setNextToolbarSizeAndDisplayMode:(id)arg1;
- (void)_toggleToolbarConfigPanel:(id)arg1;
- (void)toggleUsingSmallToolbarIcons:(id)arg1;
- (void)changeToolBarDisplayModeToDisplayMode:(unsigned long long)arg1;
- (void)changeToolbarDisplayModeToNumber:(id)arg1;
- (void)changeToolbarDisplayMode:(id)arg1;
- (void)runToolbarCustomizationPalette:(id)arg1;
- (void)runToolbarConfigurationPalette:(id)arg1;
- (void)toggleToolbarShown:(id)arg1;
- (void)hideToolbar:(id)arg1;
- (void)showToolbar:(id)arg1;
- (void)_performToggleToolbarShown:(id)arg1;
- (void)_setKeyViewRedirectionDisabled:(BOOL)arg1;
- (BOOL)_keyViewRedirectionDisabled;
- (void)_setKeyViewGroupBoundaryNeedsRecalc:(BOOL)arg1;
- (void)_setKeyViewLoopNeedsRecalc:(BOOL)arg1;
- (void)_recalculateKeyViewLoopIfNeeded;
- (void)recalculateKeyViewLoop;
- (BOOL)_shouldIncludeTitlebarAccessoryViewsInKeyViewLoop;
@property BOOL autorecalculatesKeyViewLoop;
- (void)_toggleSelectAnyValidResponderOverride;
- (BOOL)_allowsAnyValidResponder;
- (void)_clearAnyValidResponderOverride;
- (BOOL)_selectAnyValidResponderOverride;
- (void)_drawKeyboardUILoopStartingAtResponder:(id)arg1 validOnly:(BOOL)arg2;
- (void)_drawKeyboardUIIndicationForView:(id)arg1 debuggingIndex:(id)arg2;
- (void)enableKeyEquivalentForDefaultButtonCell;
- (void)disableKeyEquivalentForDefaultButtonCell;
- (void)_enableEnablingKeyEquivalentForDefaultButtonCell;
- (void)_disableEnablingKeyEquivalentForDefaultButtonCell;
@property(retain) NSButtonCell *defaultButtonCell;
- (void)_setDefaultButtonCell:(id)arg1;
- (void)_verifyDefaultButtonCell:(BOOL)arg1;
- (void)_verifyDefaultButtonCellIfDirty;
- (void)_markDefaultButtonCellDirty;
- (BOOL)performMnemonic:(id)arg1;
- (void)setKeyView:(id)arg1;
@property __weak NSView *initialFirstResponder;
- (void)_setKeyViewSelectionDirection:(unsigned long long)arg1;
@property(readonly) unsigned long long keyViewSelectionDirection;
- (void)_selectFirstKeyView;
- (id)_findFirstKeyViewInDirection:(unsigned long long)arg1 forKeyLoopGroupingView:(id)arg2;
- (id)_findKeyLoopGroupingViewFollowingKeyLoopGroupingView:(id)arg1 direction:(unsigned long long)arg2;
- (void)selectPreviousKeyView:(id)arg1;
- (void)selectNextKeyView:(id)arg1;
- (void)selectKeyViewPrecedingView:(id)arg1;
- (void)selectKeyViewFollowingView:(id)arg1;
- (BOOL)_keyViewLoopsMayCrossWindows;
- (void)_cycleDrawersBackwards:(id)arg1;
- (void)_cycleDrawers:(id)arg1;
- (void)_cycleWindowsBackwards:(id)arg1;
- (void)_cycleWindows:(id)arg1;
- (void)_drawKeyboardUILoopIfNeededForEvent:(id)arg1;
- (BOOL)_wasReshapingEnabled;
- (void)_setWasReshapingEnabled:(BOOL)arg1;
- (BOOL)_wasCGOrderingEnabled;
- (void)_setWasCGOrderingEnabled:(BOOL)arg1;
- (BOOL)_allowsOrdering;
- (void)_setFirstResponder:(id)arg1;
- (id)_validateFirstResponder:(id)arg1;
@property(readonly) __weak NSResponder *firstResponder;
- (id)_oldFirstResponderBeforeBecoming;
- (id)_newFirstResponderAfterResigning;
- (BOOL)makeFirstResponder:(id)arg1;
- (BOOL)_realMakeFirstResponder:(id)arg1;
- (BOOL)_secondaryKeyMakeFirstResponder:(id)arg1;
- (BOOL)_makeParentWindowHaveFirstResponder:(id)arg1;
- (void)_saveFirstResponder;
- (void)_unlockFirstResponder;
- (void)_lockFirstResponder;
- (id)_borderView;
- (void)update;
- (BOOL)isAutodisplay;
- (void)setAutodisplay:(BOOL)arg1;
- (void)display;
- (void)useOptimizedDrawing:(BOOL)arg1;
- (BOOL)_isImageCache;
- (void)displayIfNeeded;
@property BOOL viewsNeedDisplay;
- (BOOL)_postingDisabled;
- (void)_enablePosting;
- (void)_disablePosting;
- (void)_resetPostingCounts;
- (BOOL)_delayedWindowDisplayEnabled;
- (void)_enableDelayedWindowDisplay;
- (void)_disableDelayedWindowDisplay;
- (void)_forceFlushWindowToScreen;
- (void)disableScreenUpdatesUntilFlush;
- (void)flushWindowIfNeeded;
- (BOOL)_animationShouldCallFlushWindow;
- (void)_setShadowParameters;
- (void)_setShadowActiveState;
- (id)shadowParameters;
- (unsigned long long)shadowOptionsForActiveAppearance:(BOOL)arg1;
- (unsigned long long)shadowOptions;
- (void)flushWindow;
- (float)_backdropBleedAmount;
- (void)_flushBackdropViews;
- (void)_updateBackdropViewsIfNeeded;
- (BOOL)_hasAtLeastOneBackdropView;
- (void)_clearBackingStoreForBackdropViews;
- (void)_unregisterBackdropView:(id)arg1;
- (void)_registerBackdropView:(id)arg1;
- (void)_setRegisteredBackdropViews:(id)arg1;
- (id)_registeredBackdropViews;
- (BOOL)isFlushWindowDisabled;
- (void)enableFlushWindow;
- (void)disableFlushWindow;
- (void)_resetDisableCounts;
@property unsigned long long styleMask;
- (void)_addKnownSubview:(id)arg1;
- (id)_themeFrame;
- (BOOL)_isDocWindow;
@property struct CGSize contentAspectRatio;
@property struct CGSize contentResizeIncrements;
@property struct CGSize aspectRatio;
@property struct CGSize resizeIncrements;
@property(readonly) struct CGRect frame;
- (void)_setFrame:(struct CGRect)arg1;
- (void)_setFrame:(struct CGRect)arg1 updateBorderViewSize:(BOOL)arg2;
- (void)_updateManagedDisplay;
- (void)_resolveAnySpaceMisassignmentByUpdatingManagedDisplay;
- (BOOL)_shouldDoLayerPerformanceUpdates;
- (void)_postWindowDidChangeBackingPropertiesAndDisplayWindowForPreviousBackingScaleFactor:(double)arg1 previousColorSpace:(id)arg2;
- (BOOL)_locationTemporary;
- (void)_setLocationTemporary:(BOOL)arg1;
- (struct CGPoint)frameTopLeftPoint;
- (void)setFrameTopLeftPoint:(struct CGPoint)arg1;
- (struct CGPoint)frameOrigin;
- (void)setFrameOrigin:(struct CGPoint)arg1;
- (BOOL)_shouldIgnoreSetFrameOrigin;
- (void)_handleMouseDraggedEvent:(id)arg1;
- (BOOL)allowsFontSmoothing;
- (void)_setContentRect:(struct CGRect)arg1;
- (void)setContentSize:(struct CGSize)arg1;
- (BOOL)_contentSizeRespectsLayoutAnchors;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (void)setFrame:(struct CGRect)arg1 display:(BOOL)arg2;
- (BOOL)_frameIsCurrentlyAnimating;
- (void)_setFrame:(struct CGRect)arg1 display:(BOOL)arg2 allowImplicitAnimation:(BOOL)arg3 stashSize:(BOOL)arg4;
- (struct CGPoint)topLeftPoint;
- (void)setFrame:(struct CGRect)arg1 display:(BOOL)arg2 animate:(BOOL)arg3;
- (double)animationResizeTime:(struct CGRect)arg1;
- (void)_setFrameCommon:(struct CGRect)arg1 display:(BOOL)arg2 stashSize:(BOOL)arg3;
- (void)_updateSettingsSendingScreenChangeNotificationIfNeeded:(BOOL)arg1;
- (void)_cornerMaskChanged;
- (void)_cgsPlaceWindow:(struct CGRect)arg1;
- (void)_cgsMoveWindow:(struct CGRect)arg1 moveGroup:(BOOL)arg2;
- (void)_adjustChildWindowMovementOffsets;
- (void)_cgsWindowRelativeMoveChildrenWithGroupWithDelta:(struct CGPoint)arg1;
- (void)_startClientSideMove;
- (void)_stopClientSideMove;
- (void)_oldPlaceWindow:(struct CGRect)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)addObserver:(id)arg1 forKeyPath:(id)arg2 options:(unsigned long long)arg3 context:(void *)arg4;
- (void)_updateContentLayoutGuideFrame;
@property(readonly) id contentLayoutGuide;
@property(readonly) struct CGRect contentLayoutRect;
- (BOOL)_borderViewCanAddWindowTabs;
- (void)setTitlebarBlurFiltersDisabled:(BOOL)arg1;
- (BOOL)titlebarBlurFiltersDisabled;
- (void)_setHasActiveAppearance:(BOOL)arg1;
- (id)_titlebarBackdropGroupName;
- (void)removeTitlebarAccessoryViewControllerAtIndex:(long long)arg1;
- (void)insertTitlebarAccessoryViewController:(id)arg1 atIndex:(long long)arg2;
- (void)addTitlebarAccessoryViewController:(id)arg1;
@property(copy) NSArray *titlebarAccessoryViewControllers; // @dynamic titlebarAccessoryViewControllers;
- (BOOL)_supportsTitlebarAccessoryViewControllers;
- (id)_titlebarContainerView;
- (id)titlebarViewController;
- (void)removeUnderTitlebarView:(id)arg1 withAssociatedWithView:(id)arg2;
- (void)addUnderTitlebarView:(id)arg1 withAssociatedWithView:(id)arg2;
- (BOOL)_canAddUnderTitlebarViews;
- (struct CGRect)dragRectForFrameRect:(struct CGRect)arg1;
- (BOOL)_isDraggable;
- (id)_bindingAdaptor;
- (void)_setBindingAdaptor:(id)arg1;
- (void)endEditingFor:(id)arg1;
- (id)fieldEditor:(BOOL)arg1 forObject:(id)arg2;
- (void)_unlockViewHierarchyForDrawing;
- (void)_lockViewHierarchyForDrawingWithExceptionHandler:(BOOL)arg1;
- (void)_lockViewHierarchyForDrawing;
- (void)_unlockViewHierarchyForModification;
- (void)_lockViewHierarchyForModificationWithExceptionHandler:(BOOL)arg1;
- (void)_lockViewHierarchyForModification;
- (BOOL)_tryLockViewHierarchyForModificationWithHandler:(BOOL)arg1;
- (BOOL)_tryLockViewHierarchyForModification;
- (id)_copyAcquiredViewHierarchyLock;
- (long long)_cachedGlobalWindowNum;
- (long long)_globalWindowNum;
- (long long)_realWindowNumber;
@property(readonly) long long windowNumber;
- (id)standardWindowButton:(unsigned long long)arg1;
- (id)_findOrMakeStandardWindowButton:(unsigned long long)arg1;
- (void)addDocumentIconButton;
@property __weak id <NSWindowDelegate> delegate;
@property(retain) NSView *contentView;
- (void)_bindTitleToContentViewController;
- (void)_unbindTitleIfNecessary;
- (struct CGRect)_customTitleFrame;
- (struct CGRect)_titleFrameForEditingWithProposedFrame:(struct CGRect)arg1;
- (id)_customTitleCell;
- (BOOL)_isTitleHidden;
- (BOOL)_hasCornerMask;
- (id)_cornerMaskOrNil;
- (id)_cornerMask;
- (BOOL)_shouldGetCornerMaskFromVisualEffectView;
- (BOOL)_shouldRoundCornersForSurface;
- (void)_updateTitleTextField;
- (id)_calcAndSetFilenameTitle;
- (void)_invalidateDocumentIcon;
- (void)_dosetTitle:(id)arg1 andDefeatWrap:(BOOL)arg2;
- (void)setTitleWithRepresentedFilename:(id)arg1;
@property(copy) NSString *representedFilename;
@property(copy) NSURL *representedURL;
- (void)_setRepresentedURL:(id)arg1;
@property(copy) NSString *title;
- (id)_displayName;
- (BOOL)_titleIsRepresentedFilename;
@property(getter=isExcludedFromWindowsMenu) BOOL excludedFromWindowsMenu;
- (void)_addToWindowsMenuIfNecessary;
- (BOOL)_allowsCompositing;
- (unsigned long long)_backingType;
@property unsigned long long backingType;
- (void)_setWindowDidExistAtLaunch:(BOOL)arg1;
- (BOOL)_windowDidExistAtLaunch;
- (void)_commonAwake;
@property(readonly, copy) NSString *description;
- (BOOL)_allowsSnapping;
- (BOOL)_canBeSnappingTarget;
@property(readonly) __weak CAContext *_contextForLayerHosting;
@property(readonly, getter=_isFunctionRowWindow) BOOL _functionRowWindow;
- (BOOL)_allowedInDashboardSpaceWithCollectionBehavior:(unsigned long long)arg1;
- (BOOL)_allowedInOtherAppsFullScreenSpaceWithCollectionBehavior:(unsigned long long)arg1;
- (BOOL)_windowMoveDisabled;
- (void)_setWindowMoveDisabled:(BOOL)arg1;
- (void)_setWindowTag;
- (id)_viewDetaching:(id)arg1;
- (void)_lighterViewDetaching:(id)arg1;
- (void)_viewAttaching:(id)arg1;
- (void)_removeAsSavedFirstResponder:(id)arg1;
- (void)_resetFirstResponder;
- (void)_setWindowNumber:(long long)arg1;
- (BOOL)_wantsUserAttention;
- (void)_setShowingModalFrame:(BOOL)arg1;
- (BOOL)_wantToBeModal;
- (void)redo:(id)arg1;
- (void)undo:(id)arg1;
- (id)undoManager;
- (id)_getActiveUndoManager;
- (id)_getUndoManager:(BOOL)arg1;
@property(readonly) unsigned long long occlusionState;
- (void)_setOcclusionStateIsVisible:(BOOL)arg1;
@property __weak NSWindowController *windowController;
- (BOOL)_isDeallocating;
- (BOOL)_tryRetain;
- (unsigned long long)retainCount;
- (oneway void)release;
- (id)retain;
- (void)dealloc;
- (void)_enableScreenUpdatesIfNeeded;
- (void)_cancelPerformSelectors;
- (BOOL)_windowDying;
- (BOOL)_canAdjustSizeForScreensHaveSeparateSpacesIfFillingSecondaryScreen;
- (struct CGSize)minFrameSizeForMinContentSize:(struct CGSize)arg1 styleMask:(unsigned long long)arg2;
- (struct CGRect)contentRectForFrameRect:(struct CGRect)arg1;
- (struct CGRect)contentRectForFrameRect:(struct CGRect)arg1 styleMask:(unsigned long long)arg2;
- (struct CGRect)frameRectForContentRect:(struct CGRect)arg1;
- (struct CGRect)frameRectForContentRect:(struct CGRect)arg1 styleMask:(unsigned long long)arg2;
- (struct CGRect)_pixelRectInPoints:(struct CGRect)arg1;
- (struct CGRect)_pointRectInPixels:(struct CGRect)arg1;
- (BOOL)_isEffectivelyTitled;
- (BOOL)_hasMetalSheetEffect;
- (unsigned long long)sheetBehavior;
- (void)_setTexturedBackground:(BOOL)arg1;
- (void)_finishedMakingConnections;
- (BOOL)_ownerOnly;
- (BOOL)_presenterOnly;
- (id)_initFromGlobalWindow:(long long)arg1 inRect:(const struct CGRect *)arg2;
- (id)_initFromGlobalWindow:(long long)arg1 inRect:(const struct CGRect *)arg2 styleMask:(unsigned long long)arg3;
- (id)init;
- (id)initWithContentRect:(struct CGRect)arg1 styleMask:(unsigned long long)arg2 backing:(unsigned long long)arg3 defer:(BOOL)arg4;
- (id)initWithContentRect:(struct CGRect)arg1 styleMask:(unsigned long long)arg2 backing:(unsigned long long)arg3 defer:(BOOL)arg4 screen:(id)arg5;
- (id)_initContent:(const struct CGRect *)arg1 styleMask:(unsigned long long)arg2 backing:(unsigned long long)arg3 defer:(BOOL)arg4 contentView:(id)arg5;
- (BOOL)_isNonactivatingPanel;
- (void)_setNonactivatingPanel:(BOOL)arg1;
- (int)_semanticContext;
- (BOOL)_hasDarkShadow;
- (BOOL)_isDarkWindow;
- (BOOL)_usesCustomDrawing;
- (BOOL)_isUtilityWindow;
- (void)_setUtilityWindow:(BOOL)arg1;
- (BOOL)_isViewScrolling;
- (void)_didEndViewScrolling;
- (void)_willBeginViewScrolling;
- (id)_creationCallStackSymbols;
- (void)_borderViewChanged;
- (void)_commonInitFrame:(struct CGRect)arg1 styleMask:(unsigned long long)arg2 backing:(unsigned long long)arg3 defer:(BOOL)arg4;
- (id)_initContent:(const struct CGRect *)arg1 styleMask:(unsigned long long)arg2 backing:(unsigned long long)arg3 defer:(BOOL)arg4 screen:(id)arg5 contentView:(id)arg6;
- (void)_setWantsToBeOnMainScreen:(BOOL)arg1;
- (void)_fromScreenCommonCode:(id)arg1;
- (id)_aux;
- (void)_automateLiveResize;
- (void)_synthesizeEventsForLiveResize;
- (void)_markEndOfLiveResizeForPerformanceMeasurement;
- (void)_markStartOfLiveResizeForPerformanceMeasurement;
- (id)_liveResizeOperation;
- (void)_setStartingSizeAndPosition;
- (void)_setTemporaryContentView:(id)arg1;
@property(retain) NSResponder *_beforeTabPickerResponder;
- (void)_toggleTabOverview:(id)arg1;
- (void)_toggleTabOverview:(id)arg1 animated:(BOOL)arg2;
- (void)_addTabbedWindow:(id)arg1 ordered:(long long)arg2;
- (void)_doTabbedWindowDidChangeToolbar;
- (void)performCloseOtherTabs:(id)arg1;
- (id)_tabbedWindows;
- (void)windowDidBecomeTabbed;
- (void)_toggleTabBar:(id)arg1;
- (void)_ensureStackControllerExists;
- (void)_mergeAllWindows:(id)arg1;
- (void)_moveTabToNewWindow:(id)arg1;
- (void)unpinTab:(id)arg1;
- (void)pinTab:(id)arg1;
- (void)_selectPreviousTab:(id)arg1;
- (void)_selectNextTab:(id)arg1;
- (void)orderOutTabbedWindowGroup:(id)arg1;
- (void)_doTabbedWindowWillExitVersionsEditor;
- (void)_doTabbedWindowWillEnterVersionsEditor;
- (BOOL)_tabbedWindowsHandleEnterFullScreen;
- (void)_moveWindowToSpace:(unsigned long long)arg1;
- (void)_tabbedWindowsDidExitFullScreen;
- (void)_tabbedWindowsDidEnterFullScreen;
- (void)_tabbedWindowsWillEnterFullScreen;
- (id)_currentlySelectedTabbedWindow;
- (id)_windowForLayoutEncoding;
- (BOOL)_isPerformingRestoration;
- (void)_setIsPerformingRestoration:(BOOL)arg1;
- (void)_restoreTabbedWindowStateWithCoder:(id)arg1;
- (void)_encodeTabbedWindowRestorableStateWithCoder:(id)arg1;
- (void)_tabsFinishDeminiaturizeFromDock;
- (BOOL)_attemptToCloseAllTabs:(id)arg1;
- (void)_doNonVisibleTabDeminimize;
- (BOOL)_prepareTabbedWindowDeminimize;
- (void)_doNonVisibleTabMinimize;
- (BOOL)_prepareTabbedWindowMinimize;
- (void)_setTemporarilyIgnoresMoves:(BOOL)arg1;
- (BOOL)_temporarilyIgnoreMoves;
- (BOOL)_tabbingPerformKeyEquivalent:(id)arg1;
- (BOOL)_eventIsOldSelectNextPreviousTabKeyEquivalent:(id)arg1 direction:(char *)arg2;
- (void)performCloseTabbedWindowGroup:(id)arg1;
- (BOOL)_validateTabUserInterfaceItem:(id)arg1 withResult:(BOOL)arg2;
- (BOOL)_validateShowAllTabsMenuItem:(id)arg1;
- (BOOL)_validateToggleTabBarItem:(id)arg1;
- (BOOL)_nextResponderChainValidateUIItem:(id)arg1 withResult:(BOOL)arg2;
- (BOOL)_canMergeWindows;
- (BOOL)_canTabMergeWithIdentifier:(id)arg1;
- (BOOL)_canTabWithIdentifier:(id)arg1;
- (BOOL)isTabbed;
- (BOOL)_canCloseOtherTabs;
- (BOOL)_canMoveTabToNewWindow;
- (BOOL)_canSelectNextOrPreviousTab;
- (void)_doTabbedWindowSyncToolbar;
- (void)_doWindowTabOrderOut;
- (void)_doWindowTabOrderAbove:(id)arg1;
- (void)_doTabbedWindowMadeKey;
- (void)_setIsInHiddenWindowTab:(BOOL)arg1;
- (BOOL)_isInHiddenWindowTab;
- (void)_doTabbedWindowOrderFront;
- (void)_doTabbedWindowCleanupForOrderOut;
- (void)_doWindowTabCleanupForStyleMaskChange;
- (BOOL)_willBecomeTabbedWithOtherWindows;
- (BOOL)_tabBarIsVisible;
- (BOOL)_isTabbedWithOtherWindows;
- (struct CGRect)_tabRect;
- (void)_moveToModalStackController:(id)arg1;
- (BOOL)_doTabbedWindowOrderInWithWasVisible:(BOOL)arg1 mode:(long long)arg2;
- (id)_nextTabbedWindowToSelect;
- (void)_setIgnoreWindowStackController:(BOOL)arg1;
- (BOOL)_ignoreWindowStackController;
- (BOOL)_shouldJoinTabbingStackOnOrderIn;
- (void)_doWindowTabSetupAttemptingToJoinExistingStack:(BOOL)arg1 makeIfNeeded:(BOOL)arg2;
- (void)_beginNextQueuedSheetInGroupIfNecessary;
- (void)_makeTabStackActive;
- (BOOL)_implicitlyAllowsWindowTabbing;
- (void)_makeNewWindowInTab;
- (id)_fullScreenModalStackController;
- (BOOL)_isFullScreenModal;
- (BOOL)_supportsNewTabButton;
- (id)_startingWindowForSendAction:(SEL)arg1;
- (BOOL)_supportsTabbing;
- (BOOL)_canAutoParticipateInWindowTabs;
- (void)_doTabbedWindowSyncTitleToTabBar;
@property(readonly, retain) NSTabBarItem *_tabBarItem;
@property(readonly) NSWindowTab *tab; // @dynamic tab;
- (BOOL)_hasTabBarItem;
@property(setter=_setWindowStackController:) NSWindowStackController *_windowStackController;
- (id)_tabGroup;
@property(retain, setter=_setTabBarAccessoryViewController:) NSTitlebarAccessoryViewController *_tabBarAccessoryViewController;
@property long long tabbingMode; // @dynamic tabbingMode;
@property(copy) NSString *tabbingIdentifier; // @dynamic tabbingIdentifier;
- (id)_storedTabbingIdentifier;
- (id)_titlebarDisplayIdentifier;
@property(readonly, getter=isTabOverviewVisible) BOOL tabOverviewVisible; // @dynamic tabOverviewVisible;
- (void)setTabOverviewVisible:(BOOL)arg1;
- (void)_recursiveResetTrackingAreasToPending;
- (void)_updateTrackingAreasDueToEndScrolling;
- (void)_synchronizeConfigurationForTrackingArea:(id)arg1;
- (void)_moveTrackingArea:(id)arg1 toRect:(struct CGRect)arg2;
- (void)_setTrackingAreasDirty;
- (void)_enableTrackingArea:(id)arg1;
- (void)_disableTrackingArea:(id)arg1;
- (BOOL)_handleTrackingRectEnterExitEvent:(id)arg1;
- (BOOL)_containsTrackingRect:(long long)arg1;
- (void)_enableTrackingRect:(long long)arg1;
- (void)_disableTrackingRect:(long long)arg1;
- (void)_discardTrackingRect:(long long)arg1;
- (void)_discardTrackingRects:(long long *)arg1 count:(long long)arg2;
- (long long)_setTrackingRect:(struct CGRect)arg1 inside:(BOOL)arg2 owner:(id)arg3 userData:(void *)arg4;
- (long long)_setTrackingRect:(struct CGRect)arg1 inside:(BOOL)arg2 owner:(id)arg3 userData:(void *)arg4 useTrackingNum:(long long)arg5;
- (void)_setTrackingRects:(struct CGRect *)arg1 insideList:(char *)arg2 owner:(id)arg3 userDataList:(void **)arg4 trackingNums:(long long *)arg5 count:(long long)arg6;
- (CDStruct_602775a4 *)_setTrackingRect:(struct CGRect)arg1 inside:(BOOL)arg2 owner:(id)arg3 userData:(void *)arg4 useTrackingNum:(long long)arg5 install:(BOOL)arg6;
- (void)_deactivateTrackingRectsForApplicationDeactivation;
- (void)_activateTrackingRectsForApplicationActivation;
- (void)_clearTrackingRects;
- (void)_setTrackingRects;
- (long long)_trackingAreaIDForTrackingArea:(id)arg1;
- (void)_resetClipForTrackingRect:(long long)arg1;
- (void)_setEventMask:(unsigned long long)arg1 forTrackingRect:(long long)arg2;
- (long long)_nextTrackingNum;
- (void)_removeTrackingRects:(long long *)arg1 count:(long long)arg2;
- (void)_removeTrackingRect:(long long)arg1;
- (BOOL)_didInstallTrackingRect:(struct CGRect)arg1 assumeInside:(BOOL)arg2 userData:(void *)arg3 trackingNum:(long long)arg4;
- (void)_verifyTrackingRects;
- (void)_updateCursorRectsDueToResigningKey;
- (void)_updateCursorRectsDueToBecomingKey;
- (void)_updateCursorRectsDueToBecomingVisible;
- (void)GDBDumpCursorRects;
- (void)cursorUpdate:(id)arg1;
- (void)_setCursorForMouseLocation:(struct CGPoint)arg1;
- (void)_discardCursorRect:(long long)arg1;
- (void)_setCursorRect:(struct CGRect)arg1 index:(long long)arg2;
- (id)_findCursorForView:(id)arg1;
- (void)_deallocCursorRects;
- (void)_markCursorRectsForRemovedView:(id)arg1;
- (id)_discardCursorRectsForView:(id)arg1;
- (void)resetCursorRects;
- (BOOL)_shouldShowCursorRects;
- (void)setAllowsCursorRectsWhenInactive:(BOOL)arg1;
- (BOOL)allowsCursorRectsWhenInactive;
- (BOOL)_shouldResetCursorRects;
- (void)_viewDidChangeGeometryInWindow:(id)arg1;
- (void)invalidateCursorRectsForView:(id)arg1;
- (void)_invalidateCursorRectsForView:(id)arg1 force:(BOOL)arg2;
- (void)_invalidateCursorRectsForViewsWithNoTrackingAreas;
- (void)_postInvalidCursorRects;
- (void)discardCursorRects;
- (BOOL)areCursorRectsEnabled;
- (void)enableCursorRects;
- (void)disableCursorRects;
- (BOOL)_hasCursorRects;
- (BOOL)_hasCursorRectsForView:(id)arg1;
- (BOOL)_removeCursorRect:(struct CGRect)arg1 cursor:(id)arg2 forView:(id)arg3;
- (BOOL)_addCursorRect:(struct CGRect)arg1 cursor:(id)arg2 forView:(id)arg3;
- (id)openDrawers;
@property(readonly, copy) NSArray *drawers;
- (void)_setVisibleWithoutLoginForAllDrawers;
- (void)_changeAllDrawersFirstResponder;
- (void)_changeAllDrawersMainState;
- (void)_changeAllDrawersKeyState;
- (id)_orderedDrawerAndWindowKeyLoopGroupingViews;
- (id)_openDrawers;
- (void)_cycleDrawersReversed:(BOOL)arg1;
- (void)_setLevelForAllDrawers;
- (void)_endLiveResizeForAllDrawers;
- (void)_startLiveResizeForAllDrawers;
- (void)_resetAllDrawersPostingCounts;
- (void)_resetAllDrawersDisableCounts;
- (void)_registerAllDrawersForDraggedTypesIfNeeded;
- (void)_removeAllDrawersImmediately:(BOOL)arg1;
- (struct CGSize)_minSizeForDrawers;
- (struct CGSize)_minContentSizeForDrawers;
- (struct CGRect)_standardFrameForDrawersInRect:(struct CGRect)arg1;
- (void)_sizeAllDrawersWithRect:(struct CGRect)arg1;
- (void)_sizeAllDrawers;
- (void)_positionAllDrawers;
- (void)_displayAllDrawersIfNeeded;
- (void)_moveAllDrawersByOffset:(struct CGSize)arg1;
- (void)_unhideAllDrawers;
- (void)_hideAllDrawers;
- (id)NS_touchBarProviders;
- (id)NS_touchBarProvidersKeyPaths;
- (id)_eventFirstResponderChainDescription;
- (void)_setLastDragRegion:(void *)arg1;
- (id)_lastDragRegionData;
- (BOOL)_shouldSuppressRolloversForSegmentedCellInView:(id)arg1;
- (BOOL)_shouldUseTexturedAppearanceForSegmentedCellInView:(id)arg1;
- (BOOL)_topmostDocWrapsCarbonWindow;
- (BOOL)_isSheetOnWindowWithWindowNumber:(long long)arg1;
- (BOOL)_isSheetOnModalWindow;
- (void)_unhideSheet;
- (void)_hideSheet:(BOOL)arg1;
- (struct CGPoint)_collapsedOrigin;
- (void)_stashCollapsedOrigin:(struct CGPoint)arg1;
- (struct CGPoint)_stashedOrigin;
- (void)_stashOrigin:(struct CGPoint)arg1;
- (void)_orderOutRelativeToWindow:(id)arg1;
- (void)_orderFrontRelativeToWindow:(id)arg1;
- (struct CGRect)_positionSheet:(id)arg1 constrained:(BOOL)arg2 andDisplay:(BOOL)arg3;
- (struct CGRect)_adjustFrame:(struct CGRect)arg1 constrained:(BOOL)arg2 forSheet:(id)arg3 positioningFrame:(struct CGRect *)arg4;
- (double)_xOffsetForSheetFrame:(struct CGRect)arg1 inParentFrame:(struct CGRect)arg2;
- (struct CGRect)_centerSheetFrame:(struct CGRect)arg1 inParentFrame:(struct CGRect)arg2;
- (struct CGRect)_keepOnScreenSheetFrame:(struct CGRect)arg1;
- (void)_positionSheetsConstrained:(BOOL)arg1 andDisplay:(BOOL)arg2;
- (struct CGRect)startRectForSheet:(id)arg1;
- (void)_adjustSheetEffect;
- (void)_adjustEffectForSheet:(id)arg1;
- (double)_sheetEffectInset;
- (void *)_sheetEffect;
- (void)_setSheetParent:(id)arg1;
- (void)_setDocumentWindow:(id)arg1;
- (id)_documentWindow;
- (id)_attachedSheet;
- (void)_detachSheetWindow;
- (void)_detachSheetWindow:(id)arg1;
- (void)_attachSheetWindow:(id)arg1;
- (void)_reparentSheetsToSelfOnFullScreenExit;
- (id)_windowForSheetMovementAndOrderingGroups;
- (void)_moveSheetByItself:(id)arg1 delta:(struct CGPoint)arg2;
- (BOOL)_isSheet;
- (void)_setSheet:(BOOL)arg1;
- (void)_setDocModal:(BOOL)arg1;
- (BOOL)_isDocModal;
- (BOOL)_runningDocModal;
- (void)_resetSplitViewUserPreferredThicknessFromSetAlignmentFrames;
- (id)_responderDebugDescription;
- (void)_updateStructuralRegionsOnNextDisplayCycle;
- (void)_postWindowNeedsDisplayUnlessPostingDisabled;
- (void)_postWindowNeedsLayoutUnlessPostingDisabled;
- (void)_postWindowNeedsUpdateConstraintsUnlessPostingDisabled;
- (void)_evilHackToClearlastLeftHitInWindow;
- (void)_resumeUIHeartBeatingInView:(id)arg1;
- (void)_pauseUIHeartBeatingInView:(id)arg1;
- (void)_encodeWindowLayoutsByScreenLayoutWithCoder:(id)arg1;
- (void)_restoreWindowLayoutsByScreenLayoutWithCoder:(id)arg1;
- (void)_saveWindowLayoutForScreenLayout;
- (void)_saveWindowLayoutForScreen:(id)arg1;
- (BOOL)_applyWindowLayoutForScreen:(id)arg1;
- (void)_adjustWindowFrame:(struct CGRect *)arg1 fromScreen:(id)arg2 toScreen:(id)arg3;
- (id)_screenForWindowLayoutAdjustment;
- (id)_matchingWindowLayoutForScreen:(id)arg1;
- (BOOL)_isScreenLayoutAware;
- (void)_withWindowLayoutsForScreen:(id)arg1 performBlock:(CDUnknownBlockType)arg2;
- (void)_withWindowLayoutsByScreenLayout:(CDUnknownBlockType)arg1;
- (void)_hiliteWindow:(struct OpaqueWindowPtr *)arg1 fromWindow:(id)arg2;
@property(readonly) void *windowRef;
- (id)initWithWindowRef:(void *)arg1;
- (void)_setWindowRef:(struct OpaqueWindowPtr *)arg1;
- (id)snapshotFromRect:(struct CGRect)arg1 options:(unsigned long long)arg2;
- (struct CGImage *)_cgImageInRect:(struct CGRect)arg1 options:(unsigned int)arg2;
- (void)_setDoingCacheDisplayInRect:(BOOL)arg1;
- (BOOL)_doingCacheDisplayInRect;
- (void)_finishMinimizeToDock;
- (void)_updateWindowsMenuItemIfNeeded;
- (void)_prepareToUnMinimizeFromDock:(BOOL)arg1 forceActivation:(BOOL)arg2 wantsToBeKey:(BOOL)arg3;
- (BOOL)_prepareToRestoreFromDock:(BOOL)arg1 forceActivation:(BOOL)arg2 wantsToBeKey:(BOOL)arg3;
- (void)_prepareToRestoreRegularFromDock:(BOOL)arg1 forceActivation:(BOOL)arg2 wantsToBeKey:(BOOL)arg3;
- (int)_doRestoreComingFromDock:(BOOL)arg1 forceActivation:(BOOL)arg2 wantsToBeKey:(BOOL)arg3;
- (void)_setIsMinimized:(BOOL)arg1;
- (BOOL)_defaultButtonPaused;
- (void)_setDefaultButtonPaused:(BOOL)arg1;
- (BOOL)_defaultButtonSuppressed;
- (void)_setDefaultButtonSuppressed:(BOOL)arg1;
- (const struct __CFDictionary *)_createWindowsMenuEntryWithTitle:(id)arg1 enabled:(BOOL)arg2;
- (void)_selectWindow:(id)arg1;
- (void)updateInDock;
- (void)_updateButtonsForModeChanged;
- (id)_updateFrameWidgets;
- (id)showDeminiaturizedWindow;
- (void)_enterFullScreenIfNeededAfterMiniturized;
- (void)_finishDeminiaturizeFromDock:(BOOL)arg1;
- (id)restoreWindowOnDockReincarnation;
- (id)restoreWindowOnDockDeath;
- (void)cacheMiniwindowTitle:(id)arg1 guess:(BOOL)arg2;
- (BOOL)dockTitleIsGuess;
- (void)guessDockTitle:(id)arg1;
- (void)heartBeat:(CDStruct_fadd2e06 *)arg1;
- (BOOL)_wantsHeartBeat;
- (void)_addHeartBeatClientView:(id)arg1;
- (BOOL)_minimizeToDock;
- (int)_regularMinimizeToDock;
- (int)_carbonMinimizeToDock;
- (void)_minimizeSucceeded:(BOOL)arg1;
- (BOOL)_prepareToMinimize;
- (void)_prepareToMinimizeCore;
- (BOOL)_shouldSendResizeNotificationsToDock;
- (void)_setShouldSendResizeNotificationsToDock:(BOOL)arg1;
- (BOOL)_shadowHiddenByDock;
- (void)_setShadowHiddenByDock:(BOOL)arg1;
- (unsigned long long)_dockAllowedResizeEdges;
- (void)_setDockAllowedResizeEdges:(unsigned long long)arg1;
- (BOOL)_resizeEdgesManagedByDock;
- (void)_setResizeEdgesManagedByDock:(BOOL)arg1;
- (BOOL)_handlingResizeInitiatedByDock;
- (void)_setHandlingResizeInitiatedByDock:(BOOL)arg1;
- (void *)_dockItem;
- (BOOL)_registerWithDockIfNeeded;
- (void)_setNeedsToRemoveFieldEditor:(BOOL)arg1;
- (BOOL)_needsToRemoveFieldEditor;
- (void)_postWindowNeedsToResetDragMarginsUnlessPostingDisabled;
- (void)_setNeedsToResetDragMargins:(BOOL)arg1;
- (BOOL)_needsToResetDragMargins;
- (void)_resetDragMarginsIfNeeded;
- (struct CGSRegionObject *)_titlebarButtonsPreventingActivationRegion;
- (struct CGSRegionObject *)_titlebarCommandModifierExclusionRegion;
- (struct CGSRegionObject *)_titlebarActivationRegion;
- (struct CGSRegionObject *)_regionForOpaqueViewsBlockingDraggableFrame:(struct CGRect)arg1;
- (void)_resetDragMargins;
- (struct CGRect)_draggableFrame;
- (double)_transparency;
- (BOOL)_hasActiveControls;
- (BOOL)_controlAppearanceChangesOnKeyStateChange;
- (void)_setForceActiveControls:(BOOL)arg1;
- (struct CGRect)_growBoxRect;
- (BOOL)_containedMenusAreEligibleForKeyEquivalents;
- (id)_customImageForStandardWindowButton:(unsigned long long)arg1 state:(unsigned long long)arg2 dirty:(BOOL)arg3 controlTint:(unsigned long long)arg4;
- (BOOL)_hasActiveAppearanceForStandardWindowButton:(unsigned long long)arg1;
- (void)_fixIgnoredKeyMainAppearancesIfNeeded;
- (void)resignMainAppearance;
- (void)acquireMainAppearance;
- (void)_sendAcquireMainAppearanceToResponder:(id)arg1;
- (BOOL)hasMainAppearance;
- (void)resignKeyAppearance;
- (void)_sendResignKeyAppearanceChangeToResponder:(id)arg1;
- (void)acquireKeyAppearance;
- (void)_sendAcquireKeyAppearanceChangeToResponder:(id)arg1;
- (BOOL)_hasDescendentThatSharesKeyStatusWithSelfAndHasKeyAppearanceIncludingSheets:(BOOL)arg1;
- (BOOL)hasKeyAppearanceIncludingSheets:(BOOL)arg1;
- (struct CGImage *)_cgImageScreenShotIncludingShadow:(BOOL)arg1 clipRect:(struct CGRect)arg2 visualEffectViewWithDesktopBleedOnly:(BOOL)arg3 spaceID:(unsigned long long)arg4;
- (struct CGImage *)_cgImageScreenShotIncludingSpaceID:(unsigned long long)arg1;
- (struct CGImage *)_cgImageScreenShot;
- (id)_dumpImage;
- (id)_viewTreeDescription;
- (BOOL)hasKeyAppearance;
- (BOOL)_hasMainAppearance;
- (BOOL)_forceMainAppearance;
- (void)_setForceMainAppearance:(BOOL)arg1;
- (BOOL)_hasKeyAppearance;
- (BOOL)_hasActiveAppearanceIgnoringKeyFocus;
- (BOOL)_hasActiveAppearance;
- (void)_setForceInactiveShadow:(BOOL)arg1;
- (BOOL)_forceInactiveShadow;
@property(readonly) BOOL allowsInteriorShadow;
- (BOOL)_contentHasShadow;
- (void)_setContentHasShadow:(BOOL)arg1;
- (struct CGSize)_shadowOffsetForActiveAppearance:(BOOL)arg1;
- (struct CGSize)_shadowOffset;
- (unsigned long long)shadowStyle;
- (void)setShadowStyle:(unsigned long long)arg1;
- (BOOL)_wrapsCarbonWindow;
- (void)_removeWindowRef;
- (BOOL)_hasWindowRefCreatedForCarbonControl;
- (struct OpaqueWindowPtr *)_windowRefCreatedForCarbonControl;
- (struct OpaqueWindowPtr *)_windowRefCreatedForCarbonApp;
- (BOOL)_managesWindowRef;
- (BOOL)_hasWindowRef;
- (void *)windowRefWithCompositedAttribute:(BOOL)arg1 andFrameworkScaledAttribute:(BOOL)arg2;
- (struct OpaqueWindowPtr *)_windowRef;
- (unsigned int)_carbonWindowClass;
- (struct CGAffineTransform)_baseTransform;
- (id)_transformsDescription;
- (double)_scaleFactor;
- (void)_setScaleFactor:(double)arg1;
- (void)_setBackingScaleFactor:(double)arg1;
- (double)_frameworkScaleFactor;
- (void)_setFrameworkScaleFactor:(double)arg1;
@property __weak id timeMachineDelegate;
- (void)setInspectorBar:(id)arg1;
- (id)inspectorBar;
- (BOOL)_titleMightBeEditable;
- (void)_setDocumentButtonEnabled:(BOOL)arg1;
- (void)_setInactiveRevisionWindow:(BOOL)arg1;
- (BOOL)_isInactiveRevisionWindow;
- (BOOL)_documentShowsPanelOnClose;
- (void)_setDocumentShowsPanelOnClose:(BOOL)arg1;
- (id)_nonModalDocumentError;
- (void)_setNonModalDocumentError:(id)arg1;
- (id)_documentAutosavingError;
- (void)_setDocumentAutosavingError:(id)arg1;
- (long long)_documentEditingState;
- (void)_setDocumentEditingState:(long long)arg1 animate:(BOOL)arg2;
- (void)setShowsAutosaveButton:(BOOL)arg1;
- (BOOL)showsAutosaveButton;
- (id)_dumpLayer;
- (void)_accessibilitySetTitleCellRemoved:(BOOL)arg1;
- (BOOL)_accessibilityTitleCellRemoved;
- (void)_changeAllAttachmentsVisibleWithoutLogin;
- (void)_changeAllAttachmentsFirstResponder;
- (void)_changeAllAttachmentsMainState;
- (void)_changeAllAttachmentsKeyState;
- (void)_changeVisibleWithoutLogin;
- (void)_changeFirstResponderToParentsFirstResponder;
- (void)_changeMainState;
- (void)_changeKeyState;
- (void)_setSharesParentFirstResponder:(BOOL)arg1;
- (void)_dropSharedFirstResponder;
- (BOOL)_sharesParentFirstResponder;
- (BOOL)_shouldAutoFlattenLayerTree;
- (void)_setShouldAutoFlattenLayerTree:(BOOL)arg1;
- (void)setCanHostLayersInWindowServer:(BOOL)arg1;
- (BOOL)canHostLayersInWindowServer;
- (void)_resumeWindowServerLayerHosting;
- (void)_suspendWindowServerLayerHosting;
- (BOOL)_hostsLayersInWindowServer;
- (BOOL)hostsLayersInWindowServer;
- (id)accessibilitySizeOfChild:(id)arg1;
- (id)accessibilityPositionOfChild:(id)arg1;
- (BOOL)accessibilityIsChildFocusable:(id)arg1;
- (id)accessibilityHelpStringForChild:(id)arg1;
- (void)accessibilityPostNotification:(id)arg1;
- (id)accessibilityTopLevelUIElementAttributeValueHelper;
- (id)accessibilityWindowAttributeValueHelper;
- (BOOL)accessibilityIsChildOfApp;
- (long long)accessibilityWindowNumber;
- (BOOL)accessibilitySupportsOverriddenAttributes;
- (BOOL)accessibilityShouldUseUniqueId;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (id)_accessibilityViewCorrectedForFieldEditor:(id)arg1;
- (struct CGRect)accessibilityFocusRingBounds;
- (BOOL)accessibilityIsIgnored;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (void)accessibilitySetValue:(id)arg1 forAttribute:(id)arg2;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)_localizedDescriptionForSectionIdentifier:(id)arg1;
- (id)_closestElementToPosition:(struct CGPoint)arg1 inElements:(id)arg2;
- (id)_largestElementInElements:(id)arg1;
- (BOOL)_isSearchField:(id)arg1;
- (id)_potentialCandidateKeyForSectionKey:(id)arg1;
- (struct CGRect)_accessibilityFrameForElement:(id)arg1;
- (void)_finalUpdateSectionResult:(id)arg1 withCandidates:(id)arg2 element:(id)arg3 keys:(id)arg4 allowMultiple:(BOOL)arg5;
- (id)_newSectionCandidatesForSearchElements:(id)arg1 depth:(long long)arg2;
- (void)_updateSectionSearchElements:(id)arg1 keys:(id)arg2 element:(id)arg3;
- (void)_filterDownPotentialSectionResult:(id)arg1 keys:(id)arg2;
- (void)_preliminaryUpdateSectionResult:(id)arg1 element:(id)arg2 keys:(id)arg3;
- (id)_sectionsForElement:(id)arg1 keys:(id)arg2 depth:(long long)arg3 allowMultiple:(BOOL)arg4;
- (id)_newAutoGeneratedSectionsWithSearchKeys:(id)arg1 searchDepth:(long long)arg2 existingElements:(id)arg3;
- (double)accessibilityVisibleArea;
- (void)setAccessibilitySections:(id)arg1;
- (BOOL)accessibilityIsSectionsAttributeSettable;
- (id)accessibilitySectionsAttribute;
- (id)accessibilityAuditIssuesAttribute;
- (BOOL)accessibilityIsChildrenAttributeSettable;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityChildrenInNavigationOrderAttribute;
- (BOOL)accessibilityIsModalAttributeSettable;
- (id)accessibilityModalAttribute;
- (BOOL)accessibilityIsDocumentAttributeSettable;
- (id)accessibilityDocumentAttribute;
- (BOOL)accessibilityIsCancelButtonAttributeSettable;
- (id)accessibilityCancelButtonAttribute;
- (BOOL)accessibilityIsDefaultButtonAttributeSettable;
- (id)accessibilityDefaultButtonAttribute;
- (BOOL)accessibilityIsGrowAreaAttributeSettable;
- (BOOL)accessibilityIsTitleUIElementAttributeSettable;
- (id)accessibilityTitleUIElementAttribute;
- (BOOL)accessibilityIsProxyAttributeSettable;
- (id)accessibilityProxyAttribute;
- (void)accessibilitySetFullScreenAttribute:(id)arg1;
- (BOOL)accessibilityIsFullScreenAttributeSettable;
- (id)accessibilityFullScreenAttribute;
- (BOOL)accessibilityIsFullScreenButtonAttributeSettable;
- (id)accessibilityFullScreenButtonAttribute;
- (BOOL)accessibilityIsToolbarButtonAttributeSettable;
- (id)accessibilityToolbarButtonAttribute;
- (BOOL)accessibilityIsMinimizeButtonAttributeSettable;
- (id)accessibilityMinimizeButtonAttribute;
- (BOOL)accessibilityIsZoomButtonAttributeSettable;
- (id)accessibilityZoomButtonAttribute;
- (BOOL)accessibilityIsCloseButtonAttributeSettable;
- (id)accessibilityCloseButtonAttribute;
- (void)accessibilitySetMinimizedAttribute:(id)arg1;
- (BOOL)accessibilityIsMinimizedAttributeSettable;
- (id)accessibilityMinimizedAttribute;
- (void)accessibilitySetMainAttribute:(id)arg1;
- (BOOL)accessibilityIsMainAttributeSettable;
- (id)accessibilityMainAttribute;
- (void)accessibilitySetSizeAttribute:(id)arg1;
- (BOOL)accessibilityIsSizeAttributeSettable;
- (id)accessibilitySizeAttribute;
- (void)accessibilitySetPositionAttribute:(id)arg1;
- (BOOL)accessibilityIsPositionAttributeSettable;
- (id)accessibilityPositionAttribute;
- (BOOL)accessibilityIsParentAttributeSettable;
- (id)accessibilityParentAttribute;
- (id)_accessibilitySheetParent;
- (BOOL)accessibilityIsWindowAttributeSettable;
- (id)accessibilityWindowAttribute;
- (BOOL)accessibilityIsFocusedAttributeSettable;
- (id)accessibilityFocusedAttribute;
- (BOOL)accessibilityIsTitleAttributeSettable;
- (id)accessibilityTitleAttribute;
- (id)_accessibilityTitleCell;
- (struct CGRect)_accessibilityTitleRect;
- (BOOL)accessibilityIsSubroleAttributeSettable;
- (id)accessibilitySubroleAttribute;
- (BOOL)_accessibilityIsModal;
- (BOOL)accessibilityIsRoleDescriptionAttributeSettable;
- (id)accessibilityRoleDescriptionAttribute;
- (BOOL)accessibilityIsRoleAttributeSettable;
- (id)accessibilityRoleAttribute;
- (id)accessibilityAttributeNames;
- (id)handleSaveScriptCommand:(id)arg1;
- (id)handlePrintScriptCommand:(id)arg1;
- (id)handleCloseScriptCommand:(id)arg1;
- (id)objectSpecifier;
- (void)setBoundsAsQDRect:(id)arg1;
- (long long)uniqueID;
- (id)document;
- (id)boundsAsQDRect;
@property long long orderedIndex;
- (void)setIsZoomed:(BOOL)arg1;
- (void)setIsVisible:(BOOL)arg1;
- (void)setIsMiniaturized:(BOOL)arg1;
@property(readonly, getter=isZoomable) BOOL zoomable;
@property(readonly, getter=isResizable) BOOL resizable;
@property(readonly, getter=isModalPanel) BOOL modalPanel;
@property(readonly, getter=isMiniaturizable) BOOL miniaturizable;
@property(readonly, getter=isFloatingPanel) BOOL floatingPanel;
@property(readonly) BOOL hasTitleBar;
@property(readonly) BOOL hasCloseBox;
- (id)_beginDraggingSessionWithItems:(id)arg1 clipRect:(struct CGRect)arg2 event:(id)arg3 source:(id)arg4;
- (void)dragImage:(id)arg1 at:(struct CGPoint)arg2 offset:(struct CGSize)arg3 event:(id)arg4 pasteboard:(id)arg5 source:(id)arg6 slideBack:(BOOL)arg7;
- (void)updateDraggingItemsForDrag:(id)arg1;
- (BOOL)wantsPeriodicDraggingUpdates;
- (void)draggingEnded:(id)arg1;
- (void)concludeDragOperation:(id)arg1;
- (BOOL)performDragOperation:(id)arg1;
- (BOOL)prepareForDragOperation:(id)arg1;
- (void)draggingExited:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (id)_findDragTargetFrom:(id)arg1;
- (id)_dragTypes;
- (void)unregisterDraggedTypes;
- (void)_unregisterDragTypes;
- (id)_registerDragTypesIfNeeded;
- (void)_switchDragRegistrationToRemoteContext:(unsigned int)arg1;
- (void)_registerDragTypes:(id)arg1;
- (BOOL)_hasRegisteredForDragTypes;
- (void)_registerDragTypesLater;
- (void)registerForDraggedTypes:(id)arg1;
- (id)registeredDraggedTypes;
- (void)_removeEventHandlers;
- (void)_syncFrameMetrics;
- (void)_removeCocoaWindowEventHandlersForCocoaSheetsAttachedToCarbonModalParent;
- (void)_installCocoaWindowEventHandlersForCocoaSheetsAttachedToCarbonModalParent;
- (void)_installCocoaWindowEventHandlers;
- (void)_installCarbonWindowEventHandlers;
- (void)_installRootMetricsHandler;
- (void)_setWindowDepth;
- (void)_installCarbonAppDockHandlers;
- (void)_updateEventMaskDueToEnableCursorRects;
- (void)_updateEventMaskDueToDisableCursorRects;
- (void)_updateEventMaskDueToInit;
- (void)_updateEventMaskDueToCommonAwake;
- (void)_updateEventMaskDueToOrderedOut;
- (void)_updateEventMaskDueToBecomingKey;
- (void)_updateEventMaskDueToResigningKey;
- (void)_updateMouseMovedState;
- (void)_setMouseMovedEventsEnabled:(BOOL)arg1;
- (void)_removeMouseMovedListener:(id)arg1;
- (void)_addMouseMovedListener:(id)arg1;
- (BOOL)view:(id)arg1 acceptsFirstMouseEvent:(id)arg2 initialKeyWindow:(id)arg3;
- (SEL)_cancelActionIfCmdDot:(id)arg1;
- (SEL)_keyboardUIActionForEvent:(id)arg1;
- (void)_latchViewForScrollEvent:(id)arg1;
- (BOOL)_lmouseUpPending;
- (void)_handleMouseDownEvent:(id)arg1 isDelayedEvent:(BOOL)arg2;
- (void)_setWantsMouseMoveEventsInBackground:(BOOL)arg1;
- (BOOL)_wantsMouseMoveEventsInBackground;
- (BOOL)_processKeyboardUIKey:(id)arg1;
- (void)_cancelKey:(id)arg1;
- (void)_handleFocusToolbarHotKey:(id)arg1;
- (void)_removeTouchListener:(id)arg1;
- (void)_addTouchListener:(id)arg1;
- (BOOL)_hasMouseMovedListeners;
- (void)_reallySendEvent:(id)arg1 isDelayedEvent:(BOOL)arg2;
- (id)_lastRightHit;
- (id)_lastLeftHit;
- (void)_setEventMask:(unsigned long long)arg1;
- (void)cancelOperation:(id)arg1;
- (id)supplementalTargetForAction:(SEL)arg1 sender:(id)arg2;
- (BOOL)shouldBeTreatedAsInkEvent:(id)arg1;
- (void)sendEvent:(id)arg1;
- (struct CGPoint)mouseLocationOutsideOfEventStream;
- (void)postEvent:(id)arg1 atStart:(BOOL)arg2;
- (void)discardEventsMatchingMask:(unsigned long long)arg1 beforeEvent:(id)arg2;
- (unsigned long long)gestureEventMask;
- (void)setGestureEventMask:(unsigned long long)arg1;
- (BOOL)ignoresMouseEvents;
- (void)setIgnoresMouseEvents:(BOOL)arg1;
- (BOOL)acceptsMouseMovedEvents;
- (void)setAcceptsMouseMovedEvents:(BOOL)arg1;
- (id)currentEvent;
- (void)trackEventsMatchingMask:(unsigned long long)arg1 timeout:(double)arg2 mode:(id)arg3 handler:(CDUnknownBlockType)arg4;
- (id)nextEventMatchingMask:(unsigned long long)arg1 untilDate:(id)arg2 inMode:(id)arg3 dequeue:(BOOL)arg4;
- (id)nextEventMatchingMask:(unsigned long long)arg1;
- (BOOL)_wasActiveBeforeCurrentEvent;
- (void)_eventWasFiltered:(id)arg1;
- (void)_setIgnoresCurrentEvent:(BOOL)arg1;
- (id)_sendEventToGestureRecognizers:(id)arg1 requireAcceptsFirstMouse:(BOOL)arg2;
- (BOOL)_gestureRecognizersHaveDelayedEvents;
- (BOOL)_gatheringActiveGestureRecognizers;
- (id)_activeGestureRecognizers;
- (id)_gestureRecognizersStartingWithView:(id)arg1 onEvent:(id)arg2 requireAcceptsFirstMouse:(BOOL)arg3;
- (void)_removeActiveGestureRecognizer:(id)arg1 withEvent:(id)arg2;
- (id)_firstResponderIvar;
- (void)_setFirstResponderIvar:(id)arg1;
- (BOOL)_firstResponderCanBeWeak;
- (void)_didRestoreUserActivity:(id)arg1;
- (id)functionRow;
- (BOOL)_isSnapshotRestorationEnabled;
- (void)enableSnapshotRestoration;
- (void)disableSnapshotRestoration;
- (void)_acquireNextMinimizationSeed;
- (unsigned int)_minimizationSeed;
- (unsigned int)_persistentStateTerminationGeneration;
- (void)_invalidateRestorableStateOfContents;
- (BOOL)_shouldRecordPersistentState;
- (BOOL)_isConsideredOpenForPersistentState;
- (Class)restorationClass;
- (void)setRestorationClass:(Class)arg1;
- (void)_setContentsHaveInvalidRestorableState:(BOOL)arg1;
- (BOOL)_contentsHaveInvalidRestorableState;
- (void)_markAsEverHavingInvalidRestorableState;
- (BOOL)_hasEverHadInvalidRestorableState;
- (BOOL)_hasInvalidRestorableState;
- (void)_setHasInvalidRestorableState:(BOOL)arg1;
- (id)_copyPersistentUIChildren;
- (id)_persistentUIIdentifier;
- (id)_persistentUIWindow;
- (struct CGPoint)_convertPointFromScreen:(struct CGPoint)arg1;
- (void)visualizeConstraints:(id)arg1;
- (void)_updateConstraintVisualization;
- (void)_teardownVisualizedConstraintsView;
- (id)_visualizedConstraintsView;
- (struct CGRect)_frameForVisualizedConstraintsWindow:(id)arg1;
- (void)setRemoteUIElement:(id)arg1;
- (id)remoteUIElement;
- (void)accessibilityAddDeferredNotification:(id)arg1;
- (void)accessibilitySendDeferredNotifications;
- (struct CGRect)_validFrameForFrame:(struct CGRect)arg1 resizedFromEdge:(unsigned long long)arg2;
- (struct CGRect)_commonValidFrameForResizeFrame:(struct CGRect)arg1 fromResizeEdge:(unsigned long long)arg2;
- (BOOL)_allowsSizeSnapping;
- (void)_unsnapFrameWithEvent:(id)arg1;
- (void)_setLiveResizedFrame:(struct CGRect)arg1 animated:(BOOL)arg2;
- (void)_snapSizeToFrame:(struct CGRect)arg1 withEvent:(id)arg2;
- (void)_resizeSetFrame:(struct CGRect)arg1 withEvent:(id)arg2;
- (BOOL)_shouldSnapSizeWhenResizing;
- (void)_provideActuationFeedbackWithEvent:(id)arg1;
- (BOOL)_snapWindowSizeInDirection:(long long)arg1 withEvent:(id)arg2;
- (struct CGRect)_snapWindowSizeWithFrame:(struct CGRect)arg1 resizeDirection:(long long)arg2 state:(CDStruct_222f2799 *)arg3;
- (struct CGRect)_sizeSnappedFrameForOppositeEdge:(unsigned long long)arg1 frame:(struct CGRect)arg2 state:(CDStruct_222f2799 *)arg3;
- (struct CGRect)_doScreenSizeSnappingFromResizedEdge:(unsigned long long)arg1 frame:(struct CGRect)arg2 state:(CDStruct_222f2799 *)arg3;
- (BOOL)_shouldDoScreenSizeSnappingFromResizedEdge:(unsigned long long)arg1 frame:(struct CGRect)arg2 state:(CDStruct_222f2799 *)arg3;
- (void)_setFrameWidthDelta:(double)arg1 resizingFromRight:(BOOL)arg2 frame:(struct CGRect *)arg3;
- (void)_setFrameHeightDelta:(double)arg1 resizingFromTop:(BOOL)arg2 frame:(struct CGRect *)arg3;
- (struct CGRect)_unsnapSizeFromFrame:(struct CGRect)arg1 fromEdge:(unsigned long long)arg2 state:(CDStruct_222f2799 *)arg3;
- (void)_startSnappingToFrameTimerAfterDelay:(double)arg1;
- (void)_stopSnappingToFrameTimer;
- (void)_doSnapToFrame;
- (struct CGRect)_frame:(struct CGRect)arg1 resizedFromEdge:(unsigned long long)arg2 withDelta:(struct CGSize)arg3 withEvent:(id)arg4 withState:(CDStruct_222f2799 *)arg5;
- (BOOL)_isConsideredSheetForResizing;
- (BOOL)_resizingShouldSnapToWindows;
- (struct CGRect)_frame:(struct CGRect)arg1 resizedFromEdge:(unsigned long long)arg2 withDelta:(struct CGSize)arg3 withEvent:(id)arg4;
- (double)_opaqueAspectDimensionForDimension:(double)arg1 isHorizontal:(BOOL)arg2;
- (void)_resizeWithEvent:(id)arg1;
- (unsigned long long)liveResizeEdges;
- (BOOL)_attemptToSnapWindowSizeWithEvent:(id)arg1;
- (BOOL)_shouldSnapSizeOnDoubleClick;
- (id)_hitTestWithHysteresisCheck:(struct CGPoint)arg1 forEvent:(id)arg2 allowWindowDragging:(char *)arg3;
- (BOOL)_scrollViewIntersectsSoutheastGrowCorner:(id)arg1;
- (struct CGRect)_windowResizeEventHandlingRectForRect:(struct CGRect)arg1;
- (void)_getEdgeResizingRects:(struct CGRect *)arg1 allowedEdges:(unsigned long long)arg2;
- (void)_getEdgeResizingRects:(struct CGRect *)arg1;
- (void)_getExteriorResizeEdgeThicknesses:(double [8])arg1;
- (void)_getResizeEdgeAndCornerThicknesses:(double [8])arg1;
- (BOOL)_allowsExteriorResizing;
- (unsigned long long)_resizableEdgesForGrowing:(unsigned long long *)arg1 shrinking:(unsigned long long *)arg2;
- (BOOL)_hitTestInResizeRegionShouldReturnNil;
- (BOOL)_edgeResizingCursorUpdate:(id)arg1 atLocation:(struct CGPoint)arg2;
- (long long)_resizeDirectionForMouseLocation:(struct CGPoint)arg1;
- (BOOL)_updateEdgeResizingTrackingAreas;
- (void)_noteExteriorResizeMarginsMayHaveChanged;
- (void)_noteAllowedResizeDirectionsMayHaveChanged;
- (id)_cursorForResizeDirection:(long long)arg1;
- (void)setUnsnappedFrame:(struct CGRect)arg1;
- (struct CGRect)unsnappedFrame;
- (void)_updateLayoutDependentMetricsIfNeeded;
- (void)_setViewsNeedUpdateLayoutDependentMetrics:(BOOL)arg1;
- (void)constraintsDidChangeInEngine:(id)arg1;
- (void)updateConstraintsIfNeeded;
- (BOOL)_updateConstraintsForEngineHostingViews:(id)arg1;
- (BOOL)_viewsNeedUpdateConstraints;
- (void)_setViewsNeedUpdateConstraints:(BOOL)arg1;
- (void)layoutIfNeeded;
- (void)_layoutViewTree;
- (BOOL)_viewsNeedLayout;
- (void)_setViewsNeedLayout:(BOOL)arg1;
- (id)_redundantConstraints;
- (id)_nsib_candidateRedundantConstraints;
- (void)exerciseAmbiguityInLayout;
- (BOOL)hasAmbiguousLayout;
- (struct CGPoint)_adjustedOriginAroundAnchorPointForSize:(struct CGSize)arg1;
- (void)_changeWindowFrameFromConstraintsIfNecessary;
- (struct CGPoint)_layout_anchorPointInEngine;
- (struct CGPoint)_layout_anchorPoint;
- (void)_invalidateWindowConstraintsMinMaxSizeCache;
- (void)_fromConstraintsCalculateWindowMinSize:(struct CGSize *)arg1 maxSize:(struct CGSize *)arg2 allowDynamicLayout:(BOOL)arg3 changingOnlySlightly:(BOOL)arg4;
- (void)_fromConstraintsGetWindowMinSize:(struct CGSize *)arg1 maxSize:(struct CGSize *)arg2 allowDynamicLayout:(BOOL)arg3 changingOnlySlightly:(BOOL)arg4;
- (void)_getConstrainedWindowMinSize:(struct CGSize *)arg1 maxSize:(struct CGSize *)arg2 changingOnlySlightly:(BOOL)arg3;
- (void)_getConstrainedWindowMinSize:(struct CGSize *)arg1 maxSize:(struct CGSize *)arg2;
- (void)_fromConstraintsSetWindowFrame:(struct CGRect)arg1;
- (void)_validateSizeUsingConstraints:(struct CGSize *)arg1;
- (void)_setWindowResizeConstraintSize:(struct CGSize)arg1;
- (void)_refreshWindowResizeConstraintsWithSize:(struct CGSize)arg1;
- (void)_discardWindowResizeConstraintsAndMarkAsNeedingUpdate;
- (void)_windowResizeConstraints_borderViewChanged;
- (void)_setWindowResizeConstraints:(id)arg1;
- (id)_windowResizeConstraints;
- (void)setAnchorAttribute:(long long)arg1 forOrientation:(long long)arg2;
- (long long)anchorAttributeForOrientation:(long long)arg1;
- (void)setAnchorItem:(id)arg1 forOrientation:(long long)arg2;
- (id)anchorItemForOrientation:(long long)arg1;
- (id)_layout_anchorInfo;
- (id)_layout_defaultAnchorInfo;
- (void)_layout_setPrimitiveAnchorInfo:(id)arg1;
- (id)_layout_primitiveAnchorInfo;
- (void)rebuildLayoutFromScratch;
- (void)adjustLayoutForResolutionChangeToRetina:(BOOL)arg1;
- (void)_autolayoutEngagedSomewhereInWindow;
- (id)_layoutEngineEngaging;
- (id)_layoutEngineIfAvailable;
- (id)_layoutEngine;
- (BOOL)_allowsLinearMaskOverlayForView:(id)arg1;
@property(readonly) id <NSAppearanceCustomization> _effectiveAppearanceParent;
- (unsigned long long)_tileSpaceID;
- (unsigned long long)_parentSpaceID;
- (void)_sendDockFullScreenTitle:(id)arg1;
- (struct CGSize)_tilePreferredSize;
- (BOOL)_allowsTiling;
- (BOOL)_allowsFullScreen;
- (BOOL)_implicitlyAllowsFullScreenAuxiliary;
- (BOOL)_implicitlyAllowsFullScreenPrimary;
- (BOOL)_implicitlyDisallowTiling;
- (BOOL)_implicitlyTileable;
- (BOOL)_explicitlyAllowsFullScreenAuxiliary;
- (BOOL)_explicitlyAllowsFullScreenPrimary;
- (void)_resolveAutomaticEnterFullScreenFlags;
- (BOOL)_shouldJoinActiveSpaceOnOrderIn;
- (BOOL)_shouldOpenInFullScreen;
- (BOOL)_windowWillBecomeFullScreen;
- (void)_doFullScreenCleanupForOrderOut;
- (BOOL)_joinActiveFullScreenSpaceUsingPosition:(unsigned long long)arg1;
- (unsigned long long)_preferredPositionForTileJoin;
- (BOOL)_canJoinActiveFullScreenSpace;
- (void)_createSiblingTileForWindow:(id)arg1 preferredPositions:(unsigned long long)arg2 responseHandler:(CDUnknownBlockType)arg3;
- (void)_queryCanAddSiblingTileForWindow:(id)arg1 responseHandler:(CDUnknownBlockType)arg2;
- (struct CGRect)_fullScreenTileFrame;
- (BOOL)_fullScreenTileFillsScreen;
- (BOOL)_canEnterFullScreenOrTileMode;
- (BOOL)_canEnterTileMode;
- (BOOL)_wantsFullScreenTileDropTargets;
- (BOOL)_canEnterTileModeForBehavior:(unsigned long long)arg1;
- (BOOL)canEnterFullScreenMode;
- (void)setCanEnterFullScreenMode:(BOOL)arg1;
- (void)_refreshTilingConstraints:(BOOL)arg1;
- (BOOL)_needsTilingConstraintUpdate;
- (void)_doUpdateTilingConstraintsImmediately;
- (struct CGSize)_actualMinFullScreenContentSize;
- (struct CGSize)_minFullScreenContentSizeForFrame:(struct CGRect)arg1;
- (void)_setTileMinSize:(struct CGSize)arg1 tileMaxSize:(struct CGSize)arg2 tilePreferredSize:(struct CGSize)arg3;
- (void)_saveTilePreferredSize;
- (id)_fullScreenPreferredJoinRatioDefaultsKey;
- (void)_updateWindowIsFullScreenCapable;
- (unsigned long long)_fullScreenPresentationOptions;
- (void)_setFullScreenPresentationOptions:(unsigned long long)arg1;
- (void)_markAppropriateForAutomaticFullScreenMode:(BOOL)arg1;
- (BOOL)_positionsToolbarInExternalWindow;
- (void)_reacquireToolbarViewFromFullScreenWindow;
- (void)_surrenderToolbarViewForFullScreenWindow;
- (BOOL)_measuringMinFullScreenContentSize;
- (BOOL)_zoomButtonIsFullScreenButton;
- (void)_setForceIsOnActiveSpace:(BOOL)arg1;
- (BOOL)_supportsDockInitiatedFullScreen;
- (void)exitFullScreenMode:(id)arg1;
- (void)_maximizeTileToFillScreen;
- (void)_enterAutomaticFullScreen;
- (void)_enterFullScreenModeWithTransition:(id)arg1;
- (void)enterFullScreenMode:(id)arg1;
- (void)_fullScreenStatusChanged;
- (void)_cleanupToolbarFromFullScreen;
- (BOOL)_needsBehindWindowBlendingForFullScreenTitlebar;
- (void)_enableFullScreenMenubarAutohiding;
- (void)_disableFullScreenMenubarAutohiding;
- (BOOL)_isInFullScreenSpace;
- (BOOL)_willBeInFullScreenSpace;
- (BOOL)_shouldEnterFullScreenModeOnOrderIn;
- (BOOL)_someFullScreenInstanceHasSuppressedImplicitFullScreen;
- (void)_didFailToEnterFullScreen;
- (void)_didEnterFullScreen;
- (void)_willEnterFullScreen;
- (void)_didFailToExitFullScreen;
- (void)_didExitFullScreen;
- (void)_setFullScreenSavedFrameFromWindow:(id)arg1;
- (void)_updateSavedFrameForFullScreen;
- (void)_saveFrameBeforeFullScreen;
- (void)_beginATUWindowDragForGreenButtonPressAtLocation:(struct CGPoint)arg1;
- (id)_currentDividerResizeDirections;
- (BOOL)_performDividerDragWithEvent:(id)arg1 forResizeDirection:(long long)arg2;
- (double)_fullScreenTitlebarMinHeight;
- (BOOL)_ignoreForFullScreenTransitionSnapshot;
- (BOOL)_ignoreForFullScreenTransition;
- (BOOL)_inFullScreen;
- (void)_updateFullScreenSpaceDockTitle;
- (void)_fullScreenUpdateUserSpaceSavedFrameIfNeeded;
- (struct CGRect)_frameForFullScreenModeInRect:(struct CGRect)arg1;
- (struct CGRect)_frameForFullScreenMode;
- (struct CGRect)_tileFrameForFullScreen;
- (void)_cleanupAndRemoveFullScreenContentController;
- (void)_createFullScreenContentControllerIfNeeded;
- (id)_fullScreenContentController;
- (BOOL)_canQuitQuietlyAndSafelyWithOptionalExplanation:(id)arg1;
- (BOOL)_canAutoQuitQuietlyAndSafelyWithOptionalExplanation:(id)arg1;

// Remaining properties
@property struct CGPoint accessibilityActivationPoint; // @dynamic accessibilityActivationPoint;
@property(copy) NSArray *accessibilityAllowedValues; // @dynamic accessibilityAllowedValues;
@property(getter=isAccessibilityAlternateUIVisible) BOOL accessibilityAlternateUIVisible; // @dynamic accessibilityAlternateUIVisible;
@property(retain) id accessibilityApplicationFocusedUIElement; // @dynamic accessibilityApplicationFocusedUIElement;
@property(retain) id accessibilityCancelButton; // @dynamic accessibilityCancelButton;
@property(copy) NSArray *accessibilityChildren; // @dynamic accessibilityChildren;
@property(copy) NSArray *accessibilityChildrenInNavigationOrder; // @dynamic accessibilityChildrenInNavigationOrder;
@property(retain) id accessibilityClearButton; // @dynamic accessibilityClearButton;
@property(retain) id accessibilityCloseButton; // @dynamic accessibilityCloseButton;
@property long long accessibilityColumnCount; // @dynamic accessibilityColumnCount;
@property(copy) NSArray *accessibilityColumnHeaderUIElements; // @dynamic accessibilityColumnHeaderUIElements;
@property struct _NSRange accessibilityColumnIndexRange; // @dynamic accessibilityColumnIndexRange;
@property(copy) NSArray *accessibilityColumnTitles; // @dynamic accessibilityColumnTitles;
@property(copy) NSArray *accessibilityColumns; // @dynamic accessibilityColumns;
@property(copy) NSArray *accessibilityContents; // @dynamic accessibilityContents;
@property(retain) id accessibilityCriticalValue; // @dynamic accessibilityCriticalValue;
@property(copy) NSArray *accessibilityCustomActions; // @dynamic accessibilityCustomActions;
@property(copy) NSArray *accessibilityCustomRotors; // @dynamic accessibilityCustomRotors;
@property(retain) id accessibilityDecrementButton; // @dynamic accessibilityDecrementButton;
@property(retain) id accessibilityDefaultButton; // @dynamic accessibilityDefaultButton;
@property(getter=isAccessibilityDisclosed) BOOL accessibilityDisclosed; // @dynamic accessibilityDisclosed;
@property __weak id accessibilityDisclosedByRow; // @dynamic accessibilityDisclosedByRow;
@property(retain) id accessibilityDisclosedRows; // @dynamic accessibilityDisclosedRows;
@property long long accessibilityDisclosureLevel; // @dynamic accessibilityDisclosureLevel;
@property(copy) NSString *accessibilityDocument; // @dynamic accessibilityDocument;
@property(getter=isAccessibilityEdited) BOOL accessibilityEdited; // @dynamic accessibilityEdited;
@property(getter=isAccessibilityElement) BOOL accessibilityElement; // @dynamic accessibilityElement;
@property(getter=isAccessibilityEnabled) BOOL accessibilityEnabled; // @dynamic accessibilityEnabled;
@property(getter=isAccessibilityExpanded) BOOL accessibilityExpanded; // @dynamic accessibilityExpanded;
@property __weak id accessibilityExtrasMenuBar; // @dynamic accessibilityExtrasMenuBar;
@property(copy) NSString *accessibilityFilename; // @dynamic accessibilityFilename;
@property(getter=isAccessibilityFocused) BOOL accessibilityFocused; // @dynamic accessibilityFocused;
@property(retain) id accessibilityFocusedWindow; // @dynamic accessibilityFocusedWindow;
@property(getter=isAccessibilityFrontmost) BOOL accessibilityFrontmost; // @dynamic accessibilityFrontmost;
@property(retain) id accessibilityFullScreenButton; // @dynamic accessibilityFullScreenButton;
@property(retain) id accessibilityGrowArea; // @dynamic accessibilityGrowArea;
@property(copy) NSArray *accessibilityHandles; // @dynamic accessibilityHandles;
@property(retain) id accessibilityHeader; // @dynamic accessibilityHeader;
@property(copy) NSString *accessibilityHelp; // @dynamic accessibilityHelp;
@property(getter=isAccessibilityHidden) BOOL accessibilityHidden; // @dynamic accessibilityHidden;
@property(retain) id accessibilityHorizontalScrollBar; // @dynamic accessibilityHorizontalScrollBar;
@property(copy) NSString *accessibilityHorizontalUnitDescription; // @dynamic accessibilityHorizontalUnitDescription;
@property long long accessibilityHorizontalUnits; // @dynamic accessibilityHorizontalUnits;
@property(copy) NSString *accessibilityIdentifier; // @dynamic accessibilityIdentifier;
@property(retain) id accessibilityIncrementButton; // @dynamic accessibilityIncrementButton;
@property long long accessibilityIndex; // @dynamic accessibilityIndex;
@property long long accessibilityInsertionPointLineNumber; // @dynamic accessibilityInsertionPointLineNumber;
@property(copy) NSString *accessibilityLabel; // @dynamic accessibilityLabel;
@property(copy) NSArray *accessibilityLabelUIElements; // @dynamic accessibilityLabelUIElements;
@property float accessibilityLabelValue; // @dynamic accessibilityLabelValue;
@property(copy) NSArray *accessibilityLinkedUIElements; // @dynamic accessibilityLinkedUIElements;
@property(getter=isAccessibilityMain) BOOL accessibilityMain; // @dynamic accessibilityMain;
@property(retain) id accessibilityMainWindow; // @dynamic accessibilityMainWindow;
@property(retain) id accessibilityMarkerGroupUIElement; // @dynamic accessibilityMarkerGroupUIElement;
@property(copy) NSString *accessibilityMarkerTypeDescription; // @dynamic accessibilityMarkerTypeDescription;
@property(copy) NSArray *accessibilityMarkerUIElements; // @dynamic accessibilityMarkerUIElements;
@property(retain) id accessibilityMarkerValues; // @dynamic accessibilityMarkerValues;
@property(retain) id accessibilityMaxValue; // @dynamic accessibilityMaxValue;
@property __weak id accessibilityMenuBar; // @dynamic accessibilityMenuBar;
@property(retain) id accessibilityMinValue; // @dynamic accessibilityMinValue;
@property(retain) id accessibilityMinimizeButton; // @dynamic accessibilityMinimizeButton;
@property(getter=isAccessibilityMinimized) BOOL accessibilityMinimized; // @dynamic accessibilityMinimized;
@property(getter=isAccessibilityModal) BOOL accessibilityModal; // @dynamic accessibilityModal;
@property(copy) NSArray *accessibilityNextContents; // @dynamic accessibilityNextContents;
@property long long accessibilityNumberOfCharacters; // @dynamic accessibilityNumberOfCharacters;
@property(getter=isAccessibilityOrderedByRow) BOOL accessibilityOrderedByRow; // @dynamic accessibilityOrderedByRow;
@property long long accessibilityOrientation; // @dynamic accessibilityOrientation;
@property(retain) id accessibilityOverflowButton; // @dynamic accessibilityOverflowButton;
@property(copy) NSString *accessibilityPlaceholderValue; // @dynamic accessibilityPlaceholderValue;
@property(copy) NSArray *accessibilityPreviousContents; // @dynamic accessibilityPreviousContents;
@property(getter=isAccessibilityProtectedContent) BOOL accessibilityProtectedContent; // @dynamic accessibilityProtectedContent;
@property(retain) id accessibilityProxy; // @dynamic accessibilityProxy;
@property(getter=isAccessibilityRequired) BOOL accessibilityRequired; // @dynamic accessibilityRequired;
@property(copy) NSString *accessibilityRole; // @dynamic accessibilityRole;
@property(copy) NSString *accessibilityRoleDescription; // @dynamic accessibilityRoleDescription;
@property long long accessibilityRowCount; // @dynamic accessibilityRowCount;
@property(copy) NSArray *accessibilityRowHeaderUIElements; // @dynamic accessibilityRowHeaderUIElements;
@property struct _NSRange accessibilityRowIndexRange; // @dynamic accessibilityRowIndexRange;
@property(copy) NSArray *accessibilityRows; // @dynamic accessibilityRows;
@property long long accessibilityRulerMarkerType; // @dynamic accessibilityRulerMarkerType;
@property(retain) id accessibilitySearchButton; // @dynamic accessibilitySearchButton;
@property(retain) id accessibilitySearchMenu; // @dynamic accessibilitySearchMenu;
@property(getter=isAccessibilitySelected) BOOL accessibilitySelected; // @dynamic accessibilitySelected;
@property(copy) NSArray *accessibilitySelectedCells; // @dynamic accessibilitySelectedCells;
@property(copy) NSArray *accessibilitySelectedChildren; // @dynamic accessibilitySelectedChildren;
@property(copy) NSArray *accessibilitySelectedColumns; // @dynamic accessibilitySelectedColumns;
@property(copy) NSArray *accessibilitySelectedRows; // @dynamic accessibilitySelectedRows;
@property(copy) NSString *accessibilitySelectedText; // @dynamic accessibilitySelectedText;
@property struct _NSRange accessibilitySelectedTextRange; // @dynamic accessibilitySelectedTextRange;
@property(copy) NSArray *accessibilitySelectedTextRanges; // @dynamic accessibilitySelectedTextRanges;
@property(copy) NSArray *accessibilityServesAsTitleForUIElements; // @dynamic accessibilityServesAsTitleForUIElements;
@property struct _NSRange accessibilitySharedCharacterRange; // @dynamic accessibilitySharedCharacterRange;
@property(copy) NSArray *accessibilitySharedFocusElements; // @dynamic accessibilitySharedFocusElements;
@property(copy) NSArray *accessibilitySharedTextUIElements; // @dynamic accessibilitySharedTextUIElements;
@property(retain) id accessibilityShownMenu; // @dynamic accessibilityShownMenu;
@property long long accessibilitySortDirection; // @dynamic accessibilitySortDirection;
@property(copy) NSArray *accessibilitySplitters; // @dynamic accessibilitySplitters;
@property(copy) NSString *accessibilitySubrole; // @dynamic accessibilitySubrole;
@property(copy) NSArray *accessibilityTabs; // @dynamic accessibilityTabs;
@property(copy) NSString *accessibilityTitle; // @dynamic accessibilityTitle;
@property __weak id accessibilityTitleUIElement; // @dynamic accessibilityTitleUIElement;
@property(retain) id accessibilityToolbarButton; // @dynamic accessibilityToolbarButton;
@property __weak id accessibilityTopLevelUIElement; // @dynamic accessibilityTopLevelUIElement;
@property(copy) NSURL *accessibilityURL; // @dynamic accessibilityURL;
@property(copy) NSString *accessibilityUnitDescription; // @dynamic accessibilityUnitDescription;
@property long long accessibilityUnits; // @dynamic accessibilityUnits;
@property(retain) id accessibilityValue; // @dynamic accessibilityValue;
@property(copy) NSString *accessibilityValueDescription; // @dynamic accessibilityValueDescription;
@property(retain) id accessibilityVerticalScrollBar; // @dynamic accessibilityVerticalScrollBar;
@property(copy) NSString *accessibilityVerticalUnitDescription; // @dynamic accessibilityVerticalUnitDescription;
@property long long accessibilityVerticalUnits; // @dynamic accessibilityVerticalUnits;
@property(copy) NSArray *accessibilityVisibleCells; // @dynamic accessibilityVisibleCells;
@property struct _NSRange accessibilityVisibleCharacterRange; // @dynamic accessibilityVisibleCharacterRange;
@property(copy) NSArray *accessibilityVisibleChildren; // @dynamic accessibilityVisibleChildren;
@property(copy) NSArray *accessibilityVisibleColumns; // @dynamic accessibilityVisibleColumns;
@property(copy) NSArray *accessibilityVisibleRows; // @dynamic accessibilityVisibleRows;
@property(retain) id accessibilityWarningValue; // @dynamic accessibilityWarningValue;
@property __weak id accessibilityWindow; // @dynamic accessibilityWindow;
@property(copy) NSArray *accessibilityWindows; // @dynamic accessibilityWindows;
@property(retain) id accessibilityZoomButton; // @dynamic accessibilityZoomButton;
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(readonly) NSTouchBar *touchBar;

@end

