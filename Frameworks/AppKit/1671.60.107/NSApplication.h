//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <AppKit/NSResponder.h>

#import <AppKit/NSAccessibility-Protocol.h>
#import <AppKit/NSAccessibilityElement-Protocol.h>
#import <AppKit/NSAppearanceCustomization-Protocol.h>
#import <AppKit/NSAppearanceCustomizationInternal-Protocol.h>
#import <AppKit/NSMenuItemValidation-Protocol.h>
#import <AppKit/NSTouchBarProviderContainer-Protocol.h>
#import <AppKit/NSUserInterfaceValidations-Protocol.h>

@class NSAppearance, NSArray, NSDockTile, NSEvent, NSImage, NSMenu, NSString, NSTouchBar, NSURL, NSWindow;
@protocol NSAppearanceCustomization, NSApplicationDelegate;

@interface NSApplication : NSResponder <NSAppearanceCustomization, NSTouchBarProviderContainer, NSAppearanceCustomizationInternal, NSUserInterfaceValidations, NSMenuItemValidation, NSAccessibilityElement, NSAccessibility>
{
    NSEvent *_currentEvent;
    id _windowList;
    id _keyWindow;
    id _mainWindow;
    id _delegate;
    id _hiddenList;
    int _hiddenCount;
    long long _context;
    void *_appleEventSuspensionID;
    NSWindow *_previousKeyWindowX;
    short _unusedApp;
    short _running;
    struct __appFlags {
        unsigned int _hidden:1;
        unsigned int _appleEventActivationInProgress:1;
        unsigned int _active:1;
        unsigned int _hasBeenRun:1;
        unsigned int _doingUnhide:1;
        unsigned int _delegateReturnsValidRequestor:1;
        unsigned int _deactPending:1;
        unsigned int _invalidState:1;
        unsigned int _invalidEvent:1;
        unsigned int _postedWindowsNeedUpdateNote:1;
        unsigned int _wantsToActivate:1;
        unsigned int _doingHide:1;
        unsigned int _dontSendShouldTerminate:1;
        unsigned int _ignoresFullScreen:1;
        unsigned int _finishedLaunching:1;
        unsigned int _hasEventDelegate:1;
        unsigned int _appDying:1;
        unsigned int _didNSOpenOrPrint:1;
        unsigned int _inDealloc:1;
        unsigned int _pendingDidFinish:1;
        unsigned int _hasKeyFocus:1;
        unsigned int _panelsNonactivating:1;
        unsigned int _hiddenOnLaunch:1;
        unsigned int _openStatus:2;
        unsigned int _batchOrdering:1;
        unsigned int _waitingForTerminationReply:1;
        unsigned int _windowMoveDisabled:1;
        unsigned int _enumeratingMemoryPressureHandlers:1;
        unsigned int _didTryRestoringPersistentState:1;
        unsigned int _reservedN:1;
        unsigned int _mightBeSwitching:1;
    } _appFlags;
    id _mainMenu;
    id _openWindows;
    NSAppearance *_appearance;
    id _eventDelegate;
    struct NSThreadPrivate *_threadingSupport;
}

+ (void)_resetCurrentDeferredActivation;
+ (BOOL)_isCurrentActivationDeferred;
+ (void)_startDrawingThread:(id)arg1;
+ (void)detachDrawingThread:(SEL)arg1 toTarget:(id)arg2 withObject:(id)arg3;
+ (void)_initializeSharedApplicationForCarbonAppIfNecessary;
+ (id)sharedApplication;
+ (void)_preventDockConnections;
+ (void)_accessibilityInitialize;
+ (void)_userLoggedOut;
+ (void)initialize;
+ (void)load;
+ (void)_initializeRegisteredDefaults;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (void)_installDisplayCycleCompletionBlock:(CDUnknownBlockType)arg1;
+ (id)_urlsWithWithPathOrPaths:(id)arg1 itWasPaths:(char *)arg2;
+ (id)_URLsWithEvent:(id)arg1;
+ (id)_fileURLsWithEvent:(id)arg1;
+ (id)_logicalURLsForRawURLs:(id)arg1 event:(id)arg2;
+ (BOOL)willRestoreState;
- (void).cxx_destruct;
@property __weak id accessibilityParent; // @dynamic accessibilityParent;
@property struct CGRect accessibilityFrame; // @dynamic accessibilityFrame;
- (BOOL)_shouldLoadMainNibNamed:(id)arg1;
- (long long)memoryStatus;
- (void)_installMemoryStatusDispatchSources;
- (void)_installMemoryPressureDispatchSources;
- (void)_fakeMemoryPressureHandler:(id)arg1;
- (void)_callMemoryPressureHandlers;
- (void)removeIdleMonitor:(id)arg1;
- (id)addIdleMonitorUsingHandler:(CDUnknownBlockType)arg1;
- (void)removeMemoryPressureMonitor:(id)arg1;
- (id)addMemoryPressureMonitorUsingHandler:(CDUnknownBlockType)arg1;
- (void)_doCopyMemoryPressureArrayOnWriteIfNecessary;
- (void)abortAllToolTips;
- (void)setCanEnterFullScreenMode:(BOOL)arg1;
- (BOOL)canEnterFullScreenMode;
- (void)exitFullScreenMode:(id)arg1;
- (void)enterFullScreenMode:(id)arg1;
@property(readonly) unsigned long long currentSystemPresentationOptions;
- (void)_setPresentationOptions:(unsigned long long)arg1 instance:(id)arg2 flags:(unsigned long long)arg3;
- (void)_setPresentationOptions:(unsigned long long)arg1 flags:(unsigned long long)arg2;
@property unsigned long long presentationOptions;
- (long long)userInterfaceLayoutDirection;
- (void)_enableSuddenTermination;
- (BOOL)_disableSuddenTermination;
- (BOOL)_processSwitchesEnabled;
- (BOOL)isFullKeyboardAccessEnabled;
- (void)orderFrontCharacterPalette:(id)arg1;
- (void)_reopenWindowsAsNecessaryIncludingRestorableState:(BOOL)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (unsigned long long)_launchTaskMask;
- (void)_setLaunchTaskMaskBits:(unsigned long long)arg1;
- (void)_whenReopeningIsAllowedDo:(CDUnknownBlockType)arg1;
- (void)_continueReopening;
- (void)_delayReopening;
- (void)doCommandBySelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)_kitBundle;
- (BOOL)validateMenuItem:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (BOOL)_isNSDocumentBased;
- (void)showGuessPanel:(id)arg1;
- (void)stopDictation:(id)arg1;
- (void)startDictation:(id)arg1;
- (void)stopSpeaking:(id)arg1;
- (BOOL)isSpeaking;
- (void)speakString:(id)arg1;
- (void)speechSynthesizer:(id)arg1 didFinishSpeaking:(BOOL)arg2;
- (void)reportException:(id)arg1;
- (id)_exceptionListeners;
- (void)_unregisterExceptionListener:(id)arg1;
- (void)_registerExceptionListener:(id)arg1;
- (BOOL)_canShowExceptions;
- (void)_showException:(id)arg1;
- (void)_crashOnException:(id)arg1;
- (long long)_pendingActCount;
- (id)_setCurrentActivation:(long long)arg1;
- (long long)_currentActivation;
- (BOOL)_handleKeyFocusNotification:(long long)arg1 withEvent:(id)arg2;
- (BOOL)_handleHotKeyRelease:(id)arg1;
- (BOOL)_handleHotKeyPressed:(id)arg1;
- (void)_handleAppKitDefinedEvent:(id)arg1;
- (id)_openWindows;
- (void)_removeOpenWindow:(id)arg1;
- (void)_addOpenWindow:(id)arg1;
- (id)_addWindow:(id)arg1;
- (id)_removeWindow:(id)arg1;
- (long long)_indexOfWindow:(id)arg1;
- (BOOL)_windowMoveDisabled;
- (void)_setWindowMoveDisabled:(BOOL)arg1;
- (struct __CFArray *)_createDockMenu:(BOOL)arg1;
- (struct __CFArray *)_flattenMenu:(id)arg1;
- (struct __CFArray *)_flattenMenu:(id)arg1 flatList:(id)arg2;
- (struct __CFDictionary *)_flattenMenuItem:(id)arg1;
- (struct __CFDictionary *)_flattenMenuItem:(id)arg1 flatList:(id)arg2;
- (int)_sendDockMenuCommand:(unsigned int)arg1 withTag:(unsigned long long)arg2 modifierFlags:(unsigned long long)arg3 originatingDisplay:(int)arg4;
- (int)_sendDockMenuCommand:(unsigned int)arg1 withTag:(unsigned long long)arg2 modifierFlags:(unsigned long long)arg3;
- (void)setDockMenu:(id)arg1;
@property(retain) NSMenu *helpMenu;
- (id)menu;
- (void)setMenu:(id)arg1;
@property(retain) NSMenu *mainMenu;
- (void)_setMainMenu:(id)arg1;
- (void)_addUpdaterForDocumentMenuItem:(id)arg1;
- (BOOL)_quitMenuItemShouldKeepWindows:(id)arg1;
- (BOOL)_isAlternateQuitMenuItem:(id)arg1;
- (void)_reactToChangeInQuitAlwaysKeepsWindows:(id)arg1;
- (void)updateWindows;
- (void)setWindowsNeedUpdate:(BOOL)arg1;
- (id)_copyWindows;
@property(readonly, copy) NSArray *windows;
- (BOOL)setActivationPolicy:(long long)arg1;
- (long long)activationPolicy;
- (id)_appIcon;
- (void)_dockRestarted;
@property(readonly) NSDockTile *dockTile;
@property(retain) NSImage *applicationIconImage;
- (id)_iconImageIfSet;
- (id)_iconImage;
- (void)_setApplicationIconImage:(id)arg1 setDockImage:(BOOL)arg2;
- (void)_dockDied;
- (void)_cycleUtilityWindowsReversed:(BOOL)arg1;
- (void)_cycleWindowsReversed:(BOOL)arg1;
- (void)_makeWindowsPerform:(SEL)arg1 forEvent:(id)arg2 inWindow:(id)arg3 standardWindowButton:(unsigned long long)arg4;
- (id)makeWindowsPerform:(SEL)arg1 inOrder:(BOOL)arg2;
- (void)enumerateWindowsWithOptions:(long long)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)_findWindowWithOptions:(long long)arg1 passingTest:(CDUnknownBlockType)arg2;
- (void)_enumerateOnScreenWindowsUsingBlock:(CDUnknownBlockType)arg1;
- (id)frontWindow;
- (BOOL)_areAllPanelsNonactivating;
- (void)_setAllPanelsNonactivating:(BOOL)arg1;
- (int)_releaseKeyFocus;
- (int)_stealKeyFocusWithOptions:(unsigned int)arg1;
- (void)_setHasKeyFocus:(BOOL)arg1;
- (BOOL)_hasKeyFocus;
- (void)_obtainKeyFocus;
- (void)_resignKeyFocus;
- (void)quickLookPreviewItemsAtWindowLocation:(struct CGPoint)arg1;
- (void)quickLookPreviewItems:(id)arg1;
- (void)_handleActivateDeferredEvent:(id)arg1;
- (void)_handleDeactivateEvent:(id)arg1;
- (void)_handleReactivateEvent:(id)arg1;
- (void)_handleActivatedEvent:(id)arg1;
- (void)event:(id)arg1 wouldActivateWindow:(id)arg2;
- (void)_activeDisplayChanged:(id)arg1;
- (void)_declineSpaceChangedNotification;
- (void)_requestSpaceChangedNotification;
- (void)activeSpaceChanged:(id)arg1;
- (void)_updateActiveWindowForSpaceChange;
- (BOOL)_anyOfMyWindowsAreOnAVisibleNonFullScreenSpace;
- (void)_updateFullScreenPresentationOptionsForInstance:(id)arg1;
- (void)_updateFullScreenPresentationOptions;
- (BOOL)_shouldClearModalWindowLevelWhenInactive;
- (BOOL)_findKeyWindowConsideringSpacesWithOriginatingDisplayHint:(int)arg1 isAppleEventPending:(BOOL)arg2 makeKey:(BOOL)arg3;
- (id)_bestMainWindowCandidateOnScreen:(id)arg1;
- (id)_bestKeyWindowCandidateOnScreen:(id)arg1;
- (BOOL)_sendScreenNotificationWhenDockSizeChanges;
- (void)rightMouseDown:(id)arg1;
- (BOOL)_isActiveApp;
- (void)onFirstEvent;
- (void)preventWindowOrdering;
- (id)delayWindowOrdering;
- (void)_unsetShouldRestoreStateOnNextLaunch;
- (void)_setShouldRestoreStateOnNextLaunch:(BOOL)arg1;
- (BOOL)shouldRestoreStateOnNextLaunch;
- (void)terminate:(id)arg1;
- (BOOL)_expectingAppDeath;
- (BOOL)_isDying;
- (void)_terminateFromSender:(id)arg1 askIfShouldTerminate:(BOOL)arg2 saveWindows:(BOOL)arg3;
- (id)_copyPublicPersistentUIInfo;
- (void)_setDockMenuForPersistentState:(id)arg1;
- (void)restoreStateWithCoder:(id)arg1;
- (void)encodeRestorableStateWithCoder:(id)arg1;
- (void)_popPersistentStateTerminationGeneration;
- (void)_pushPersistentStateTerminationGeneration;
- (void)_reopenPersistentState;
- (void)_flushPersistentState;
- (unsigned int)_persistentStateTerminationGeneration;
- (id)_persistenceOrderedWindowNumbers;
- (void)replyToApplicationShouldTerminate:(BOOL)arg1;
- (void)_docController:(id)arg1 shouldTerminate:(BOOL)arg2;
- (BOOL)_shouldTerminate;
- (void)_setWaitingForTerminationReply:(BOOL)arg1;
- (BOOL)_waitingForTerminationReply;
- (void)_cancelAllUserAttentionRequests;
- (void)_cancelRequest:(id)arg1;
- (void)cancelUserAttentionRequest:(long long)arg1;
- (long long)requestUserAttention:(unsigned long long)arg1;
- (BOOL)_hasActiveRequest;
- (void)_setAppCentricOpenPanel:(id)arg1;
- (id)_appCentricOpenPanel;
- (void)_clearModalWindowLevels;
@property(readonly) NSWindow *modalWindow;
- (void)endModalSession:(struct _NSModalSession *)arg1;
- (long long)runModalSession:(struct _NSModalSession *)arg1;
- (struct _NSModalSession *)beginModalSessionForWindow:(id)arg1;
- (struct _NSModalSession *)beginModalSessionForWindow:(id)arg1 relativeToWindow:(id)arg2;
- (struct _NSModalSession *)_commonBeginModalSessionForWindow:(id)arg1 relativeToWindow:(id)arg2 modalDelegate:(id)arg3 didEndSelector:(SEL)arg4 contextInfo:(void *)arg5;
- (id)_orderFrontModalWindow:(id)arg1 relativeToWindow:(id)arg2;
- (void)abortModal;
- (void)endSheet:(id)arg1 returnCode:(long long)arg2;
- (void)stopModalWithCode:(long long)arg1;
- (void)endSheet:(id)arg1;
- (void)stopModal;
- (void)stop:(id)arg1;
- (void)beginSheet:(id)arg1 modalForWindow:(id)arg2 modalDelegate:(id)arg3 didEndSelector:(SEL)arg4 contextInfo:(void *)arg5;
- (long long)runModalForWindow:(id)arg1 relativeToWindow:(id)arg2;
- (BOOL)_wantsDeviceDependentEventModifierFlags;
- (long long)runModalForWindow:(id)arg1;
- (void)_doModalLoop:(struct _NSModalSession *)arg1 peek:(BOOL)arg2;
- (void)run;
- (void)_postEventHandling;
- (void)_preEventHandling;
- (void)_endRunMethod;
- (void)_startRunMethod;
- (BOOL)_didNSOpenOrPrint;
- (void)finishLaunching;
- (BOOL)_shouldDelayDocumentReopeningUntilAfterFinishLaunching;
- (id)_replyToOpen:(long long)arg1;
- (BOOL)_replyToLaunch;
- (void)_sendFinishLaunchingNotification;
- (void)_postDidFinishNotification;
- (BOOL)_isFinishLaunchingFromEventHandlersSuppressed;
- (void)_suppressFinishLaunchingFromEventHandlersWhilePerformingBlock:(CDUnknownBlockType)arg1;
- (void)_activateWindows;
- (void)_deactivateWindows;
- (void)activateIgnoringOtherApps:(BOOL)arg1;
- (void)_adjustKeyWindowFromOriginatingDisplayHint:(int)arg1;
- (int)_pendingActivationOriginatingDisplayHint;
- (void)_setPendingActivationOriginatingDisplayHint:(int)arg1;
- (void)_withAmbientOriginatingDisplayHint:(int)arg1 perform:(CDUnknownBlockType)arg2;
- (BOOL)_handlingAmbientDisplayHintDockMenuCommand;
- (int)_ambientOriginatingDisplayHint;
- (void)_setAmbientOriginatingDisplayHint:(int)arg1;
- (void)deactivate;
@property(readonly, getter=isRunning) BOOL running;
- (BOOL)_isRunningModal;
- (BOOL)_isRunningDocModal;
- (BOOL)_isRunningAppModal;
- (BOOL)_isDoingHide;
- (BOOL)_isDoingUnhide;
- (BOOL)_hiddenOnLaunch;
@property(readonly, getter=isHidden) BOOL hidden;
- (BOOL)_wantsToActivate;
- (void)_setWantsToActivate:(BOOL)arg1;
@property(readonly, getter=isActive) BOOL active;
- (void)setIsActive:(BOOL)arg1;
- (BOOL)_doOpenUntitled;
- (BOOL)_hasOpenMenuItem;
- (void)_doOpenFile:(id)arg1 ok:(long long *)arg2 tryTemp:(BOOL)arg3;
- (void)replyToOpenOrPrint:(unsigned long long)arg1;
- (BOOL)_openFileWithoutUI:(id)arg1;
- (long long)openTempFile:(id)arg1 ok:(long long *)arg2;
- (long long)openFile:(id)arg1 ok:(long long *)arg2;
- (BOOL)_isDoingOpenFile;
- (long long)unhide;
- (BOOL)_isDeactPending;
- (BOOL)_appleEventActivationInProgress;
- (void)_setAppleEventActivationInProgress:(BOOL)arg1;
- (BOOL)_mouseActivationInProgress;
- (void)_setMouseActivationInProgress:(BOOL)arg1;
- (id)_setKeyWindow:(id)arg1;
- (void)_setPreviousKeyWindow:(id)arg1;
- (id)_previousKeyWindow;
- (id)_keyWindow;
@property(readonly) __weak NSWindow *keyWindow;
- (id)_setMainWindow:(id)arg1;
- (id)_mainWindow;
@property(readonly) __weak NSWindow *mainWindow;
- (id)_windowWithContextID:(long long)arg1;
- (id)windowWithWindowNumber:(long long)arg1;
- (void)_windowNumber:(long long)arg1 changedTo:(long long)arg2;
- (void)unhideAllApplications:(id)arg1;
- (void)hideOtherApplications:(id)arg1;
- (void)unhideWithoutActivation;
- (void)_doUnhideWithoutActivation;
- (void)_doUnhideWithoutActivationMaybeFakingIt:(BOOL)arg1;
- (BOOL)_batchOrdering;
- (void)unhide:(id)arg1;
- (void)hide:(id)arg1;
- (void)_afterBatchOrderingFinishesDo:(CDUnknownBlockType)arg1;
- (void)_performBatchWindowOrdering:(int)arg1 release:(BOOL)arg2;
- (CDUnknownBlockType)_copyBatchWindowOrderingPerformerForToken:(int)arg1 release:(BOOL)arg2;
- (void)_scheduleWindow:(long long)arg1 forBatchOrdering:(long long)arg2 relativeTo:(long long)arg3;
- (long long)_lowestWindowOfAtLeastNormalWindowLevelAfterScheduledBatchOrdering;
- (void)_unscheduleWindowForBatchOrdering:(long long)arg1;
- (int)_startBatchWindowAccumulation:(long long)arg1;
- (void)_switchToSpaceIfNeeded;
- (void)_orderWindowsAndSwitchToSpaceIfNeeded;
- (void)_doFakeUnhide;
- (void)_doHide;
- (void)_doHideMaybeFakingIt:(BOOL)arg1;
- (id)_hiddenWindows;
- (void)_removeHiddenWindow:(id)arg1;
- (void)_addHiddenWindow:(id)arg1;
- (id)context;
- (unsigned int)contextID;
@property __weak id <NSApplicationDelegate> delegate;
- (id)_eventDelegate;
- (void)_setEventDelegate:(id)arg1;
- (void)dealloc;
- (void)_deallocHardCore:(BOOL)arg1;
@property(readonly) unsigned long long occlusionState;
- (void)_dockBehaviorChanged:(id)arg1;
- (void)_setDoubleClickBehavior;
- (void)_eventBlockingTransitionDidEnd;
- (void)_eventBlockingTransitionWillBegin;
- (void)_accessibilityStatusChanged:(id)arg1;
- (id)init;
- (void)_initializeAutomaticTermination;
- (void)_makeSureAutomaticTerminationIsNotInterferingWithLanguagePrefs:(id)arg1;
- (void)_enableAutomaticTerminationIfWhitelisted;
- (void)_forceAutoQuit:(id)arg1;
- (void)_terminateOnMemoryPressure:(id)arg1;
- (void)_unfreezeAutomaticTerminationState;
- (void)_freezeAutomaticTerminationState;
- (BOOL)_applicationLaunchIsPastSplashScreens;
- (void)_spacesSwitchOnActivationChanged:(id)arg1;
- (BOOL)_spacesSwitchOnActivation;
- (void)_setSpacesSwitchOnActivation;
- (BOOL)_isFakeHidden;
- (void)_setFakeHidden:(BOOL)arg1;
- (void)_setIsHidden:(BOOL)arg1;
- (void)_updateButtonsForSystemUIModeChanged;
- (void)_removeSystemUIModeHandler;
- (void)_registerWithDock;
- (void)_installAutoreleasePoolsOnCurrentThreadIfNecessary;
- (void)_cleanUpForCarbonAppTermination;
- (void)_postExtendedLaunchSignposts;
- (void)_postBasicLaunchSignposts;
- (void)_postSignpostsForCurrentPhase;
- (void)_postSignpostsPossiblyDeferred;
- (void)_finishedExtendedLaunch;
- (void)_finishedBasicLaunch;
- (BOOL)_isAppOptedIntoExtendedLaunchSignposts;
- (void)markAppLaunchComplete;
- (void)_emitApplicationLaunchSignpost;
- (id)_applicationBundle;
- (BOOL)_inInstallEnvironment;
- (id)_accessibilityUIElementSpecifierRegisterIfNeeded:(BOOL)arg1;
- (id)_accessibilityUIElementSpecifier;
- (struct _NSModalSession *)_previousModalSession:(struct _NSModalSession *)arg1;
- (id)_windowForModalSession:(struct _NSModalSession *)arg1;
- (struct _NSModalSession *)_modalSessionForWindow:(id)arg1;
- (id)willPresentError:(id)arg1;
- (BOOL)presentError:(id)arg1;
- (void)presentError:(id)arg1 modalForWindow:(id)arg2 delegate:(id)arg3 didPresentSelector:(SEL)arg4 contextInfo:(void *)arg5;
- (void)_something:(id)arg1 wasPresentedWithResult:(long long)arg2 soContinue:(CDUnknownBlockType)arg3;
- (id)_validateError:(id)arg1 forPresentationMethod:(SEL)arg2;
- (void)_setNeedsUpdateToReflectAutomaticTerminationState;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (BOOL)_tryTransformingToBackgroundTypeForAutoQuit;
- (BOOL)_checkForAutomaticTerminationSupportPossiblyEnablingIt;
- (void)enableAutomaticTermination;
- (void)disableAutomaticTermination;
- (void)_userNotificationCenter:(id)arg1 didActivateWithToken:(id)arg2;
- (id)_userNotificationCenter:(id)arg1 willActivateForNotification:(id)arg2 additionalUserInfo:(id)arg3;
@property(readonly) unsigned long long enabledRemoteNotificationTypes;
@property(readonly, getter=isRegisteredForRemoteNotifications) BOOL registeredForRemoteNotifications;
- (void)unregisterForRemoteNotifications;
- (void)registerForRemoteNotifications;
- (void)registerForRemoteNotificationTypes:(unsigned long long)arg1;
- (void)pushRegistrationDidReceiveRemotePush:(id)arg1;
- (void)pushRegistrationDidFailToRegister:(id)arg1;
- (void)pushRegistrationDidRegisterWithDeviceToken:(id)arg1;
- (void)_startPrefetchingUbiquityContainerURL;
- (void)_ubiquityIdentityDidChange:(id)arg1;
- (void)_asynchronouslyPrefetchUbiqityContainerURL;
@property(readonly) NSTouchBar *touchBar;
- (void)_addFullScreenMenuItemIfNeeded;
- (void)_customizeFileMenuIfNeeded;
- (id)_findMenuItemWithSelector:(SEL)arg1;
- (id)_findMenuItemMatchingPredicate:(CDUnknownBlockType)arg1;
- (void)_customizeMainMenu;
- (void)_addTextInputMenuItems:(id)arg1;
- (id)_bestAppearanceCustomizationTargetForAction:(SEL)arg1 to:(id)arg2;
- (void)importFromDevice:(id)arg1;
- (void)_customizeImportFromDeviceMenuItem;
- (id)accessibilityFunctionRowTopLevelElementsAttribute;
- (BOOL)accessibilityShouldUseUniqueId;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHitTest;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (id)_accessibilityViewBridgeHitTest:(struct CGPoint)arg1;
- (BOOL)accessibilityIsIgnored;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeValue:(id)arg1 forParameter:(id)arg2;
- (id)_accessibilityPopovers;
- (void)accessibilitySetValue:(id)arg1 forAttribute:(id)arg2;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAuditIssuesAttribute;
- (id)accessibilityExtrasMenuBarAttribute;
- (void)accessibilitySetEnhancedUserInterfaceAttribute:(id)arg1;
- (BOOL)accessibilityIsEnhancedUserInterfaceAttributeSettable;
- (id)accessibilityEnhancedUserInterfaceAttribute;
- (BOOL)accessibilityIsFocusedUIElementAttributeSettable;
- (id)accessibilityFocusedUIElementAttribute;
- (BOOL)accessibilityIsFocusedWindowAttributeSettable;
- (id)accessibilityFocusedWindowAttribute;
- (BOOL)accessibilityIsMainWindowAttributeSettable;
- (id)accessibilityMainWindowAttribute;
- (void)accessibilitySetHiddenAttribute:(id)arg1;
- (BOOL)accessibilityIsHiddenAttributeSettable;
- (id)accessibilityHiddenAttribute;
- (void)accessibilitySetFrontmostAttribute:(id)arg1;
- (BOOL)accessibilityIsFrontmostAttributeSettable;
- (id)accessibilityFrontmostAttribute;
- (BOOL)accessibilityIsChildrenAttributeSettable;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityChildrenInNavigationOrderAttribute;
- (id)_accessibilityValueForAttribute:(id)arg1 clientError:(int *)arg2;
- (BOOL)accessibilityIsWindowsAttributeSettable;
- (id)accessibilityWindowsAttribute;
- (BOOL)accessibilityIsMenuBarAttributeSettable;
- (id)accessibilityMenuBarAttribute;
- (BOOL)accessibilityIsTitleAttributeSettable;
- (id)accessibilityTitleAttribute;
- (BOOL)accessibilityIsRoleDescriptionAttributeSettable;
- (id)accessibilityRoleDescriptionAttribute;
- (BOOL)accessibilityIsRoleAttributeSettable;
- (id)accessibilityRoleAttribute;
- (id)accessibilityAttributeNames;
- (void)accessibilityWorkaroundRemoveExtraWindow:(id)arg1;
- (void)accessibilityWorkaroundAddExtraWindow:(id)arg1;
- (BOOL)accessibilityMayContainProtectedContent;
- (void)accessibilitySetMayContainProtectedContent:(BOOL)arg1;
- (id)_accessibilityCompatibilityHitTest:(struct CGPoint)arg1;
- (void)_accessibilityEventProcessed:(id)arg1;
- (void)_accessibilityEventReceived:(id)arg1;
- (void)setAccessibilityEventProcessedNotificationEnabled:(BOOL)arg1;
- (BOOL)isAccessibilityEventProcessedNotificationEnabled;
- (BOOL)isAccessibilityEventProcessedNotificationSupported;
- (void)setAccessibilityMainThreadIdleNotificationEnabled:(BOOL)arg1;
- (BOOL)isAccessibilityMainThreadIdleNotificationEnabled;
- (BOOL)isAccessibilityMainThreadIdleNotificationSupported;
- (void)handleQuitScriptCommand:(id)arg1;
- (void)handlePrintScriptCommand:(id)arg1;
- (id)handleOpenScriptCommand:(id)arg1;
- (unsigned long long)_scriptingCount;
- (long long)_supportsGetValueWithUniqueIDForKey:(id)arg1 perhapsByOverridingClass:(Class)arg2;
- (long long)_supportsGetValueWithNameForKey:(id)arg1 perhapsByOverridingClass:(Class)arg2;
- (void)replaceValueAtIndex:(unsigned long long)arg1 inPropertyWithKey:(id)arg2 withValue:(id)arg3;
- (void)removeValueAtIndex:(unsigned long long)arg1 fromPropertyWithKey:(id)arg2;
- (void)insertValue:(id)arg1 inPropertyWithKey:(id)arg2;
- (void)insertValue:(id)arg1 atIndex:(unsigned long long)arg2 inPropertyWithKey:(id)arg3;
- (id)valueWithUniqueID:(id)arg1 inPropertyWithKey:(id)arg2;
- (id)valueWithName:(id)arg1 inPropertyWithKey:(id)arg2;
- (id)valueAtIndex:(unsigned long long)arg1 inPropertyWithKey:(id)arg2;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (id)valueForKey:(id)arg1;
- (id)newScriptingObjectOfClass:(Class)arg1 forValueForKey:(id)arg2 withContentsValue:(id)arg3 properties:(id)arg4;
- (id)copyScriptingValue:(id)arg1 forKey:(id)arg2 withProperties:(id)arg3;
- (BOOL)_delegate:(id)arg1 handlesKey:(id)arg2;
- (id)valueInOrderedWindowsWithUniqueID:(long long)arg1;
@property(readonly, copy) NSArray *orderedWindows;
- (id)_orderedWindowsWithPanels:(BOOL)arg1;
@property(readonly, copy) NSArray *orderedDocuments;
- (void)_registerRequiredAEHandlers;
- (BOOL)_supportsOpenURLs;
- (void)_handleCoreEvent:(id)arg1 withReplyEvent:(id)arg2;
- (int)_extractOriginatingDisplayHintFromAppleEvent:(id)arg1;
- (void)_handleTestEvent:(id)arg1 withReplyEvent:(id)arg2;
- (int)_handleSelfTestEvent:(id)arg1;
- (short)_handleAEQuit;
- (short)_handleAEOpenContentsEvent:(id)arg1 withReplyEvent:(id)arg2;
- (short)_handleAEPrintDocumentsForURLs:(id)arg1 withSettings:(id)arg2 showPrintPanels:(BOOL)arg3;
- (short)_handleAEGetURLEvent:(id)arg1;
- (short)_handleAECloudKitShareInvitationEvent:(id)arg1;
- (short)_handleAEContinueUserActivityEvent:(id)arg1;
- (short)_handleAEOpenDocumentsForURLs:(id)arg1;
- (void)_openURLs:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)_resumeAppleEventWithSuspensionIDValue:(id)arg1;
- (void)_forAEOpenDocumentsEvent:(id)arg1 populateReplyEvent:(id)arg2 withURLs:(id)arg3 documents:(id)arg4;
- (void)_handleAEReopen:(id)arg1;
- (void)_handleAEOpenEvent:(id)arg1;
- (BOOL)_requiresOpeningUntitledWindowAtLaunch;
- (void)_reopenWindowsIfNecessaryWithAppleEvent:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (BOOL)_shouldRestoreWithFullFidelity;
- (long long)runModalForCarbonWindow:(id)arg1;
- (void)_doModalLoopForCarbonWindow:(struct _NSModalSession *)arg1 peek:(BOOL)arg2;
- (void)orderFrontColorPanel:(id)arg1;
- (void)toggleTouchBarControlStripCustomizationPalette:(id)arg1;
- (BOOL)_validateTouchBarCustomizationPaletteItem:(id)arg1;
- (void)orderFrontPreferencesPanel:(id)arg1;
- (BOOL)_handleCursorRectEvent:(id)arg1;
- (BOOL)areCursorRectsEnabled;
- (void)enableCursorRects;
- (void)disableCursorRects;
- (void)_setCursorForCurrentMouseLocation;
- (id)_restoreCursor;
- (id)_cursorRectCursor;
- (void)_resetCursorStack;
- (void)orderFrontFontPanel:(id)arg1;
- (void)showHelp:(id)arg1;
- (void)activateContextHelpMode:(id)arg1;
- (void)_invalidateWindowAppearances;
- (void)_refreshSetAppearance;
- (void)_invalidateEffectiveAppearance;
@property(readonly) NSAppearance *effectiveAppearance;
@property(retain) NSAppearance *appearance;
- (void)_observeValueForSystemAppearanceKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3;
- (void)_unregisterForAppearanceNotifications;
- (void)_registerForAppearanceNotifications;
- (id)NS_touchBarProviders;
- (id)NS_touchBarProvidersKeyPaths;
- (void)runPageLayout:(id)arg1;
- (id)_eventFirstResponderChainDescription;
- (void)unregisterServiceProviderNamed:(id)arg1;
- (void)registerServiceProvider:(id)arg1 withName:(id)arg2;
@property(retain) id servicesProvider;
- (void)_addDebugMenuIfNeeded;
- (id)_debugMenu;
- (void)_modalSession:(struct _NSModalSession *)arg1 sendEvent:(id)arg2;
- (BOOL)_isSuppressGestureSubMaskChangesEnabled;
- (void)_setSupressGestureSubMaskChangesEnabled:(BOOL)arg1;
- (void)_setGestureEventMask:(unsigned long long)arg1;
- (unsigned long long)_gestureEventMask;
- (unsigned long long)_lastEventRecordTime;
- (void)_setCurrentEvent:(id)arg1;
- (BOOL)_handleSymbolicHotKey:(id)arg1;
- (BOOL)_handleKeyEquivalent:(id)arg1;
- (void)setGestureEventMask:(unsigned long long)arg1;
- (unsigned long long)gestureEventMask;
- (BOOL)shouldBeTreatedAsInkEvent:(id)arg1;
- (id)_nextEventMatchingEventMask:(unsigned long long)arg1 untilDate:(id)arg2 inMode:(id)arg3 dequeue:(BOOL)arg4;
- (id)nextEventMatchingMask:(unsigned long long)arg1 untilDate:(id)arg2 inMode:(id)arg3 dequeue:(BOOL)arg4;
- (void)postEvent:(id)arg1 atStart:(BOOL)arg2;
- (void)discardEventsMatchingMask:(unsigned long long)arg1 beforeEvent:(id)arg2;
@property(readonly) NSEvent *currentEvent;
- (void)sendEvent:(id)arg1;
- (void)_removeKeyOverrideWindow:(id)arg1;
- (void)_addKeyOverrideWindow:(id)arg1;
- (id)supplementalTargetForAction:(SEL)arg1 sender:(id)arg2;
- (BOOL)sendAction:(SEL)arg1 to:(id)arg2 from:(id)arg3;
- (id)targetForAction:(SEL)arg1 to:(id)arg2 from:(id)arg3;
- (id)targetForAction:(SEL)arg1;
- (id)validRequestorForSendType:(id)arg1 returnType:(id)arg2;
- (BOOL)tryToPerform:(SEL)arg1 with:(id)arg2;
- (void)orderFrontStandardAboutPanelWithOptions:(id)arg1;
- (void)orderFrontStandardAboutPanel:(id)arg1;
- (void)resetAutomaticCustomizeTouchBarMenuItemEnabled;
- (void)_setAutomaticCustomizeTouchBarMenuItemEnabled:(id)arg1;
@property(getter=isAutomaticCustomizeTouchBarMenuItemEnabled) BOOL automaticCustomizeTouchBarMenuItemEnabled;
- (void)toggleTouchBarCustomizationPalette:(id)arg1;
- (id)_responsibleDelegateForSelector:(SEL)arg1;
- (void)setAppleMenu:(id)arg1;
- (void)_restoreMiniaturizedWindow;
- (void)_makeModalWindowsPerform:(SEL)arg1;
- (BOOL)_isModalUsingCache:(id)arg1;
- (void)_setModalInCache:(BOOL)arg1 forWindow:(id)arg2;
- (void)_makeHODWindowsPerform:(SEL)arg1;
- (void)_setHidesOnDeactivateInCache:(BOOL)arg1 forWindow:(id)arg2;
- (BOOL)_isVisibleUsingCache:(id)arg1;
- (void)_removeWindowFromCache:(id)arg1;
- (void)_setVisibleInCache:(BOOL)arg1 forWindow:(id)arg2;
- (void)_scheduleCheckForTerminateAfterLastWindowClosed;
- (void)_checkForTerminateAfterLastWindowClosed:(id)arg1 saveWindows:(BOOL)arg2;
- (BOOL)_appHasNonMiniaturizedWindow;
- (BOOL)_appHasOpenNSWindow;
- (BOOL)_appHasOpenNSWindowOrPanel;
- (BOOL)_appHasVisibleWindowOrPanel;
- (void)_setCacheWindowNum:(long long)arg1 forWindow:(id)arg2;
- (void)_updateWindowsUsingCache;
- (id)_findWindowUsingContextID:(long long)arg1;
- (id)_findWindowUsingCache:(long long)arg1;
- (id)_getWindowData:(id)arg1 add:(BOOL)arg2;
- (void)_invalidateWindowListForCycleIfNeededForWindow:(id)arg1;
- (void)_unlockWindowListForCycle;
- (id)_getLockedWindowListForCycle;
- (BOOL)_lockOrUnlockWindowCycleList:(BOOL)arg1;
- (BOOL)_fillSpellCheckerPopupButton:(id)arg1;
- (BOOL)_launchSpellChecker:(long long)arg1;
- (BOOL)_launchSpellChecker:(long long)arg1 error:(id *)arg2;
- (void)_rebuildOrUpdateServicesMenu:(BOOL)arg1;
- (void)registerServicesMenuSendTypes:(id)arg1 returnTypes:(id)arg2;
- (void)setServicesMenu:(id)arg1;
- (id)servicesMenu;
- (void)removeWindowsItem:(id)arg1;
- (void)addWindowsItem:(id)arg1 title:(id)arg2 filename:(BOOL)arg3;
- (void)updateWindowsItem:(id)arg1;
- (void)changeWindowsItem:(id)arg1 title:(id)arg2 filename:(BOOL)arg3;
- (void)alternateArrangeInFront:(id)arg1;
- (void)arrangeInFront:(id)arg1;
- (void)zoomAll:(id)arg1;
- (void)closeAll:(id)arg1;
- (void)miniaturizeAll:(id)arg1;
@property(retain) NSMenu *windowsMenu;
- (void)_addWindowsMenu:(struct __CFArray *)arg1 enabled:(BOOL)arg2;
- (void)_displayProgressNotification:(float)arg1 isIndeterminate:(BOOL)arg2;
- (void)_displayStatusNotification:(id)arg1 title:(id)arg2 options:(id)arg3;
- (void)setDefaultHelpBookSearchEnabled:(BOOL)arg1;
- (BOOL)isDefaultHelpBookSearchEnabled;
- (BOOL)searchString:(id)arg1 inUserInterfaceItemString:(id)arg2 searchRange:(struct _NSRange)arg3 foundRange:(struct _NSRange *)arg4;
- (void)unregisterUserInterfaceItemSearchHandler:(id)arg1;
- (void)registerUserInterfaceItemSearchHandler:(id)arg1;
- (void)_openFeedbackAssistant:(id)arg1;
- (void)_addFeedbackMenuItemIfNeeded;
- (id)_feedbackMenuTitle;
- (id)_feedbackMenuAppName;
- (BOOL)_shouldShowFeedbackMenuItem;
- (id)_feedbackURL;
- (void)_enableRestorableStateWriting;
- (void)_disableRestorableStateWriting;
- (long long)_stateRestorationExtensionCounter;
- (void)completeStateRestoration;
- (void)extendStateRestoration;
- (void)_disableRelaunchOnLoginIfNotLaunchedByLaunchServicesOrBlacklisted;
- (void)enableRelaunchOnLogin;
- (void)disableRelaunchOnLogin;
- (void)_invalidateRestorableStateOfContents;
- (BOOL)_shouldRecordPersistentState;
- (BOOL)_hasInvalidRestorableState;
- (void)_setHasInvalidRestorableState:(BOOL)arg1;
- (void)_setContentsHaveInvalidRestorableState:(BOOL)arg1;
- (BOOL)_contentsHaveInvalidRestorableState;
- (id)_persistentUIIdentifier;
- (unsigned int)_persistentUIWindowID;
- (id)_persistentUIWindow;
- (void)_cancelGestureRecognizers:(id)arg1;
- (id)_kitAppearance;
@property(readonly) id <NSAppearanceCustomization> _effectiveAppearanceParent;
- (void)_restoreWindowWithRestoration:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_restoreGlobalStateWithRestoration:(id)arg1;
- (BOOL)restoreWindowWithIdentifier:(id)arg1 state:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (id)_tryRestorationHeuristicsForWindowWithIdentifier:(id)arg1 state:(id)arg2;
- (void)_registerForDisplayChangedNotifications;
- (void)_reactToDisplayProfileChangedNotification;
- (void)_reactToDockChanged;
- (void)_reactToPresentationChanged;
- (void)_reactToDisplayChangedEvent:(unsigned int)arg1;
- (void)_reactToExtendedDynamicRangeChangeNotification;
- (void)_reactToAcceleratorChangedNotification;
- (void)_reactToDisplayChangedNotification;
- (void)_reactToScreenInvalidationImmediately:(BOOL)arg1;
- (void)_reactToScreenInvalidation:(BOOL)arg1;
- (void)_prepareForPossibleScreenInvalidation:(BOOL)arg1;
- (BOOL)_finishHandlingDisplayReconfig;
- (BOOL)_isHandlingDisplayReconfigThatWillRepositionWindows;
- (BOOL)_startHandlingDisplayReconfig:(BOOL)arg1;
- (void)_updateCanQuitQuietlyAndSafely;
- (id)_debugCanQuietSafeQuit;
- (BOOL)_canQuitQuietlyAndSafelyWithOptionalExplanation:(id)arg1;
- (BOOL)_canAutoQuitQuietlyAndSafelyWithOptionalExplanation:(id)arg1;
- (BOOL)_globalCanQuietAndSafeQuit;

// Remaining properties
@property struct CGPoint accessibilityActivationPoint; // @dynamic accessibilityActivationPoint;
@property(copy) NSArray *accessibilityAllowedValues; // @dynamic accessibilityAllowedValues;
@property(getter=isAccessibilityAlternateUIVisible) BOOL accessibilityAlternateUIVisible; // @dynamic accessibilityAlternateUIVisible;
@property(retain) id accessibilityApplicationFocusedUIElement; // @dynamic accessibilityApplicationFocusedUIElement;
@property(retain) id accessibilityCancelButton; // @dynamic accessibilityCancelButton;
@property(copy) NSArray *accessibilityChildren; // @dynamic accessibilityChildren;
@property(copy) NSArray *accessibilityChildrenInNavigationOrder; // @dynamic accessibilityChildrenInNavigationOrder;
@property(retain) id accessibilityClearButton; // @dynamic accessibilityClearButton;
@property(retain) id accessibilityCloseButton; // @dynamic accessibilityCloseButton;
@property long long accessibilityColumnCount; // @dynamic accessibilityColumnCount;
@property(copy) NSArray *accessibilityColumnHeaderUIElements; // @dynamic accessibilityColumnHeaderUIElements;
@property struct _NSRange accessibilityColumnIndexRange; // @dynamic accessibilityColumnIndexRange;
@property(copy) NSArray *accessibilityColumnTitles; // @dynamic accessibilityColumnTitles;
@property(copy) NSArray *accessibilityColumns; // @dynamic accessibilityColumns;
@property(copy) NSArray *accessibilityContents; // @dynamic accessibilityContents;
@property(retain) id accessibilityCriticalValue; // @dynamic accessibilityCriticalValue;
@property(copy) NSArray *accessibilityCustomActions; // @dynamic accessibilityCustomActions;
@property(copy) NSArray *accessibilityCustomRotors; // @dynamic accessibilityCustomRotors;
@property(retain) id accessibilityDecrementButton; // @dynamic accessibilityDecrementButton;
@property(retain) id accessibilityDefaultButton; // @dynamic accessibilityDefaultButton;
@property(getter=isAccessibilityDisclosed) BOOL accessibilityDisclosed; // @dynamic accessibilityDisclosed;
@property __weak id accessibilityDisclosedByRow; // @dynamic accessibilityDisclosedByRow;
@property(retain) id accessibilityDisclosedRows; // @dynamic accessibilityDisclosedRows;
@property long long accessibilityDisclosureLevel; // @dynamic accessibilityDisclosureLevel;
@property(copy) NSString *accessibilityDocument; // @dynamic accessibilityDocument;
@property(getter=isAccessibilityEdited) BOOL accessibilityEdited; // @dynamic accessibilityEdited;
@property(getter=isAccessibilityElement) BOOL accessibilityElement; // @dynamic accessibilityElement;
@property(getter=isAccessibilityEnabled) BOOL accessibilityEnabled; // @dynamic accessibilityEnabled;
@property(getter=isAccessibilityExpanded) BOOL accessibilityExpanded; // @dynamic accessibilityExpanded;
@property __weak id accessibilityExtrasMenuBar; // @dynamic accessibilityExtrasMenuBar;
@property(copy) NSString *accessibilityFilename; // @dynamic accessibilityFilename;
@property(getter=isAccessibilityFocused) BOOL accessibilityFocused; // @dynamic accessibilityFocused;
@property(retain) id accessibilityFocusedWindow; // @dynamic accessibilityFocusedWindow;
@property(getter=isAccessibilityFrontmost) BOOL accessibilityFrontmost; // @dynamic accessibilityFrontmost;
@property(retain) id accessibilityFullScreenButton; // @dynamic accessibilityFullScreenButton;
@property(retain) id accessibilityGrowArea; // @dynamic accessibilityGrowArea;
@property(copy) NSArray *accessibilityHandles; // @dynamic accessibilityHandles;
@property(retain) id accessibilityHeader; // @dynamic accessibilityHeader;
@property(copy) NSString *accessibilityHelp; // @dynamic accessibilityHelp;
@property(getter=isAccessibilityHidden) BOOL accessibilityHidden; // @dynamic accessibilityHidden;
@property(retain) id accessibilityHorizontalScrollBar; // @dynamic accessibilityHorizontalScrollBar;
@property(copy) NSString *accessibilityHorizontalUnitDescription; // @dynamic accessibilityHorizontalUnitDescription;
@property long long accessibilityHorizontalUnits; // @dynamic accessibilityHorizontalUnits;
@property(copy) NSString *accessibilityIdentifier; // @dynamic accessibilityIdentifier;
@property(retain) id accessibilityIncrementButton; // @dynamic accessibilityIncrementButton;
@property long long accessibilityIndex; // @dynamic accessibilityIndex;
@property long long accessibilityInsertionPointLineNumber; // @dynamic accessibilityInsertionPointLineNumber;
@property(copy) NSString *accessibilityLabel; // @dynamic accessibilityLabel;
@property(copy) NSArray *accessibilityLabelUIElements; // @dynamic accessibilityLabelUIElements;
@property float accessibilityLabelValue; // @dynamic accessibilityLabelValue;
@property(copy) NSArray *accessibilityLinkedUIElements; // @dynamic accessibilityLinkedUIElements;
@property(getter=isAccessibilityMain) BOOL accessibilityMain; // @dynamic accessibilityMain;
@property(retain) id accessibilityMainWindow; // @dynamic accessibilityMainWindow;
@property(retain) id accessibilityMarkerGroupUIElement; // @dynamic accessibilityMarkerGroupUIElement;
@property(copy) NSString *accessibilityMarkerTypeDescription; // @dynamic accessibilityMarkerTypeDescription;
@property(copy) NSArray *accessibilityMarkerUIElements; // @dynamic accessibilityMarkerUIElements;
@property(retain) id accessibilityMarkerValues; // @dynamic accessibilityMarkerValues;
@property(retain) id accessibilityMaxValue; // @dynamic accessibilityMaxValue;
@property __weak id accessibilityMenuBar; // @dynamic accessibilityMenuBar;
@property(retain) id accessibilityMinValue; // @dynamic accessibilityMinValue;
@property(retain) id accessibilityMinimizeButton; // @dynamic accessibilityMinimizeButton;
@property(getter=isAccessibilityMinimized) BOOL accessibilityMinimized; // @dynamic accessibilityMinimized;
@property(getter=isAccessibilityModal) BOOL accessibilityModal; // @dynamic accessibilityModal;
@property(copy) NSArray *accessibilityNextContents; // @dynamic accessibilityNextContents;
@property long long accessibilityNumberOfCharacters; // @dynamic accessibilityNumberOfCharacters;
@property(getter=isAccessibilityOrderedByRow) BOOL accessibilityOrderedByRow; // @dynamic accessibilityOrderedByRow;
@property long long accessibilityOrientation; // @dynamic accessibilityOrientation;
@property(retain) id accessibilityOverflowButton; // @dynamic accessibilityOverflowButton;
@property(copy) NSString *accessibilityPlaceholderValue; // @dynamic accessibilityPlaceholderValue;
@property(copy) NSArray *accessibilityPreviousContents; // @dynamic accessibilityPreviousContents;
@property(getter=isAccessibilityProtectedContent) BOOL accessibilityProtectedContent; // @dynamic accessibilityProtectedContent;
@property(retain) id accessibilityProxy; // @dynamic accessibilityProxy;
@property(getter=isAccessibilityRequired) BOOL accessibilityRequired; // @dynamic accessibilityRequired;
@property(copy) NSString *accessibilityRole; // @dynamic accessibilityRole;
@property(copy) NSString *accessibilityRoleDescription; // @dynamic accessibilityRoleDescription;
@property long long accessibilityRowCount; // @dynamic accessibilityRowCount;
@property(copy) NSArray *accessibilityRowHeaderUIElements; // @dynamic accessibilityRowHeaderUIElements;
@property struct _NSRange accessibilityRowIndexRange; // @dynamic accessibilityRowIndexRange;
@property(copy) NSArray *accessibilityRows; // @dynamic accessibilityRows;
@property long long accessibilityRulerMarkerType; // @dynamic accessibilityRulerMarkerType;
@property(retain) id accessibilitySearchButton; // @dynamic accessibilitySearchButton;
@property(retain) id accessibilitySearchMenu; // @dynamic accessibilitySearchMenu;
@property(getter=isAccessibilitySelected) BOOL accessibilitySelected; // @dynamic accessibilitySelected;
@property(copy) NSArray *accessibilitySelectedCells; // @dynamic accessibilitySelectedCells;
@property(copy) NSArray *accessibilitySelectedChildren; // @dynamic accessibilitySelectedChildren;
@property(copy) NSArray *accessibilitySelectedColumns; // @dynamic accessibilitySelectedColumns;
@property(copy) NSArray *accessibilitySelectedRows; // @dynamic accessibilitySelectedRows;
@property(copy) NSString *accessibilitySelectedText; // @dynamic accessibilitySelectedText;
@property struct _NSRange accessibilitySelectedTextRange; // @dynamic accessibilitySelectedTextRange;
@property(copy) NSArray *accessibilitySelectedTextRanges; // @dynamic accessibilitySelectedTextRanges;
@property(copy) NSArray *accessibilityServesAsTitleForUIElements; // @dynamic accessibilityServesAsTitleForUIElements;
@property struct _NSRange accessibilitySharedCharacterRange; // @dynamic accessibilitySharedCharacterRange;
@property(copy) NSArray *accessibilitySharedFocusElements; // @dynamic accessibilitySharedFocusElements;
@property(copy) NSArray *accessibilitySharedTextUIElements; // @dynamic accessibilitySharedTextUIElements;
@property(retain) id accessibilityShownMenu; // @dynamic accessibilityShownMenu;
@property long long accessibilitySortDirection; // @dynamic accessibilitySortDirection;
@property(copy) NSArray *accessibilitySplitters; // @dynamic accessibilitySplitters;
@property(copy) NSString *accessibilitySubrole; // @dynamic accessibilitySubrole;
@property(copy) NSArray *accessibilityTabs; // @dynamic accessibilityTabs;
@property(copy) NSString *accessibilityTitle; // @dynamic accessibilityTitle;
@property __weak id accessibilityTitleUIElement; // @dynamic accessibilityTitleUIElement;
@property(retain) id accessibilityToolbarButton; // @dynamic accessibilityToolbarButton;
@property __weak id accessibilityTopLevelUIElement; // @dynamic accessibilityTopLevelUIElement;
@property(copy) NSURL *accessibilityURL; // @dynamic accessibilityURL;
@property(copy) NSString *accessibilityUnitDescription; // @dynamic accessibilityUnitDescription;
@property long long accessibilityUnits; // @dynamic accessibilityUnits;
@property(retain) id accessibilityValue; // @dynamic accessibilityValue;
@property(copy) NSString *accessibilityValueDescription; // @dynamic accessibilityValueDescription;
@property(retain) id accessibilityVerticalScrollBar; // @dynamic accessibilityVerticalScrollBar;
@property(copy) NSString *accessibilityVerticalUnitDescription; // @dynamic accessibilityVerticalUnitDescription;
@property long long accessibilityVerticalUnits; // @dynamic accessibilityVerticalUnits;
@property(copy) NSArray *accessibilityVisibleCells; // @dynamic accessibilityVisibleCells;
@property struct _NSRange accessibilityVisibleCharacterRange; // @dynamic accessibilityVisibleCharacterRange;
@property(copy) NSArray *accessibilityVisibleChildren; // @dynamic accessibilityVisibleChildren;
@property(copy) NSArray *accessibilityVisibleColumns; // @dynamic accessibilityVisibleColumns;
@property(copy) NSArray *accessibilityVisibleRows; // @dynamic accessibilityVisibleRows;
@property(retain) id accessibilityWarningValue; // @dynamic accessibilityWarningValue;
@property __weak id accessibilityWindow; // @dynamic accessibilityWindow;
@property(copy) NSArray *accessibilityWindows; // @dynamic accessibilityWindows;
@property(retain) id accessibilityZoomButton; // @dynamic accessibilityZoomButton;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

