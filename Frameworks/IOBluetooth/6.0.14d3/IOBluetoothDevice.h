//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <IOBluetooth/IOBluetoothObject.h>

#import <IOBluetooth/NSCoding-Protocol.h>
#import <IOBluetooth/NSSecureCoding-Protocol.h>

@class IOBluetoothRFCOMMConnection, IOBluetoothSDPServiceRecord, NSArray, NSDate, NSDictionary, NSString, NSURL;

@interface IOBluetoothDevice : IOBluetoothObject <NSCoding, NSSecureCoding>
{
    id mServerDevice;
    unsigned int mDeviceConnectNotification;
    struct BluetoothDeviceAddress mAddress;
    NSString *mName;
    NSDate *mLastNameUpdate;
    unsigned int mClassOfDevice;
    unsigned char mPageScanRepetitionMode;
    unsigned char mPageScanPeriodMode;
    unsigned char mPageScanMode;
    unsigned short mClockOffset;
    NSDate *mLastInquiryUpdate;
    unsigned short mConnectionHandle;
    unsigned char mLinkType;
    unsigned char mEncryptionMode;
    NSArray *mServiceArray;
    NSDate *mLastServicesUpdate;
    IOBluetoothRFCOMMConnection *mRFCOMMConnection;
    id _mReserved;
}

+ (BOOL)isRFCOMMChannelInUse:(unsigned char)arg1 isIncoming:(BOOL)arg2;
+ (BOOL)isL2CAPPSMInUse:(unsigned short)arg1 isIncoming:(BOOL)arg2;
+ (id)deviceWithConnectionHandle:(unsigned short)arg1;
+ (id)getKeyForIOService:(unsigned int)arg1;
+ (id)getUniqueDeviceWithAddress:(const struct BluetoothDeviceAddress *)arg1;
+ (id)getUniqueObjectDictionary:(BOOL)arg1;
+ (BOOL)supportsSecureCoding;
+ (id)keyPathsForValuesAffectingNameOrAddress;
+ (id)deviceWithID:(unsigned long long)arg1;
+ (id)withAddressString:(id)arg1;
+ (id)deviceWithAddressString:(id)arg1;
+ (id)withDeviceRef:(struct OpaqueIOBluetoothObjectRef *)arg1;
+ (id)withAddress:(const struct BluetoothDeviceAddress *)arg1;
+ (id)deviceWithAddress:(const struct BluetoothDeviceAddress *)arg1;
+ (id)registerForConnectNotifications:(id)arg1 selector:(SEL)arg2;
+ (void)tbfcResumeConnectedDevices;
+ (BOOL)isAnyPairedDevicesSupportTBFCPage;
+ (id)connectedDevices;
+ (id)recentDevices:(unsigned long long)arg1;
+ (id)configuredDevices;
+ (id)favoriteDevices;
+ (id)usbBluetoothDevices;
+ (id)pairedDevices;
+ (id)keyPathsForValuesAffectingIsConnected;
@property(retain) NSDate *lastNameUpdate; // @synthesize lastNameUpdate=mLastNameUpdate;
@property(readonly) unsigned short connectionHandle; // @synthesize connectionHandle=mConnectionHandle;
@property(retain) NSArray *services; // @synthesize services=mServiceArray;
@property unsigned int classOfDevice; // @synthesize classOfDevice=mClassOfDevice;
- (int)createChannelWithCID:(unsigned int)arg1 psm:(unsigned short)arg2 mtu:(unsigned short)arg3;
- (int)SetIsHIDDevice;
- (int)channelReadyToReceiveData:(unsigned short)arg1;
- (BOOL)isiPad;
- (BOOL)isiPhone;
- (BOOL)isMac;
- (void)setAdvancedAppleAudioDeviceRegistry:(BOOL)arg1;
- (void)setProductIDRegistry:(unsigned short)arg1;
- (void)setVendorIDRegistry:(unsigned short)arg1;
- (unsigned short)productID;
- (unsigned short)vendorID;
- (BOOL)isAppleDevice;
- (id)getMacAttributesDictionary;
- (BOOL)isSpecialMicrosoftMouse;
- (BOOL)isH1;
- (BOOL)isKeyboardDevice;
- (BOOL)isPointingDevice;
- (unsigned int)lastBytesReceivedTimestamp;
- (unsigned int)lastBytesSentTimestamp;
- (unsigned long long)totalBytesReceived;
- (unsigned long long)totalBytesSent;
- (int)removeAttributeObjectForKey:(id)arg1;
- (id)attributeObjectForKey:(id)arg1;
- (int)setAttributeObject:(id)arg1 forKey:(id)arg2;
- (void)deviceWasUpdated:(id)arg1;
- (void)setAllowedPacketTypes:(unsigned short)arg1;
- (BOOL)isRFCOMMChannelInUse:(unsigned char)arg1 isIncoming:(BOOL)arg2;
- (BOOL)isL2CAPPSMInUse:(unsigned short)arg1 isIncoming:(BOOL)arg2;
- (int)sendL2CAPEchoRequest:(void *)arg1 length:(unsigned short)arg2 withFlags:(unsigned int)arg3;
- (void)setMaxACLPacketSize:(unsigned short)arg1;
- (unsigned short)maxACLPacketSize;
- (id)getL2CAPObjectsWithPSM:(unsigned short)arg1;
@property(readonly) unsigned short SCOConnectionHandle;
@property(readonly) unsigned short connectionModeInterval;
@property(readonly) unsigned char connectionMode;
- (int)instantiateChannelContinue:(unsigned short)arg1 findExisting:(BOOL)arg2 newChannel:(id)arg3;
- (void)BluetoothHCIAuthenticationComplete:(id)arg1 inStatus:(int)arg2 inAuthenticationResults:(struct BluetoothHCIEventAuthenticationCompleteResults *)arg3;
- (int)instantiateChannel:(unsigned short)arg1 findExisting:(BOOL)arg2 newChannel:(id)arg3;
- (BOOL)requiresAuthenticationEncryption:(unsigned short)arg1;
- (void)checkRetainCount;
- (void)release;
- (id)retain;
- (void)updateServiceMask;
- (BOOL)matchesSearchAttributes:(const struct IOBluetoothDeviceSearchAttributes *)arg1 ignoreDeviceNameIfNil:(BOOL)arg2;
- (oneway void)updateServicesArchive:(in bycopy id)arg1 lastUpdate:(in bycopy id)arg2;
- (oneway void)updateServices:(in bycopy id)arg1 lastUpdate:(in bycopy id)arg2;
- (void)setConnectionHandle:(unsigned short)arg1;
- (void)getRemoteVersionInfo:(unsigned short *)arg1 lmpVersion:(char *)arg2 lmpSubversion:(unsigned short *)arg3;
- (void)setRemoteVersionInfo:(unsigned short)arg1 lmpVersion:(unsigned char)arg2 lmpSubversion:(unsigned short)arg3;
- (void)setConnectionInfo:(unsigned short)arg1 linkType:(unsigned char)arg2 encryptionMode:(unsigned char)arg3;
- (BOOL)inquiryRSSI;
- (void)setInquiryRSSI:(BOOL)arg1;
- (void)setClockOffset:(unsigned short)arg1;
- (void)setPageScanMode:(unsigned char)arg1;
- (void)setPageScanPeriodMode:(unsigned char)arg1;
- (void)setPageScanRepetitionMode:(unsigned char)arg1;
- (oneway void)updateInquiryInfo:(in struct IOBluetoothHCIUnifiedInquiryResult *)arg1 lastUpdate:(in bycopy id)arg2;
- (void)setAddress:(const struct BluetoothDeviceAddress *)arg1;
- (id)getAddressNSData;
- (void)getAddress:(struct BluetoothDeviceAddress *)arg1;
- (void)updateName:(id)arg1 lastUpdate:(id)arg2 postNotification:(BOOL)arg3;
- (oneway void)updateName:(in bycopy id)arg1 lastUpdate:(in bycopy id)arg2;
- (int)destroyRFCOMMChannel:(unsigned char)arg1;
- (int)_performSDPQuery:(id)arg1 uuids:(id)arg2;
- (BOOL)connectionComplete;
- (void)callConnectionCompleteCallback:(id)arg1 status:(int)arg2;
- (void)callConnectionCompleteCallback:(id)arg1;
- (void)finalize;
- (void)dealloc;
- (void)updateFromNewIOService:(unsigned int)arg1;
- (void)ioServiceAdded:(unsigned int)arg1;
- (id)newMatchingDictionary;
- (void)updateFromAttributeDict:(id)arg1;
- (void)destroyServerConnection;
- (void)updateFromServer;
- (int)destroyConnection;
- (int)closeConnectionWhenIdle;
- (id)shortDescription;
- (void)BluetoothHCIConnectionComplete:(id)arg1 inStatus:(int)arg2 inConnectionResults:(struct BluetoothHCIEventConnectionCompleteResults *)arg3;
- (id)initWithAddress:(const struct BluetoothDeviceAddress *)arg1;
- (id)initWithIOService:(unsigned int)arg1;
- (id)initWithIOService:(unsigned int)arg1 address:(const struct BluetoothDeviceAddress *)arg2;
- (void)initWxProperties;
- (id)init;
- (id)getKey;
- (int)openL2CAPChannelAsync:(id *)arg1 withPSM:(unsigned short)arg2 withConfiguration:(id)arg3 delegate:(id)arg4;
- (int)openL2CAPChannelSync:(id *)arg1 withPSM:(unsigned short)arg2 withConfiguration:(id)arg3 delegate:(id)arg4;
- (int)setSupervisionTimeout:(unsigned short)arg1;
- (id)registerForDisconnectNotification:(id)arg1 selector:(SEL)arg2;
- (id)description;
- (id)getServiceRecordForUUID:(id)arg1;
- (id)awakeAfterUsingCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (BOOL)rawRSSI;
- (BOOL)RSSI;
- (int)performSDPQuery:(id)arg1 uuids:(id)arg2;
- (int)performSDPQuery:(id)arg1;
- (id)getLastServicesUpdate;
- (unsigned char)getEncryptionMode;
- (unsigned char)getLinkType;
- (BOOL)isIncoming;
- (id)getLastInquiryUpdate;
- (unsigned short)getClockOffset;
- (unsigned char)getPageScanMode;
- (unsigned char)getPageScanPeriodMode;
- (unsigned char)getPageScanRepetitionMode;
@property(readonly) NSString *addressString;
- (id)getAddressString;
- (const struct BluetoothDeviceAddress *)getAddress;
- (id)getDisplayName;
- (void)setDisplayName:(id)arg1;
- (id)getNameOrAddress;
@property(readonly) NSString *nameOrAddress;
- (id)getName;
@property(copy) NSString *name;
- (int)sendL2CAPEchoRequest:(void *)arg1 length:(unsigned short)arg2;
- (int)openRFCOMMChannel:(unsigned char)arg1 channel:(id *)arg2;
- (int)openRFCOMMChannelAsync:(id *)arg1 withChannelID:(unsigned char)arg2 delegate:(id)arg3;
- (int)openRFCOMMChannelSync:(id *)arg1 withChannelID:(unsigned char)arg2 delegate:(id)arg3;
- (int)openL2CAPChannel:(unsigned short)arg1 findExisting:(BOOL)arg2 newChannel:(id *)arg3;
- (int)openL2CAPChannelAsync:(id *)arg1 withPSM:(unsigned short)arg2 delegate:(id)arg3;
- (int)openL2CAPChannelSync:(id *)arg1 withPSM:(unsigned short)arg2 delegate:(id)arg3;
- (id)l2capChannels;
- (int)requestAuthenticationAsync;
- (int)requestAuthentication;
- (int)closeConnection;
- (void)BluetoothHCIRemoteNameRequestComplete:(id)arg1 inStatus:(int)arg2 inRemoteNameRequestResults:(struct BluetoothHCIEventRemoteNameRequestResults *)arg3;
- (int)remoteNameRequest:(id)arg1 withPageTimeout:(unsigned short)arg2;
- (int)remoteNameRequest:(id)arg1;
- (int)openConnection:(id)arg1 withPageTimeout:(unsigned short)arg2 authenticationRequired:(BOOL)arg3 allowRoleSwitch:(BOOL)arg4 forPairing:(BOOL)arg5;
- (int)openConnection:(id)arg1 withPageTimeout:(unsigned short)arg2 authenticationRequired:(BOOL)arg3 allowRoleSwitch:(BOOL)arg4;
- (int)openConnection:(id)arg1 withPageTimeout:(unsigned short)arg2 authenticationRequired:(BOOL)arg3;
- (int)openConnection:(id)arg1;
- (int)openConnection;
- (long long)comparePreferredFirstThenNamed:(id)arg1;
- (long long)compareNoNamesFirst:(id)arg1;
- (long long)compareNamesAndAddresses:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (struct OpaqueIOBluetoothObjectRef *)getDeviceRef;
@property(readonly) unsigned long long deviceID;
- (id)processName;
- (BOOL)isAddressRandomResolvable;
- (BOOL)isInitiator;
@property(nonatomic) unsigned char addressType;
@property(readonly, nonatomic) unsigned char linkLevelEncryption;
@property(readonly, nonatomic) BOOL isMagicCloudPairingCapable;
@property(nonatomic) BOOL magicCloudPairedPaired;
@property(nonatomic) BOOL midPriority;
@property(nonatomic) BOOL highPriority;
@property(nonatomic) unsigned char codecType;
@property(readonly) BOOL isTBFCPageCapable;
@property(readonly) BOOL isTBFCCapable;
@property(readonly) BOOL isConnnectionLLREnabled;
@property(readonly) BOOL isTBFCSuspended;
- (void)rename:(id)arg1;
- (void)setHighPower:(BOOL)arg1;
- (void)setHighPriorityLink:(BOOL)arg1;
@property(retain) NSString *accessoryFWVersion;
@property(nonatomic) BOOL heySiriEnabled;
@property(nonatomic) BOOL switchControlEnabled;
@property(nonatomic) unsigned char listeningMode;
@property(nonatomic) BOOL isDevFused;
@property(nonatomic) unsigned char primaryBud;
@property(nonatomic) unsigned char rightDoubleTap;
@property(nonatomic) unsigned char leftDoubleTap;
@property(nonatomic) unsigned char buttonMode;
@property(nonatomic) unsigned char micMode;
@property(nonatomic) unsigned char secondaryInEar;
@property(nonatomic) unsigned char primaryInEar;
@property(nonatomic) BOOL inEar;
@property(nonatomic) BOOL inEarDetect;
@property(nonatomic, getter=encryptionKeySize) unsigned char keySize;
@property(nonatomic) unsigned char batteryPercentCombined;
@property(nonatomic) unsigned char batteryPercentCase;
@property(nonatomic) unsigned char batteryPercentRight;
@property(nonatomic) unsigned char batteryPercentLeft;
@property(nonatomic) unsigned char batteryPercentSingle;
@property(nonatomic) unsigned char capabilityMask;
@property(nonatomic) unsigned char colorID;
@property(nonatomic) unsigned int serviceMask;
@property(nonatomic, getter=isLowEnergyPointer) BOOL lowEnergyPointer;
@property(nonatomic, getter=isLowEnergyKeyboard) BOOL lowEnergyKeyboard;
@property(nonatomic, getter=isLowEnergyDeviceHID2) BOOL lowEnergyDeviceHID2;
@property(readonly, nonatomic) BOOL isLowEnergyConnection;
@property(nonatomic, getter=isLowEnergyDevice) BOOL lowEnergyDevice;
@property(nonatomic, getter=headsetBattery) long long headsetBatteryPercent;
@property(nonatomic, getter=isConnecting) BOOL connecting;
- (BOOL)isConnected;
@property(nonatomic, getter=firstPairing) BOOL isFirstPairing;
- (BOOL)shouldHideDevice;
- (BOOL)isMCPaired;
- (BOOL)isPluggedOverUSB;
- (BOOL)isLEPaired;
- (BOOL)isBRPaired;
- (BOOL)isiCloudPaired;
- (BOOL)isRecent;
- (id)recentAccessDate;
- (void)removeLinkKey;
- (void)forceRemove;
- (void)remove;
- (void)addBluetoothSerialPort:(id)arg1;
- (void)addBluetoothDUNPort:(id)arg1;
- (void)addSerialPortForDevice:(id)arg1;
- (void)autoconfigureServices;
- (void)sdpQueryComplete:(id)arg1 status:(int)arg2;
- (unsigned int)configuredServices;
- (BOOL)isConfiguredHIDDevice;
- (BOOL)isConfigured;
- (int)removeFromFavorites;
- (int)addToFavorites;
- (BOOL)isFavorite;
- (BOOL)isPaired;
- (id)getLastNameUpdate;
- (unsigned short)getConnectionHandle;
@property(readonly) unsigned int deviceClassMinor;
- (unsigned int)getDeviceClassMinor;
@property(readonly) unsigned int deviceClassMajor;
- (unsigned int)getDeviceClassMajor;
@property(readonly) unsigned int serviceClassMajor;
- (unsigned int)getServiceClassMajor;
- (id)getServices;
- (unsigned int)getClassOfDevice;
- (id)appleSupportedFeatures;
@property(readonly) BOOL isAdvancedAppleAudioDevice;
@property(readonly) BOOL isCATTSupported;
@property(readonly) NSURL *PnPDocumentationURL;
@property(readonly) NSString *PnPServiceDescription;
@property(readonly) NSURL *PnPClientExecutableURL;
@property(readonly) unsigned short PnPVendorIDSource;
@property(readonly) unsigned short PnPVersion;
@property(readonly) unsigned short PnPProductID;
@property(readonly) unsigned short PnPVendorID;
@property(readonly) unsigned short PnPSpecificationID;
@property(readonly) BOOL PnPSupported;
@property(readonly) IOBluetoothSDPServiceRecord *PnPSDPRecord;
@property(readonly) unsigned short HIDSSRHostMinTimeout;
@property(readonly) unsigned short HIDSSRHostMaxLatency;
@property(readonly) unsigned int HIDQoSLatency;
@property(readonly) unsigned short HIDSupervisionTimeout;
@property(readonly) unsigned char HIDDeviceSubclass;
@property(readonly) unsigned char HIDCountryCode;
@property(readonly) BOOL HIDBootDevice;
@property(readonly) BOOL HIDReconnectInitiate;
@property(readonly) BOOL HIDSupportsRemoteWake;
@property(readonly) BOOL HIDSupportsVirtualCable;
@property(readonly) BOOL HIDNormallyConnectable;
@property(readonly) BOOL HIDProfileSupported;
@property(readonly) NSDictionary *HIDDeviceDictionary;
@property(readonly) IOBluetoothSDPServiceRecord *HIDServiceRecord;
- (BOOL)isHandsFreeDevice;
- (id)handsFreeDeviceServiceRecord;
- (id)handsFreeDeviceDriverID;
- (BOOL)isHandsFreeAudioGateway;
- (id)handsFreeAudioGatewayServiceRecord;
- (id)handsFreeAudioGatewayDriverID;
- (unsigned int)audioDeviceID:(BOOL)arg1;
- (void)batteryLevel:(CDUnknownBlockType)arg1;
- (void)audioCodecString:(CDUnknownBlockType)arg1;
@property(readonly) BOOL isDoAPSupported;
@property(readonly) BOOL isSwitchControlSupported;
@property(readonly) BOOL isWIAPSink;
@property(readonly) BOOL isMicSelectionSupported;
@property(readonly) BOOL isEnhancedDoubleTapSupported;
@property(readonly) BOOL isFastConnectSupported;
@property(readonly) BOOL isBasebandFastConnectSupported;
@property(readonly) BOOL isANCSupported;
@property(readonly) BOOL isInEarDetectionSupported;
- (id)appleSupportFeaturesVersion;
- (id)appleSupportFeatures;
@property(readonly) IOBluetoothSDPServiceRecord *WIAPSinkServiceRecord;
@property(readonly) IOBluetoothSDPServiceRecord *appleAccessoryServiceRecord;
@property(readonly) BOOL isMultiBatteryDevice;
@property(readonly) BOOL isW1;
@property(readonly) BOOL isAppleAccessoryServer;
@property(readonly) IOBluetoothSDPServiceRecord *appleAccessoryServerServiceRecord;
@property(readonly) unsigned int serviceForDevice;
@property(readonly) unsigned int outputAudioDeviceID;
@property(readonly) unsigned int inputAudioDeviceID;
@property(readonly) BOOL isA2DPSource;
@property(readonly) BOOL isA2DPSink;
@property(readonly) BOOL isAudioSink;
@property(readonly) unsigned short AVDTPVersion;
- (unsigned short)AVRCPVersion:(BOOL)arg1;
@property(readonly) unsigned short AVRCPControllerVersion;
@property(readonly) unsigned short AVRCPTargetVersion;
@property(readonly, getter=isHeadsetDevice) BOOL headsetDevice;
- (id)headsetDeviceServiceRecord;
@property(readonly, getter=isHeadsetAudioGateway) BOOL headsetAudioGateway;
- (id)headsetAudioGatewayServiceRecord;

@end

